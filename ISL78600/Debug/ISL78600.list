
ISL78600.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b470  08000190  08000190  00010190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800b600  0800b600  0001b600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b654  0800b654  00020d28  2**0
                  CONTENTS
  4 .ARM          00000008  0800b654  0800b654  0001b654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b65c  0800b65c  00020d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b65c  0800b65c  0001b65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b660  0800b660  0001b660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000d28  20000000  0800b664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb4  20000d28  0800c38c  00020d28  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bdc  0800c38c  00021bdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020d28  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ed08  00000000  00000000  00020d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006824  00000000  00000000  0004fa60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002068  00000000  00000000  00056288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cb8  00000000  00000000  000582f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002edd0  00000000  00000000  00059fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003994f  00000000  00000000  00088d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2662  00000000  00000000  000c26c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b4d29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083a8  00000000  00000000  001b4d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000d28 	.word	0x20000d28
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b5e8 	.word	0x0800b5e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000d2c 	.word	0x20000d2c
 80001cc:	0800b5e8 	.word	0x0800b5e8

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_uldivmod>:
 8000af8:	b953      	cbnz	r3, 8000b10 <__aeabi_uldivmod+0x18>
 8000afa:	b94a      	cbnz	r2, 8000b10 <__aeabi_uldivmod+0x18>
 8000afc:	2900      	cmp	r1, #0
 8000afe:	bf08      	it	eq
 8000b00:	2800      	cmpeq	r0, #0
 8000b02:	bf1c      	itt	ne
 8000b04:	f04f 31ff 	movne.w	r1, #4294967295
 8000b08:	f04f 30ff 	movne.w	r0, #4294967295
 8000b0c:	f000 b974 	b.w	8000df8 <__aeabi_idiv0>
 8000b10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b18:	f000 f806 	bl	8000b28 <__udivmoddi4>
 8000b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b24:	b004      	add	sp, #16
 8000b26:	4770      	bx	lr

08000b28 <__udivmoddi4>:
 8000b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b2c:	9d08      	ldr	r5, [sp, #32]
 8000b2e:	4604      	mov	r4, r0
 8000b30:	468e      	mov	lr, r1
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d14d      	bne.n	8000bd2 <__udivmoddi4+0xaa>
 8000b36:	428a      	cmp	r2, r1
 8000b38:	4694      	mov	ip, r2
 8000b3a:	d969      	bls.n	8000c10 <__udivmoddi4+0xe8>
 8000b3c:	fab2 f282 	clz	r2, r2
 8000b40:	b152      	cbz	r2, 8000b58 <__udivmoddi4+0x30>
 8000b42:	fa01 f302 	lsl.w	r3, r1, r2
 8000b46:	f1c2 0120 	rsb	r1, r2, #32
 8000b4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b52:	ea41 0e03 	orr.w	lr, r1, r3
 8000b56:	4094      	lsls	r4, r2
 8000b58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b5c:	0c21      	lsrs	r1, r4, #16
 8000b5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000b62:	fa1f f78c 	uxth.w	r7, ip
 8000b66:	fb08 e316 	mls	r3, r8, r6, lr
 8000b6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b6e:	fb06 f107 	mul.w	r1, r6, r7
 8000b72:	4299      	cmp	r1, r3
 8000b74:	d90a      	bls.n	8000b8c <__udivmoddi4+0x64>
 8000b76:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b7e:	f080 811f 	bcs.w	8000dc0 <__udivmoddi4+0x298>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 811c 	bls.w	8000dc0 <__udivmoddi4+0x298>
 8000b88:	3e02      	subs	r6, #2
 8000b8a:	4463      	add	r3, ip
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b94:	fb08 3310 	mls	r3, r8, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ba0:	42a7      	cmp	r7, r4
 8000ba2:	d90a      	bls.n	8000bba <__udivmoddi4+0x92>
 8000ba4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ba8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bac:	f080 810a 	bcs.w	8000dc4 <__udivmoddi4+0x29c>
 8000bb0:	42a7      	cmp	r7, r4
 8000bb2:	f240 8107 	bls.w	8000dc4 <__udivmoddi4+0x29c>
 8000bb6:	4464      	add	r4, ip
 8000bb8:	3802      	subs	r0, #2
 8000bba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bbe:	1be4      	subs	r4, r4, r7
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	b11d      	cbz	r5, 8000bcc <__udivmoddi4+0xa4>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000bcc:	4631      	mov	r1, r6
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0xc2>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	f000 80ef 	beq.w	8000dba <__udivmoddi4+0x292>
 8000bdc:	2600      	movs	r6, #0
 8000bde:	e9c5 0100 	strd	r0, r1, [r5]
 8000be2:	4630      	mov	r0, r6
 8000be4:	4631      	mov	r1, r6
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	fab3 f683 	clz	r6, r3
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d14a      	bne.n	8000c88 <__udivmoddi4+0x160>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xd4>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 80f9 	bhi.w	8000dee <__udivmoddi4+0x2c6>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	469e      	mov	lr, r3
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d0e0      	beq.n	8000bcc <__udivmoddi4+0xa4>
 8000c0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c0e:	e7dd      	b.n	8000bcc <__udivmoddi4+0xa4>
 8000c10:	b902      	cbnz	r2, 8000c14 <__udivmoddi4+0xec>
 8000c12:	deff      	udf	#255	; 0xff
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f040 8092 	bne.w	8000d42 <__udivmoddi4+0x21a>
 8000c1e:	eba1 010c 	sub.w	r1, r1, ip
 8000c22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	2601      	movs	r6, #1
 8000c2c:	0c20      	lsrs	r0, r4, #16
 8000c2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c32:	fb07 1113 	mls	r1, r7, r3, r1
 8000c36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c3a:	fb0e f003 	mul.w	r0, lr, r3
 8000c3e:	4288      	cmp	r0, r1
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x12c>
 8000c42:	eb1c 0101 	adds.w	r1, ip, r1
 8000c46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c4a:	d202      	bcs.n	8000c52 <__udivmoddi4+0x12a>
 8000c4c:	4288      	cmp	r0, r1
 8000c4e:	f200 80cb 	bhi.w	8000de8 <__udivmoddi4+0x2c0>
 8000c52:	4643      	mov	r3, r8
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000c60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c64:	fb0e fe00 	mul.w	lr, lr, r0
 8000c68:	45a6      	cmp	lr, r4
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x156>
 8000c6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c74:	d202      	bcs.n	8000c7c <__udivmoddi4+0x154>
 8000c76:	45a6      	cmp	lr, r4
 8000c78:	f200 80bb 	bhi.w	8000df2 <__udivmoddi4+0x2ca>
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	eba4 040e 	sub.w	r4, r4, lr
 8000c82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c86:	e79c      	b.n	8000bc2 <__udivmoddi4+0x9a>
 8000c88:	f1c6 0720 	rsb	r7, r6, #32
 8000c8c:	40b3      	lsls	r3, r6
 8000c8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c96:	fa20 f407 	lsr.w	r4, r0, r7
 8000c9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c9e:	431c      	orrs	r4, r3
 8000ca0:	40f9      	lsrs	r1, r7
 8000ca2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca6:	fa00 f306 	lsl.w	r3, r0, r6
 8000caa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cae:	0c20      	lsrs	r0, r4, #16
 8000cb0:	fa1f fe8c 	uxth.w	lr, ip
 8000cb4:	fb09 1118 	mls	r1, r9, r8, r1
 8000cb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000cc0:	4288      	cmp	r0, r1
 8000cc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000cc6:	d90b      	bls.n	8000ce0 <__udivmoddi4+0x1b8>
 8000cc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ccc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd0:	f080 8088 	bcs.w	8000de4 <__udivmoddi4+0x2bc>
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	f240 8085 	bls.w	8000de4 <__udivmoddi4+0x2bc>
 8000cda:	f1a8 0802 	sub.w	r8, r8, #2
 8000cde:	4461      	add	r1, ip
 8000ce0:	1a09      	subs	r1, r1, r0
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ce8:	fb09 1110 	mls	r1, r9, r0, r1
 8000cec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cf0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf4:	458e      	cmp	lr, r1
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x1e2>
 8000cf8:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d00:	d26c      	bcs.n	8000ddc <__udivmoddi4+0x2b4>
 8000d02:	458e      	cmp	lr, r1
 8000d04:	d96a      	bls.n	8000ddc <__udivmoddi4+0x2b4>
 8000d06:	3802      	subs	r0, #2
 8000d08:	4461      	add	r1, ip
 8000d0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d12:	eba1 010e 	sub.w	r1, r1, lr
 8000d16:	42a1      	cmp	r1, r4
 8000d18:	46c8      	mov	r8, r9
 8000d1a:	46a6      	mov	lr, r4
 8000d1c:	d356      	bcc.n	8000dcc <__udivmoddi4+0x2a4>
 8000d1e:	d053      	beq.n	8000dc8 <__udivmoddi4+0x2a0>
 8000d20:	b15d      	cbz	r5, 8000d3a <__udivmoddi4+0x212>
 8000d22:	ebb3 0208 	subs.w	r2, r3, r8
 8000d26:	eb61 010e 	sbc.w	r1, r1, lr
 8000d2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d32:	40f1      	lsrs	r1, r6
 8000d34:	431f      	orrs	r7, r3
 8000d36:	e9c5 7100 	strd	r7, r1, [r5]
 8000d3a:	2600      	movs	r6, #0
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	f1c2 0320 	rsb	r3, r2, #32
 8000d46:	40d8      	lsrs	r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000d50:	4091      	lsls	r1, r2
 8000d52:	4301      	orrs	r1, r0
 8000d54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d58:	fa1f fe8c 	uxth.w	lr, ip
 8000d5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d60:	fb07 3610 	mls	r6, r7, r0, r3
 8000d64:	0c0b      	lsrs	r3, r1, #16
 8000d66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000d6e:	429e      	cmp	r6, r3
 8000d70:	fa04 f402 	lsl.w	r4, r4, r2
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x260>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d7e:	d22f      	bcs.n	8000de0 <__udivmoddi4+0x2b8>
 8000d80:	429e      	cmp	r6, r3
 8000d82:	d92d      	bls.n	8000de0 <__udivmoddi4+0x2b8>
 8000d84:	3802      	subs	r0, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1b9b      	subs	r3, r3, r6
 8000d8a:	b289      	uxth	r1, r1
 8000d8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d90:	fb07 3316 	mls	r3, r7, r6, r3
 8000d94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d98:	fb06 f30e 	mul.w	r3, r6, lr
 8000d9c:	428b      	cmp	r3, r1
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x28a>
 8000da0:	eb1c 0101 	adds.w	r1, ip, r1
 8000da4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000da8:	d216      	bcs.n	8000dd8 <__udivmoddi4+0x2b0>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d914      	bls.n	8000dd8 <__udivmoddi4+0x2b0>
 8000dae:	3e02      	subs	r6, #2
 8000db0:	4461      	add	r1, ip
 8000db2:	1ac9      	subs	r1, r1, r3
 8000db4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000db8:	e738      	b.n	8000c2c <__udivmoddi4+0x104>
 8000dba:	462e      	mov	r6, r5
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	e705      	b.n	8000bcc <__udivmoddi4+0xa4>
 8000dc0:	4606      	mov	r6, r0
 8000dc2:	e6e3      	b.n	8000b8c <__udivmoddi4+0x64>
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	e6f8      	b.n	8000bba <__udivmoddi4+0x92>
 8000dc8:	454b      	cmp	r3, r9
 8000dca:	d2a9      	bcs.n	8000d20 <__udivmoddi4+0x1f8>
 8000dcc:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dd4:	3801      	subs	r0, #1
 8000dd6:	e7a3      	b.n	8000d20 <__udivmoddi4+0x1f8>
 8000dd8:	4646      	mov	r6, r8
 8000dda:	e7ea      	b.n	8000db2 <__udivmoddi4+0x28a>
 8000ddc:	4620      	mov	r0, r4
 8000dde:	e794      	b.n	8000d0a <__udivmoddi4+0x1e2>
 8000de0:	4640      	mov	r0, r8
 8000de2:	e7d1      	b.n	8000d88 <__udivmoddi4+0x260>
 8000de4:	46d0      	mov	r8, sl
 8000de6:	e77b      	b.n	8000ce0 <__udivmoddi4+0x1b8>
 8000de8:	3b02      	subs	r3, #2
 8000dea:	4461      	add	r1, ip
 8000dec:	e732      	b.n	8000c54 <__udivmoddi4+0x12c>
 8000dee:	4630      	mov	r0, r6
 8000df0:	e709      	b.n	8000c06 <__udivmoddi4+0xde>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	e742      	b.n	8000c7e <__udivmoddi4+0x156>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <main>:
 * @arguments
 * @retvar
 */

int main(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	HAL_Init();
 8000e00:	f000 fbb9 	bl	8001576 <HAL_Init>
	RCC_Init();
 8000e04:	f008 fba0 	bl	8009548 <RCC_Init>
	BASIC_TIMER_Init();
 8000e08:	f008 fc1c 	bl	8009644 <BASIC_TIMER_Init>
	GENERAL_TIMER_Init();
 8000e0c:	f008 fc6c 	bl	80096e8 <GENERAL_TIMER_Init>
	TIMER7_Init();
 8000e10:	f008 fc92 	bl	8009738 <TIMER7_Init>
	RTC_Init();
 8000e14:	f008 fbc2 	bl	800959c <RTC_Init>
	GPIO_Init(&gpio_cfg[0]);
 8000e18:	4845      	ldr	r0, [pc, #276]	; (8000f30 <main+0x134>)
 8000e1a:	f008 f9f7 	bl	800920c <GPIO_Init>
	BOOT0_Init();
 8000e1e:	f008 fa69 	bl	80092f4 <BOOT0_Init>
	NVIC_Init();
 8000e22:	f008 fb4d 	bl	80094c0 <NVIC_Init>
	SPI_Init();
 8000e26:	f008 fbe7 	bl	80095f8 <SPI_Init>
	I2C_Init();
 8000e2a:	f008 fb05 	bl	8009438 <I2C_Init>
	UART_Init();
 8000e2e:	f008 fc91 	bl	8009754 <UART_Init>
	CAN1_Init();
 8000e32:	f007 fa53 	bl	80082dc <CAN1_Init>
	DMA_Init();
 8000e36:	f008 f9b5 	bl	80091a4 <DMA_Init>
	ADC_Init();
 8000e3a:	f007 fa1d 	bl	8008278 <ADC_Init>
//	ADC_EXP_Init();
	DATABASE_Init();
 8000e3e:	f008 fcfd 	bl	800983c <DATABASE_Init>
	BMS_Init();
 8000e42:	f000 f889 	bl	8000f58 <BMS_Init>
	CONT_Init();
 8000e46:	f009 fa9b 	bl	800a380 <CONT_Init>
	BQ_AFE_Init();
 8000e4a:	f006 f81d 	bl	8006e88 <BQ_AFE_Init>
//	SD_Init();
//	BLESparkViewInit();
//	EEPROM_ERASEFULL();
//	CURRENT_StartRead();
//	UART_Send_Index();
	TIMER_Delay_ms(2);
 8000e4e:	2002      	movs	r0, #2
 8000e50:	f008 fc2c 	bl	80096ac <TIMER_Delay_ms>
	EMGcheck = 1;
 8000e54:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <main+0x138>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	701a      	strb	r2, [r3, #0]

	GPIO_TogglePin(GPIO_PIN_FAULT_LED);
 8000e5a:	2014      	movs	r0, #20
 8000e5c:	f008 facf 	bl	80093fe <GPIO_TogglePin>
	HAL_Delay(100);
 8000e60:	2064      	movs	r0, #100	; 0x64
 8000e62:	f000 fbfd 	bl	8001660 <HAL_Delay>
	GPIO_TogglePin(GPIO_PIN_FAULT_LED);
 8000e66:	2014      	movs	r0, #20
 8000e68:	f008 fac9 	bl	80093fe <GPIO_TogglePin>

	while(1)
	{
			current_timer = __HAL_TIM_GET_COUNTER(&basic_timer_cfg);
 8000e6c:	4b32      	ldr	r3, [pc, #200]	; (8000f38 <main+0x13c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	4b31      	ldr	r3, [pc, #196]	; (8000f3c <main+0x140>)
 8000e76:	801a      	strh	r2, [r3, #0]
			if(current_timer%1000 == 0)		// 100 msec
 8000e78:	4b30      	ldr	r3, [pc, #192]	; (8000f3c <main+0x140>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	4a30      	ldr	r2, [pc, #192]	; (8000f40 <main+0x144>)
 8000e7e:	fba2 1203 	umull	r1, r2, r2, r3
 8000e82:	0992      	lsrs	r2, r2, #6
 8000e84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e88:	fb01 f202 	mul.w	r2, r1, r2
 8000e8c:	1a9b      	subs	r3, r3, r2
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d112      	bne.n	8000eba <main+0xbe>
			{
				HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8000e94:	2014      	movs	r0, #20
 8000e96:	f002 fa48 	bl	800332a <HAL_NVIC_DisableIRQ>
				BQ_AFE_ReadVoltage();
 8000e9a:	f006 f827 	bl	8006eec <BQ_AFE_ReadVoltage>
//				{
//					CONT_StateRequest(CONT_STANDBY);
//					EMGcheck = 0;
//				}
//				SOC_Update();
				Seq_Check();
 8000e9e:	f009 fc33 	bl	800a708 <Seq_Check>
				temp_cnt++;
 8000ea2:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <main+0x148>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <main+0x148>)
 8000eac:	701a      	strb	r2, [r3, #0]
				bal_cnt++;
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <main+0x14c>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4b24      	ldr	r3, [pc, #144]	; (8000f48 <main+0x14c>)
 8000eb8:	701a      	strb	r2, [r3, #0]
			}

			if(bal_cnt == 5)			// 500 msec
 8000eba:	4b23      	ldr	r3, [pc, #140]	; (8000f48 <main+0x14c>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2b05      	cmp	r3, #5
 8000ec0:	d104      	bne.n	8000ecc <main+0xd0>
			{
//				BAL_Check();
				BQ_AFE_GETState();
 8000ec2:	f006 fc49 	bl	8007758 <BQ_AFE_GETState>

				bal_cnt = 0;
 8000ec6:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <main+0x14c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
			}

			if(temp_cnt == 10)			// 1000 msec
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <main+0x148>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b0a      	cmp	r3, #10
 8000ed2:	d10a      	bne.n	8000eea <main+0xee>
			{
				BQ_AFE_ReadTemperature();
 8000ed4:	f006 faa4 	bl	8007420 <BQ_AFE_ReadTemperature>

				can_cnt++;
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <main+0x150>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	; (8000f4c <main+0x150>)
 8000ee2:	701a      	strb	r2, [r3, #0]
				temp_cnt  = 0;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <main+0x148>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	701a      	strb	r2, [r3, #0]
			}

			if(can_cnt == 5)
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <main+0x150>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b05      	cmp	r3, #5
 8000ef0:	d10e      	bne.n	8000f10 <main+0x114>
			{
  			    eeprom_cnt++;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <main+0x154>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <main+0x154>)
 8000efc:	801a      	strh	r2, [r3, #0]
  			    soh_cnt++;
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <main+0x158>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	3301      	adds	r3, #1
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <main+0x158>)
 8000f08:	701a      	strb	r2, [r3, #0]
				can_cnt = 0;
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <main+0x150>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
			}

			if(soh_cnt == 12)     //60 sec
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <main+0x158>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b0c      	cmp	r3, #12
 8000f16:	d102      	bne.n	8000f1e <main+0x122>
			{
				soh_cnt = 0;
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <main+0x158>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
			}

			if(eeprom_cnt == 60)		// 300 sec
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <main+0x154>)
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	2b3c      	cmp	r3, #60	; 0x3c
 8000f24:	d1a2      	bne.n	8000e6c <main+0x70>
			{
				eeprom_cnt = 0;
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <main+0x154>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	801a      	strh	r2, [r3, #0]
			current_timer = __HAL_TIM_GET_COUNTER(&basic_timer_cfg);
 8000f2c:	e79e      	b.n	8000e6c <main+0x70>
 8000f2e:	bf00      	nop
 8000f30:	20000260 	.word	0x20000260
 8000f34:	20001bd1 	.word	0x20001bd1
 8000f38:	200007ac 	.word	0x200007ac
 8000f3c:	20000d4a 	.word	0x20000d4a
 8000f40:	10624dd3 	.word	0x10624dd3
 8000f44:	20000d44 	.word	0x20000d44
 8000f48:	20000d45 	.word	0x20000d45
 8000f4c:	20000d48 	.word	0x20000d48
 8000f50:	20000d46 	.word	0x20000d46
 8000f54:	20000d49 	.word	0x20000d49

08000f58 <BMS_Init>:
			}
	}
}

void BMS_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
	DATABASE_BMS_s	database_bms = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	f8c3 200b 	str.w	r2, [r3, #11]

	database_bms.afe_error = AFE_NO_ERR;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	727b      	strb	r3, [r7, #9]
	database_bms.afe_state = AFE_SHUTDOWN;
 8000f70:	2300      	movs	r3, #0
 8000f72:	71bb      	strb	r3, [r7, #6]
	database_bms.bms_state = BMS_IDLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
	database_bms.bms_error = BMS_NO_ERR;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	72bb      	strb	r3, [r7, #10]
	database_bms.balancing_status = BAL_OFF;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73bb      	strb	r3, [r7, #14]

	DATABASE_WRITE((void*)(&database_bms), DATABASE_BMS);
 8000f80:	463b      	mov	r3, r7
 8000f82:	2110      	movs	r1, #16
 8000f84:	4618      	mov	r0, r3
 8000f86:	f008 fc8d 	bl	80098a4 <DATABASE_WRITE>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
//	current_timer = 1;
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <HAL_MspInit>:
 * @arguments
 * @retvar
 */

void HAL_MspInit(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_MspInit+0x44>)
 8000fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <HAL_MspInit+0x44>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fba:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_MspInit+0x44>)
 8000fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_MspInit+0x44>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	4a08      	ldr	r2, [pc, #32]	; (8000fec <HAL_MspInit+0x44>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_MspInit+0x44>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fde:	2003      	movs	r0, #3
 8000fe0:	f002 f96e 	bl	80032c0 <HAL_NVIC_SetPriorityGrouping>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40021000 	.word	0x40021000

08000ff0 <HAL_SPI_MspInit>:
 * @arguments
 * @retvar
 */

void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a12      	ldr	r2, [pc, #72]	; (8001048 <HAL_SPI_MspInit+0x58>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d10b      	bne.n	800101a <HAL_SPI_MspInit+0x2a>
	{
		__HAL_RCC_SPI2_CLK_ENABLE();
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_SPI_MspInit+0x5c>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	4a11      	ldr	r2, [pc, #68]	; (800104c <HAL_SPI_MspInit+0x5c>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100c:	6593      	str	r3, [r2, #88]	; 0x58
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <HAL_SPI_MspInit+0x5c>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
	}

	if(hspi->Instance == SPI3)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a0c      	ldr	r2, [pc, #48]	; (8001050 <HAL_SPI_MspInit+0x60>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d10b      	bne.n	800103c <HAL_SPI_MspInit+0x4c>
	{
		__HAL_RCC_SPI3_CLK_ENABLE();
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_SPI_MspInit+0x5c>)
 8001026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001028:	4a08      	ldr	r2, [pc, #32]	; (800104c <HAL_SPI_MspInit+0x5c>)
 800102a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800102e:	6593      	str	r3, [r2, #88]	; 0x58
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_SPI_MspInit+0x5c>)
 8001032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
	}
}
 800103c:	bf00      	nop
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	40003800 	.word	0x40003800
 800104c:	40021000 	.word	0x40021000
 8001050:	40003c00 	.word	0x40003c00

08001054 <HAL_RTC_MspInit>:
 * @arguments
 * @retvar
 */

void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b09a      	sub	sp, #104	; 0x68
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	225c      	movs	r2, #92	; 0x5c
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f00a f8b1 	bl	800b1cc <memset>

    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800106a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800106e:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001074:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	4618      	mov	r0, r3
 800107c:	f003 ff6a 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_RTC_MspInit+0x36>
    {
      Error_Handler();
 8001086:	f000 f9cd 	bl	8001424 <Error_Handler>
    }

    __HAL_RCC_RTC_ENABLE();
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_RTC_MspInit+0x50>)
 800108c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <HAL_RTC_MspInit+0x50>)
 8001092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800109a:	bf00      	nop
 800109c:	3768      	adds	r7, #104	; 0x68
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000

080010a8 <HAL_TIM_Base_MspInit>:
 * @arguments
 * @retvar
 */

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a25      	ldr	r2, [pc, #148]	; (800114c <HAL_TIM_Base_MspInit+0xa4>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d10c      	bne.n	80010d4 <HAL_TIM_Base_MspInit+0x2c>
	{
		__HAL_RCC_TIM6_CLK_ENABLE();
 80010ba:	4b25      	ldr	r3, [pc, #148]	; (8001150 <HAL_TIM_Base_MspInit+0xa8>)
 80010bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010be:	4a24      	ldr	r2, [pc, #144]	; (8001150 <HAL_TIM_Base_MspInit+0xa8>)
 80010c0:	f043 0310 	orr.w	r3, r3, #16
 80010c4:	6593      	str	r3, [r2, #88]	; 0x58
 80010c6:	4b22      	ldr	r3, [pc, #136]	; (8001150 <HAL_TIM_Base_MspInit+0xa8>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	f003 0310 	and.w	r3, r3, #16
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
	}
	else if(htim->Instance == TIM15)
	{
		__HAL_RCC_TIM15_CLK_ENABLE();
	}
}
 80010d2:	e034      	b.n	800113e <HAL_TIM_Base_MspInit+0x96>
	else if(htim->Instance == TIM2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010dc:	d10c      	bne.n	80010f8 <HAL_TIM_Base_MspInit+0x50>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <HAL_TIM_Base_MspInit+0xa8>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	4a1b      	ldr	r2, [pc, #108]	; (8001150 <HAL_TIM_Base_MspInit+0xa8>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <HAL_TIM_Base_MspInit+0xa8>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]
}
 80010f6:	e022      	b.n	800113e <HAL_TIM_Base_MspInit+0x96>
	else if(htim->Instance == TIM7)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a15      	ldr	r2, [pc, #84]	; (8001154 <HAL_TIM_Base_MspInit+0xac>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d10c      	bne.n	800111c <HAL_TIM_Base_MspInit+0x74>
		__HAL_RCC_TIM7_CLK_ENABLE();
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <HAL_TIM_Base_MspInit+0xa8>)
 8001104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <HAL_TIM_Base_MspInit+0xa8>)
 8001108:	f043 0320 	orr.w	r3, r3, #32
 800110c:	6593      	str	r3, [r2, #88]	; 0x58
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <HAL_TIM_Base_MspInit+0xa8>)
 8001110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001112:	f003 0320 	and.w	r3, r3, #32
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
}
 800111a:	e010      	b.n	800113e <HAL_TIM_Base_MspInit+0x96>
	else if(htim->Instance == TIM15)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0d      	ldr	r2, [pc, #52]	; (8001158 <HAL_TIM_Base_MspInit+0xb0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d10b      	bne.n	800113e <HAL_TIM_Base_MspInit+0x96>
		__HAL_RCC_TIM15_CLK_ENABLE();
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_TIM_Base_MspInit+0xa8>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <HAL_TIM_Base_MspInit+0xa8>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001130:	6613      	str	r3, [r2, #96]	; 0x60
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <HAL_TIM_Base_MspInit+0xa8>)
 8001134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
}
 800113e:	bf00      	nop
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40001000 	.word	0x40001000
 8001150:	40021000 	.word	0x40021000
 8001154:	40001400 	.word	0x40001400
 8001158:	40014000 	.word	0x40014000

0800115c <HAL_UART_MspInit>:
 * @arguments
 * @retvar
 */

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a1c      	ldr	r2, [pc, #112]	; (80011dc <HAL_UART_MspInit+0x80>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d10c      	bne.n	8001188 <HAL_UART_MspInit+0x2c>
	{
		__HAL_RCC_USART1_CLK_ENABLE();
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_UART_MspInit+0x84>)
 8001170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001172:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <HAL_UART_MspInit+0x84>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6613      	str	r3, [r2, #96]	; 0x60
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_UART_MspInit+0x84>)
 800117c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
	}
	else if(huart->Instance == USART3)
	{
		__HAL_RCC_USART3_CLK_ENABLE();
	}
}
 8001186:	e022      	b.n	80011ce <HAL_UART_MspInit+0x72>
	else if(huart->Instance == USART2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a15      	ldr	r2, [pc, #84]	; (80011e4 <HAL_UART_MspInit+0x88>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d10c      	bne.n	80011ac <HAL_UART_MspInit+0x50>
		__HAL_RCC_USART2_CLK_ENABLE();
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_UART_MspInit+0x84>)
 8001194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <HAL_UART_MspInit+0x84>)
 8001198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119c:	6593      	str	r3, [r2, #88]	; 0x58
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_UART_MspInit+0x84>)
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
}
 80011aa:	e010      	b.n	80011ce <HAL_UART_MspInit+0x72>
	else if(huart->Instance == USART3)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <HAL_UART_MspInit+0x8c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d10b      	bne.n	80011ce <HAL_UART_MspInit+0x72>
		__HAL_RCC_USART3_CLK_ENABLE();
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_UART_MspInit+0x84>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ba:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <HAL_UART_MspInit+0x84>)
 80011bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011c0:	6593      	str	r3, [r2, #88]	; 0x58
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <HAL_UART_MspInit+0x84>)
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
}
 80011ce:	bf00      	nop
 80011d0:	371c      	adds	r7, #28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40013800 	.word	0x40013800
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40004400 	.word	0x40004400
 80011e8:	40004800 	.word	0x40004800

080011ec <HAL_CAN_MspInit>:
 * @arguments
 * @retvar
 */

void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_CAN_MspInit+0x38>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d10b      	bne.n	8001216 <HAL_CAN_MspInit+0x2a>
	{
		__HAL_RCC_CAN1_CLK_ENABLE();
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_CAN_MspInit+0x3c>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <HAL_CAN_MspInit+0x3c>)
 8001204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001208:	6593      	str	r3, [r2, #88]	; 0x58
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <HAL_CAN_MspInit+0x3c>)
 800120c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40006400 	.word	0x40006400
 8001228:	40021000 	.word	0x40021000

0800122c <HAL_I2C_MspInit>:
 * @arguments
 * @retvar
 */

void HAL_I2C_MspInit(I2C_HandleTypeDef	*hi2c)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b09c      	sub	sp, #112	; 0x70
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	225c      	movs	r2, #92	; 0x5c
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f009 ffc5 	bl	800b1cc <memset>

	if(hi2c->Instance == I2C1)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a29      	ldr	r2, [pc, #164]	; (80012ec <HAL_I2C_MspInit+0xc0>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d11a      	bne.n	8001282 <HAL_I2C_MspInit+0x56>
	{
		PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800124c:	2340      	movs	r3, #64	; 0x40
 800124e:	617b      	str	r3, [r7, #20]
		PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001250:	2300      	movs	r3, #0
 8001252:	64bb      	str	r3, [r7, #72]	; 0x48
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4618      	mov	r0, r3
 800125a:	f003 fe7b 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_I2C_MspInit+0x3c>
		{
			Error_Handler();
 8001264:	f000 f8de 	bl	8001424 <Error_Handler>
		}

    	__HAL_RCC_I2C1_CLK_ENABLE();
 8001268:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <HAL_I2C_MspInit+0xc4>)
 800126a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126c:	4a20      	ldr	r2, [pc, #128]	; (80012f0 <HAL_I2C_MspInit+0xc4>)
 800126e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001272:	6593      	str	r3, [r2, #88]	; 0x58
 8001274:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <HAL_I2C_MspInit+0xc4>)
 8001276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	693b      	ldr	r3, [r7, #16]
    }
    else if(hi2c->Instance == I2C3)
    {
    	__HAL_RCC_I2C3_CLK_ENABLE();
    }
}
 8001280:	e030      	b.n	80012e4 <HAL_I2C_MspInit+0xb8>
    else if(hi2c->Instance == I2C2)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <HAL_I2C_MspInit+0xc8>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d11a      	bne.n	80012c2 <HAL_I2C_MspInit+0x96>
    	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	617b      	str	r3, [r7, #20]
    	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001290:	2300      	movs	r3, #0
 8001292:	64bb      	str	r3, [r7, #72]	; 0x48
    	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4618      	mov	r0, r3
 800129a:	f003 fe5b 	bl	8004f54 <HAL_RCCEx_PeriphCLKConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_I2C_MspInit+0x7c>
    		Error_Handler();
 80012a4:	f000 f8be 	bl	8001424 <Error_Handler>
    	__HAL_RCC_I2C2_CLK_ENABLE();
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_I2C_MspInit+0xc4>)
 80012aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ac:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_I2C_MspInit+0xc4>)
 80012ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012b2:	6593      	str	r3, [r2, #88]	; 0x58
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_I2C_MspInit+0xc4>)
 80012b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	e010      	b.n	80012e4 <HAL_I2C_MspInit+0xb8>
    else if(hi2c->Instance == I2C3)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <HAL_I2C_MspInit+0xcc>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d10b      	bne.n	80012e4 <HAL_I2C_MspInit+0xb8>
    	__HAL_RCC_I2C3_CLK_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <HAL_I2C_MspInit+0xc4>)
 80012ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d0:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <HAL_I2C_MspInit+0xc4>)
 80012d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012d6:	6593      	str	r3, [r2, #88]	; 0x58
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_I2C_MspInit+0xc4>)
 80012da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
}
 80012e4:	bf00      	nop
 80012e6:	3770      	adds	r7, #112	; 0x70
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40005400 	.word	0x40005400
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40005800 	.word	0x40005800
 80012f8:	40005c00 	.word	0x40005c00

080012fc <HAL_ADC_MspInit>:
 * @arguments
 * @retvar
 */

void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <HAL_ADC_MspInit+0x44>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d111      	bne.n	8001332 <HAL_ADC_MspInit+0x36>
	{
		__HAL_RCC_ADC_CLK_ENABLE();
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <HAL_ADC_MspInit+0x48>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001312:	4a0c      	ldr	r2, [pc, #48]	; (8001344 <HAL_ADC_MspInit+0x48>)
 8001314:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_ADC_MspInit+0x48>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
#if	ADC_DMA_ENABLE == 1
		__HAL_LINKDMA(hadc,DMA_Handle,dma_cfg[0]);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a07      	ldr	r2, [pc, #28]	; (8001348 <HAL_ADC_MspInit+0x4c>)
 800132a:	64da      	str	r2, [r3, #76]	; 0x4c
 800132c:	4a06      	ldr	r2, [pc, #24]	; (8001348 <HAL_ADC_MspInit+0x4c>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6293      	str	r3, [r2, #40]	; 0x28
#endif
	}
}
 8001332:	bf00      	nop
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	50040000 	.word	0x50040000
 8001344:	40021000 	.word	0x40021000
 8001348:	20000214 	.word	0x20000214

0800134c <HAL_WWDG_MspInit>:
 * @arguments
 * @retvar
 */

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <HAL_WWDG_MspInit+0x38>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d10b      	bne.n	8001376 <HAL_WWDG_MspInit+0x2a>
  {
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <HAL_WWDG_MspInit+0x3c>)
 8001360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001362:	4a09      	ldr	r2, [pc, #36]	; (8001388 <HAL_WWDG_MspInit+0x3c>)
 8001364:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001368:	6593      	str	r3, [r2, #88]	; 0x58
 800136a:	4b07      	ldr	r3, [pc, #28]	; (8001388 <HAL_WWDG_MspInit+0x3c>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
  }

}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40002c00 	.word	0x40002c00
 8001388:	40021000 	.word	0x40021000

0800138c <SDTimer_Handler>:
 * @arguments
 * @retvar
 */

void SDTimer_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <SDTimer_Handler+0x40>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	b29b      	uxth	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <SDTimer_Handler+0x1c>
    Timer1--;
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <SDTimer_Handler+0x40>)
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <SDTimer_Handler+0x40>)
 80013a6:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <SDTimer_Handler+0x44>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d006      	beq.n	80013c0 <SDTimer_Handler+0x34>
    Timer2--;
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <SDTimer_Handler+0x44>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	3b01      	subs	r3, #1
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <SDTimer_Handler+0x44>)
 80013be:	801a      	strh	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000d4e 	.word	0x20000d4e
 80013d0:	20000d50 	.word	0x20000d50

080013d4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	FatFsCnt++;
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <SysTick_Handler+0x34>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	3301      	adds	r3, #1
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b09      	ldr	r3, [pc, #36]	; (8001408 <SysTick_Handler+0x34>)
 80013e4:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 80013e6:	4b08      	ldr	r3, [pc, #32]	; (8001408 <SysTick_Handler+0x34>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b09      	cmp	r3, #9
 80013ee:	d904      	bls.n	80013fa <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 80013f0:	4b05      	ldr	r3, [pc, #20]	; (8001408 <SysTick_Handler+0x34>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 80013f6:	f7ff ffc9 	bl	800138c <SDTimer_Handler>
	}

	HAL_IncTick();
 80013fa:	f000 f911 	bl	8001620 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80013fe:	f001 ffae 	bl	800335e <HAL_SYSTICK_IRQHandler>
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000d4c 	.word	0x20000d4c

0800140c <MemManage_Handler>:

void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
	while(1);
 8001410:	e7fe      	b.n	8001410 <MemManage_Handler+0x4>

08001412 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
	while(1);
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler+0x4>

08001418 <UsageFault_Handler>:
}

void UsageFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
	while(1);
 800141c:	e7fe      	b.n	800141c <UsageFault_Handler+0x4>

0800141e <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
	while(1);
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <Error_Handler>:
}

void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
	while(1);
 8001428:	e7fe      	b.n	8001428 <Error_Handler+0x4>
	...

0800142c <CAN1_RX0_IRQHandler>:
}

void CAN1_RX0_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&can_cfg);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <CAN1_RX0_IRQHandler+0x10>)
 8001432:	f001 fc22 	bl	8002c7a <HAL_CAN_IRQHandler>
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000012c 	.word	0x2000012c

08001440 <CAN1_TX_IRQHandler>:

void CAN1_TX_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	HAL_CAN_IRQHandler(&can_cfg);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <CAN1_TX_IRQHandler+0x10>)
 8001446:	f001 fc18 	bl	8002c7a <HAL_CAN_IRQHandler>
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000012c 	.word	0x2000012c

08001454 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	Uart_isr(&uart_cfg[0]);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <USART1_IRQHandler+0x10>)
 800145a:	f008 ff29 	bl	800a2b0 <Uart_isr>
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000914 	.word	0x20000914

08001468 <DMA1_Channel1_IRQHandler>:

void DMA1_Channel1_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&dma_cfg[0]);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <DMA1_Channel1_IRQHandler+0x10>)
 800146e:	f002 f83b 	bl	80034e8 <HAL_DMA_IRQHandler>
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000214 	.word	0x20000214

0800147c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	CONT_StateRequest(CONT_NORMAL);
 8001480:	2001      	movs	r0, #1
 8001482:	f008 fff5 	bl	800a470 <CONT_StateRequest>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	brk_Flag = 1;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <TIM7_IRQHandler+0x58>)
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
	if(sd_flag != 0)
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <TIM7_IRQHandler+0x5c>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <TIM7_IRQHandler+0x1e>
	{
		sd_rst++;
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <TIM7_IRQHandler+0x60>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <TIM7_IRQHandler+0x60>)
 80014a8:	701a      	strb	r2, [r3, #0]
	}
	if(uart_flag != 0)
 80014aa:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <TIM7_IRQHandler+0x64>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d005      	beq.n	80014be <TIM7_IRQHandler+0x32>
	{
		uart_rst++;
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <TIM7_IRQHandler+0x68>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	3301      	adds	r3, #1
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <TIM7_IRQHandler+0x68>)
 80014bc:	701a      	strb	r2, [r3, #0]
	}
	if(rst_count > 2 || sd_rst > 4 || uart_rst > 5)
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <TIM7_IRQHandler+0x6c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d807      	bhi.n	80014d6 <TIM7_IRQHandler+0x4a>
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <TIM7_IRQHandler+0x60>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d803      	bhi.n	80014d6 <TIM7_IRQHandler+0x4a>
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <TIM7_IRQHandler+0x68>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	d901      	bls.n	80014da <TIM7_IRQHandler+0x4e>
	{
		WWDG_Init();
 80014d6:	f006 fec1 	bl	800825c <WWDG_Init>
	}

	HAL_TIM_IRQHandler(&timer7_cfg);
 80014da:	4808      	ldr	r0, [pc, #32]	; (80014fc <TIM7_IRQHandler+0x70>)
 80014dc:	f004 fb60 	bl	8005ba0 <HAL_TIM_IRQHandler>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000d52 	.word	0x20000d52
 80014e8:	20000d55 	.word	0x20000d55
 80014ec:	20000d54 	.word	0x20000d54
 80014f0:	20000d57 	.word	0x20000d57
 80014f4:	20000d56 	.word	0x20000d56
 80014f8:	20000d53 	.word	0x20000d53
 80014fc:	200007f8 	.word	0x200007f8

08001500 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <SystemInit+0x20>)
 8001506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150a:	4a05      	ldr	r2, [pc, #20]	; (8001520 <SystemInit+0x20>)
 800150c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800155c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001528:	f7ff ffea 	bl	8001500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800152c:	480c      	ldr	r0, [pc, #48]	; (8001560 <LoopForever+0x6>)
  ldr r1, =_edata
 800152e:	490d      	ldr	r1, [pc, #52]	; (8001564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <LoopForever+0xe>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001544:	4c0a      	ldr	r4, [pc, #40]	; (8001570 <LoopForever+0x16>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001552:	f009 fe09 	bl	800b168 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001556:	f7ff fc51 	bl	8000dfc <main>

0800155a <LoopForever>:

LoopForever:
    b LoopForever
 800155a:	e7fe      	b.n	800155a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800155c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	20000d28 	.word	0x20000d28
  ldr r2, =_sidata
 8001568:	0800b664 	.word	0x0800b664
  ldr r2, =_sbss
 800156c:	20000d28 	.word	0x20000d28
  ldr r4, =_ebss
 8001570:	20001bdc 	.word	0x20001bdc

08001574 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC1_IRQHandler>

08001576 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b082      	sub	sp, #8
 800157a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800157c:	2300      	movs	r3, #0
 800157e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001580:	2003      	movs	r0, #3
 8001582:	f001 fe9d 	bl	80032c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001586:	200f      	movs	r0, #15
 8001588:	f000 f80e 	bl	80015a8 <HAL_InitTick>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	71fb      	strb	r3, [r7, #7]
 8001596:	e001      	b.n	800159c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001598:	f7ff fd06 	bl	8000fa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800159c:	79fb      	ldrb	r3, [r7, #7]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015b0:	2300      	movs	r3, #0
 80015b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <HAL_InitTick+0x6c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d023      	beq.n	8001604 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80015bc:	4b16      	ldr	r3, [pc, #88]	; (8001618 <HAL_InitTick+0x70>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <HAL_InitTick+0x6c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f001 feb7 	bl	8003346 <HAL_SYSTICK_Config>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d10f      	bne.n	80015fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b0f      	cmp	r3, #15
 80015e2:	d809      	bhi.n	80015f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e4:	2200      	movs	r2, #0
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ec:	f001 fe73 	bl	80032d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f0:	4a0a      	ldr	r2, [pc, #40]	; (800161c <HAL_InitTick+0x74>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e007      	b.n	8001608 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e004      	b.n	8001608 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	e001      	b.n	8001608 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000008 	.word	0x20000008
 8001618:	20000000 	.word	0x20000000
 800161c:	20000004 	.word	0x20000004

08001620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x20>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x24>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_IncTick+0x24>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008
 8001644:	20000d58 	.word	0x20000d58

08001648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_GetTick+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000d58 	.word	0x20000d58

08001660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff ffee 	bl	8001648 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d005      	beq.n	8001686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800167a:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_Delay+0x44>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001686:	bf00      	nop
 8001688:	f7ff ffde 	bl	8001648 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f7      	bhi.n	8001688 <HAL_Delay+0x28>
  {
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000008 	.word	0x20000008

080016a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	431a      	orrs	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	609a      	str	r2, [r3, #8]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	609a      	str	r2, [r3, #8]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
 800171c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	3360      	adds	r3, #96	; 0x60
 8001722:	461a      	mov	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	4413      	add	r3, r2
 800172a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <LL_ADC_SetOffset+0x44>)
 8001732:	4013      	ands	r3, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	4313      	orrs	r3, r2
 8001740:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001748:	bf00      	nop
 800174a:	371c      	adds	r7, #28
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	03fff000 	.word	0x03fff000

08001758 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3360      	adds	r3, #96	; 0x60
 8001766:	461a      	mov	r2, r3
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001784:	b480      	push	{r7}
 8001786:	b087      	sub	sp, #28
 8001788:	af00      	add	r7, sp, #0
 800178a:	60f8      	str	r0, [r7, #12]
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	3360      	adds	r3, #96	; 0x60
 8001794:	461a      	mov	r2, r3
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	431a      	orrs	r2, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80017ae:	bf00      	nop
 80017b0:	371c      	adds	r7, #28
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b087      	sub	sp, #28
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	3330      	adds	r3, #48	; 0x30
 80017ca:	461a      	mov	r2, r3
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	4413      	add	r3, r2
 80017d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	f003 031f 	and.w	r3, r3, #31
 80017e4:	211f      	movs	r1, #31
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	401a      	ands	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	0e9b      	lsrs	r3, r3, #26
 80017f2:	f003 011f 	and.w	r1, r3, #31
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	431a      	orrs	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001806:	bf00      	nop
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001812:	b480      	push	{r7}
 8001814:	b087      	sub	sp, #28
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	3314      	adds	r3, #20
 8001822:	461a      	mov	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	0e5b      	lsrs	r3, r3, #25
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	4413      	add	r3, r2
 8001830:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	0d1b      	lsrs	r3, r3, #20
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	2107      	movs	r1, #7
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	401a      	ands	r2, r3
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	0d1b      	lsrs	r3, r3, #20
 800184c:	f003 031f 	and.w	r3, r3, #31
 8001850:	6879      	ldr	r1, [r7, #4]
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	431a      	orrs	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800185c:	bf00      	nop
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001880:	43db      	mvns	r3, r3
 8001882:	401a      	ands	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0318 	and.w	r3, r3, #24
 800188a:	4908      	ldr	r1, [pc, #32]	; (80018ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800188c:	40d9      	lsrs	r1, r3
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	400b      	ands	r3, r1
 8001892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001896:	431a      	orrs	r2, r3
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800189e:	bf00      	nop
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	0007ffff 	.word	0x0007ffff

080018b0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6093      	str	r3, [r2, #8]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018e8:	d101      	bne.n	80018ee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800190c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001910:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001934:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001938:	d101      	bne.n	800193e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <LL_ADC_IsEnabled+0x18>
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <LL_ADC_IsEnabled+0x1a>
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	2b04      	cmp	r3, #4
 8001984:	d101      	bne.n	800198a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 0308 	and.w	r3, r3, #8
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d101      	bne.n	80019b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c8:	2300      	movs	r3, #0
 80019ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e12c      	b.n	8001c34 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff fc87 	bl	80012fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff67 	bl	80018d4 <LL_ADC_IsDeepPowerDownEnabled>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d004      	beq.n	8001a16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff4d 	bl	80018b0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff82 	bl	8001924 <LL_ADC_IsInternalRegulatorEnabled>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d115      	bne.n	8001a52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff66 	bl	80018fc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a30:	4b82      	ldr	r3, [pc, #520]	; (8001c3c <HAL_ADC_Init+0x27c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	099b      	lsrs	r3, r3, #6
 8001a36:	4a82      	ldr	r2, [pc, #520]	; (8001c40 <HAL_ADC_Init+0x280>)
 8001a38:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3c:	099b      	lsrs	r3, r3, #6
 8001a3e:	3301      	adds	r3, #1
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a44:	e002      	b.n	8001a4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f9      	bne.n	8001a46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ff64 	bl	8001924 <LL_ADC_IsInternalRegulatorEnabled>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10d      	bne.n	8001a7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a66:	f043 0210 	orr.w	r2, r3, #16
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	f043 0201 	orr.w	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff ff75 	bl	8001972 <LL_ADC_REG_IsConversionOngoing>
 8001a88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f040 80c5 	bne.w	8001c22 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 80c1 	bne.w	8001c22 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001aa8:	f043 0202 	orr.w	r2, r3, #2
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff49 	bl	800194c <LL_ADC_IsEnabled>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10b      	bne.n	8001ad8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ac0:	4860      	ldr	r0, [pc, #384]	; (8001c44 <HAL_ADC_Init+0x284>)
 8001ac2:	f7ff ff43 	bl	800194c <LL_ADC_IsEnabled>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d105      	bne.n	8001ad8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	485d      	ldr	r0, [pc, #372]	; (8001c48 <HAL_ADC_Init+0x288>)
 8001ad4:	f7ff fde8 	bl	80016a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7e5b      	ldrb	r3, [r3, #25]
 8001adc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ae2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ae8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001aee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001af6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d106      	bne.n	8001b14 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	045b      	lsls	r3, r3, #17
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d009      	beq.n	8001b30 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	4b45      	ldr	r3, [pc, #276]	; (8001c4c <HAL_ADC_Init+0x28c>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	69b9      	ldr	r1, [r7, #24]
 8001b40:	430b      	orrs	r3, r1
 8001b42:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff12 	bl	8001972 <LL_ADC_REG_IsConversionOngoing>
 8001b4e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff1f 	bl	8001998 <LL_ADC_INJ_IsConversionOngoing>
 8001b5a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d13d      	bne.n	8001bde <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d13a      	bne.n	8001bde <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b6c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b74:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b84:	f023 0302 	bic.w	r3, r3, #2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	69b9      	ldr	r1, [r7, #24]
 8001b8e:	430b      	orrs	r3, r1
 8001b90:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d118      	bne.n	8001bce <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ba6:	f023 0304 	bic.w	r3, r3, #4
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bb2:	4311      	orrs	r1, r2
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bb8:	4311      	orrs	r1, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	431a      	orrs	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	611a      	str	r2, [r3, #16]
 8001bcc:	e007      	b.n	8001bde <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0201 	bic.w	r2, r2, #1
 8001bdc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d10c      	bne.n	8001c00 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	f023 010f 	bic.w	r1, r3, #15
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	1e5a      	subs	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	631a      	str	r2, [r3, #48]	; 0x30
 8001bfe:	e007      	b.n	8001c10 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 020f 	bic.w	r2, r2, #15
 8001c0e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c14:	f023 0303 	bic.w	r3, r3, #3
 8001c18:	f043 0201 	orr.w	r2, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	655a      	str	r2, [r3, #84]	; 0x54
 8001c20:	e007      	b.n	8001c32 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c26:	f043 0210 	orr.w	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c32:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	053e2d63 	.word	0x053e2d63
 8001c44:	50040000 	.word	0x50040000
 8001c48:	50040300 	.word	0x50040300
 8001c4c:	fff0c007 	.word	0xfff0c007

08001c50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b0b6      	sub	sp, #216	; 0xd8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x22>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e3b9      	b.n	80023e6 <HAL_ADC_ConfigChannel+0x796>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fe77 	bl	8001972 <LL_ADC_REG_IsConversionOngoing>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f040 839e 	bne.w	80023c8 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b05      	cmp	r3, #5
 8001c92:	d824      	bhi.n	8001cde <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	3b02      	subs	r3, #2
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d81b      	bhi.n	8001cd6 <HAL_ADC_ConfigChannel+0x86>
 8001c9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ca4 <HAL_ADC_ConfigChannel+0x54>)
 8001ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca4:	08001cb5 	.word	0x08001cb5
 8001ca8:	08001cbd 	.word	0x08001cbd
 8001cac:	08001cc5 	.word	0x08001cc5
 8001cb0:	08001ccd 	.word	0x08001ccd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	605a      	str	r2, [r3, #4]
          break;
 8001cba:	e011      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2212      	movs	r2, #18
 8001cc0:	605a      	str	r2, [r3, #4]
          break;
 8001cc2:	e00d      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2218      	movs	r2, #24
 8001cc8:	605a      	str	r2, [r3, #4]
          break;
 8001cca:	e009      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd2:	605a      	str	r2, [r3, #4]
          break;
 8001cd4:	e004      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2206      	movs	r2, #6
 8001cda:	605a      	str	r2, [r3, #4]
          break;
 8001cdc:	e000      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001cde:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	6859      	ldr	r1, [r3, #4]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	f7ff fd64 	bl	80017ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fe3b 	bl	8001972 <LL_ADC_REG_IsConversionOngoing>
 8001cfc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fe47 	bl	8001998 <LL_ADC_INJ_IsConversionOngoing>
 8001d0a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f040 81a6 	bne.w	8002064 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f040 81a1 	bne.w	8002064 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	6819      	ldr	r1, [r3, #0]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f7ff fd6f 	bl	8001812 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	695a      	ldr	r2, [r3, #20]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	08db      	lsrs	r3, r3, #3
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d00a      	beq.n	8001d6c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6818      	ldr	r0, [r3, #0]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	6919      	ldr	r1, [r3, #16]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d66:	f7ff fcd3 	bl	8001710 <LL_ADC_SetOffset>
 8001d6a:	e17b      	b.n	8002064 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2100      	movs	r1, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fcf0 	bl	8001758 <LL_ADC_GetOffsetChannel>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10a      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x148>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fce5 	bl	8001758 <LL_ADC_GetOffsetChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	0e9b      	lsrs	r3, r3, #26
 8001d92:	f003 021f 	and.w	r2, r3, #31
 8001d96:	e01e      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x186>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fcda 	bl	8001758 <LL_ADC_GetOffsetChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001db6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001dba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001dbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001dc6:	2320      	movs	r3, #32
 8001dc8:	e004      	b.n	8001dd4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001dca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d105      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x19e>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	0e9b      	lsrs	r3, r3, #26
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	e018      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x1d0>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e06:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001e12:	2320      	movs	r3, #32
 8001e14:	e004      	b.n	8001e20 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001e16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e1a:	fab3 f383 	clz	r3, r3
 8001e1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d106      	bne.n	8001e32 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fca9 	bl	8001784 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2101      	movs	r1, #1
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fc8d 	bl	8001758 <LL_ADC_GetOffsetChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d10a      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x20e>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fc82 	bl	8001758 <LL_ADC_GetOffsetChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	0e9b      	lsrs	r3, r3, #26
 8001e58:	f003 021f 	and.w	r2, r3, #31
 8001e5c:	e01e      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x24c>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2101      	movs	r1, #1
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fc77 	bl	8001758 <LL_ADC_GetOffsetChannel>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e74:	fa93 f3a3 	rbit	r3, r3
 8001e78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001e7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001e84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	e004      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001e90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e94:	fab3 f383 	clz	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d105      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x264>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	0e9b      	lsrs	r3, r3, #26
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	e018      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x296>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001ec8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ecc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ed0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001ed8:	2320      	movs	r3, #32
 8001eda:	e004      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001edc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ee0:	fab3 f383 	clz	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d106      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fc46 	bl	8001784 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2102      	movs	r1, #2
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fc2a 	bl	8001758 <LL_ADC_GetOffsetChannel>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10a      	bne.n	8001f24 <HAL_ADC_ConfigChannel+0x2d4>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2102      	movs	r1, #2
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fc1f 	bl	8001758 <LL_ADC_GetOffsetChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	0e9b      	lsrs	r3, r3, #26
 8001f1e:	f003 021f 	and.w	r2, r3, #31
 8001f22:	e01e      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x312>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2102      	movs	r1, #2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fc14 	bl	8001758 <LL_ADC_GetOffsetChannel>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f3a:	fa93 f3a3 	rbit	r3, r3
 8001f3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001f52:	2320      	movs	r3, #32
 8001f54:	e004      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001f56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f5a:	fab3 f383 	clz	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d105      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x32a>
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	0e9b      	lsrs	r3, r3, #26
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	e016      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x358>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f86:	fa93 f3a3 	rbit	r3, r3
 8001f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001f8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001f92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	e004      	b.n	8001fa8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001f9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fa2:	fab3 f383 	clz	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d106      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fbe5 	bl	8001784 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2103      	movs	r1, #3
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fbc9 	bl	8001758 <LL_ADC_GetOffsetChannel>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10a      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x396>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2103      	movs	r1, #3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fbbe 	bl	8001758 <LL_ADC_GetOffsetChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	0e9b      	lsrs	r3, r3, #26
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	e017      	b.n	8002016 <HAL_ADC_ConfigChannel+0x3c6>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2103      	movs	r1, #3
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fbb3 	bl	8001758 <LL_ADC_GetOffsetChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001ffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002000:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002008:	2320      	movs	r3, #32
 800200a:	e003      	b.n	8002014 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800200c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201e:	2b00      	cmp	r3, #0
 8002020:	d105      	bne.n	800202e <HAL_ADC_ConfigChannel+0x3de>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	0e9b      	lsrs	r3, r3, #26
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	e011      	b.n	8002052 <HAL_ADC_ConfigChannel+0x402>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800203c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800203e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002046:	2320      	movs	r3, #32
 8002048:	e003      	b.n	8002052 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800204a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800204c:	fab3 f383 	clz	r3, r3
 8002050:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002052:	429a      	cmp	r2, r3
 8002054:	d106      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2200      	movs	r2, #0
 800205c:	2103      	movs	r1, #3
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff fb90 	bl	8001784 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fc6f 	bl	800194c <LL_ADC_IsEnabled>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	f040 813f 	bne.w	80022f4 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6819      	ldr	r1, [r3, #0]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	461a      	mov	r2, r3
 8002084:	f7ff fbf0 	bl	8001868 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	4a8e      	ldr	r2, [pc, #568]	; (80022c8 <HAL_ADC_ConfigChannel+0x678>)
 800208e:	4293      	cmp	r3, r2
 8002090:	f040 8130 	bne.w	80022f4 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d10b      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x46c>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	0e9b      	lsrs	r3, r3, #26
 80020aa:	3301      	adds	r3, #1
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	2b09      	cmp	r3, #9
 80020b2:	bf94      	ite	ls
 80020b4:	2301      	movls	r3, #1
 80020b6:	2300      	movhi	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	e019      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x4a0>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80020ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020cc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80020ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d101      	bne.n	80020d8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80020d4:	2320      	movs	r3, #32
 80020d6:	e003      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80020d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	3301      	adds	r3, #1
 80020e2:	f003 031f 	and.w	r3, r3, #31
 80020e6:	2b09      	cmp	r3, #9
 80020e8:	bf94      	ite	ls
 80020ea:	2301      	movls	r3, #1
 80020ec:	2300      	movhi	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d079      	beq.n	80021e8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d107      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x4c0>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	0e9b      	lsrs	r3, r3, #26
 8002106:	3301      	adds	r3, #1
 8002108:	069b      	lsls	r3, r3, #26
 800210a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800210e:	e015      	b.n	800213c <HAL_ADC_ConfigChannel+0x4ec>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800211e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002120:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002128:	2320      	movs	r3, #32
 800212a:	e003      	b.n	8002134 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800212c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	3301      	adds	r3, #1
 8002136:	069b      	lsls	r3, r3, #26
 8002138:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002144:	2b00      	cmp	r3, #0
 8002146:	d109      	bne.n	800215c <HAL_ADC_ConfigChannel+0x50c>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	0e9b      	lsrs	r3, r3, #26
 800214e:	3301      	adds	r3, #1
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	2101      	movs	r1, #1
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	e017      	b.n	800218c <HAL_ADC_ConfigChannel+0x53c>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002164:	fa93 f3a3 	rbit	r3, r3
 8002168:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800216a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800216c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800216e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002174:	2320      	movs	r3, #32
 8002176:	e003      	b.n	8002180 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800217a:	fab3 f383 	clz	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	3301      	adds	r3, #1
 8002182:	f003 031f 	and.w	r3, r3, #31
 8002186:	2101      	movs	r1, #1
 8002188:	fa01 f303 	lsl.w	r3, r1, r3
 800218c:	ea42 0103 	orr.w	r1, r2, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002198:	2b00      	cmp	r3, #0
 800219a:	d10a      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x562>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0e9b      	lsrs	r3, r3, #26
 80021a2:	3301      	adds	r3, #1
 80021a4:	f003 021f 	and.w	r2, r3, #31
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	051b      	lsls	r3, r3, #20
 80021b0:	e018      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x594>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80021c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80021c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80021ca:	2320      	movs	r3, #32
 80021cc:	e003      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80021ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	f003 021f 	and.w	r2, r3, #31
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021e4:	430b      	orrs	r3, r1
 80021e6:	e080      	b.n	80022ea <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d107      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x5b4>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0e9b      	lsrs	r3, r3, #26
 80021fa:	3301      	adds	r3, #1
 80021fc:	069b      	lsls	r3, r3, #26
 80021fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002202:	e015      	b.n	8002230 <HAL_ADC_ConfigChannel+0x5e0>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002214:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800221c:	2320      	movs	r3, #32
 800221e:	e003      	b.n	8002228 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	3301      	adds	r3, #1
 800222a:	069b      	lsls	r3, r3, #26
 800222c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002238:	2b00      	cmp	r3, #0
 800223a:	d109      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x600>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	0e9b      	lsrs	r3, r3, #26
 8002242:	3301      	adds	r3, #1
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	2101      	movs	r1, #1
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	e017      	b.n	8002280 <HAL_ADC_ConfigChannel+0x630>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	61fb      	str	r3, [r7, #28]
  return result;
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002268:	2320      	movs	r3, #32
 800226a:	e003      	b.n	8002274 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	3301      	adds	r3, #1
 8002276:	f003 031f 	and.w	r3, r3, #31
 800227a:	2101      	movs	r1, #1
 800227c:	fa01 f303 	lsl.w	r3, r1, r3
 8002280:	ea42 0103 	orr.w	r1, r2, r3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10d      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x65c>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	3301      	adds	r3, #1
 8002298:	f003 021f 	and.w	r2, r3, #31
 800229c:	4613      	mov	r3, r2
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4413      	add	r3, r2
 80022a2:	3b1e      	subs	r3, #30
 80022a4:	051b      	lsls	r3, r3, #20
 80022a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022aa:	e01d      	b.n	80022e8 <HAL_ADC_ConfigChannel+0x698>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	613b      	str	r3, [r7, #16]
  return result;
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d103      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e005      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x684>
 80022c8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	3301      	adds	r3, #1
 80022d6:	f003 021f 	and.w	r2, r3, #31
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	3b1e      	subs	r3, #30
 80022e2:	051b      	lsls	r3, r3, #20
 80022e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e8:	430b      	orrs	r3, r1
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	6892      	ldr	r2, [r2, #8]
 80022ee:	4619      	mov	r1, r3
 80022f0:	f7ff fa8f 	bl	8001812 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_ADC_ConfigChannel+0x7a0>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d06c      	beq.n	80023da <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002300:	483c      	ldr	r0, [pc, #240]	; (80023f4 <HAL_ADC_ConfigChannel+0x7a4>)
 8002302:	f7ff f9f7 	bl	80016f4 <LL_ADC_GetCommonPathInternalCh>
 8002306:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a3a      	ldr	r2, [pc, #232]	; (80023f8 <HAL_ADC_ConfigChannel+0x7a8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d127      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002314:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002318:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d121      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a35      	ldr	r2, [pc, #212]	; (80023fc <HAL_ADC_ConfigChannel+0x7ac>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d157      	bne.n	80023da <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800232a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800232e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002332:	4619      	mov	r1, r3
 8002334:	482f      	ldr	r0, [pc, #188]	; (80023f4 <HAL_ADC_ConfigChannel+0x7a4>)
 8002336:	f7ff f9ca 	bl	80016ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800233a:	4b31      	ldr	r3, [pc, #196]	; (8002400 <HAL_ADC_ConfigChannel+0x7b0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	099b      	lsrs	r3, r3, #6
 8002340:	4a30      	ldr	r2, [pc, #192]	; (8002404 <HAL_ADC_ConfigChannel+0x7b4>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	099b      	lsrs	r3, r3, #6
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002354:	e002      	b.n	800235c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	3b01      	subs	r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f9      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002362:	e03a      	b.n	80023da <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a27      	ldr	r2, [pc, #156]	; (8002408 <HAL_ADC_ConfigChannel+0x7b8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d113      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x746>
 800236e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10d      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a1f      	ldr	r2, [pc, #124]	; (80023fc <HAL_ADC_ConfigChannel+0x7ac>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d12a      	bne.n	80023da <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002384:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238c:	4619      	mov	r1, r3
 800238e:	4819      	ldr	r0, [pc, #100]	; (80023f4 <HAL_ADC_ConfigChannel+0x7a4>)
 8002390:	f7ff f99d 	bl	80016ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002394:	e021      	b.n	80023da <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a1c      	ldr	r2, [pc, #112]	; (800240c <HAL_ADC_ConfigChannel+0x7bc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d11c      	bne.n	80023da <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d116      	bne.n	80023da <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a12      	ldr	r2, [pc, #72]	; (80023fc <HAL_ADC_ConfigChannel+0x7ac>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d111      	bne.n	80023da <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023be:	4619      	mov	r1, r3
 80023c0:	480c      	ldr	r0, [pc, #48]	; (80023f4 <HAL_ADC_ConfigChannel+0x7a4>)
 80023c2:	f7ff f984 	bl	80016ce <LL_ADC_SetCommonPathInternalCh>
 80023c6:	e008      	b.n	80023da <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023cc:	f043 0220 	orr.w	r2, r3, #32
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80023e2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	37d8      	adds	r7, #216	; 0xd8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	80080000 	.word	0x80080000
 80023f4:	50040300 	.word	0x50040300
 80023f8:	c7520000 	.word	0xc7520000
 80023fc:	50040000 	.word	0x50040000
 8002400:	20000000 	.word	0x20000000
 8002404:	053e2d63 	.word	0x053e2d63
 8002408:	cb840000 	.word	0xcb840000
 800240c:	80000001 	.word	0x80000001

08002410 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e0ed      	b.n	80025fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe fedc 	bl	80011ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002444:	f7ff f900 	bl	8001648 <HAL_GetTick>
 8002448:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800244a:	e012      	b.n	8002472 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800244c:	f7ff f8fc 	bl	8001648 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b0a      	cmp	r3, #10
 8002458:	d90b      	bls.n	8002472 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2205      	movs	r2, #5
 800246a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e0c5      	b.n	80025fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0e5      	beq.n	800244c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0202 	bic.w	r2, r2, #2
 800248e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002490:	f7ff f8da 	bl	8001648 <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002496:	e012      	b.n	80024be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002498:	f7ff f8d6 	bl	8001648 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b0a      	cmp	r3, #10
 80024a4:	d90b      	bls.n	80024be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2205      	movs	r2, #5
 80024b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e09f      	b.n	80025fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1e5      	bne.n	8002498 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7e1b      	ldrb	r3, [r3, #24]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d108      	bne.n	80024e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	e007      	b.n	80024f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	7e5b      	ldrb	r3, [r3, #25]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d108      	bne.n	8002510 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	e007      	b.n	8002520 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800251e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	7e9b      	ldrb	r3, [r3, #26]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d108      	bne.n	800253a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0220 	orr.w	r2, r2, #32
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	e007      	b.n	800254a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0220 	bic.w	r2, r2, #32
 8002548:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	7edb      	ldrb	r3, [r3, #27]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d108      	bne.n	8002564 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0210 	bic.w	r2, r2, #16
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e007      	b.n	8002574 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0210 	orr.w	r2, r2, #16
 8002572:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	7f1b      	ldrb	r3, [r3, #28]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d108      	bne.n	800258e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0208 	orr.w	r2, r2, #8
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	e007      	b.n	800259e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0208 	bic.w	r2, r2, #8
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	7f5b      	ldrb	r3, [r3, #29]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d108      	bne.n	80025b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0204 	orr.w	r2, r2, #4
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e007      	b.n	80025c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f022 0204 	bic.w	r2, r2, #4
 80025c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	ea42 0103 	orr.w	r1, r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	1e5a      	subs	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002606:	b480      	push	{r7}
 8002608:	b087      	sub	sp, #28
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3020 	ldrb.w	r3, [r3, #32]
 800261c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800261e:	7cfb      	ldrb	r3, [r7, #19]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d003      	beq.n	800262c <HAL_CAN_ConfigFilter+0x26>
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	2b02      	cmp	r3, #2
 8002628:	f040 80aa 	bne.w	8002780 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	2201      	movs	r2, #1
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	43db      	mvns	r3, r3
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d123      	bne.n	80026ae <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	43db      	mvns	r3, r3
 8002670:	401a      	ands	r2, r3
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002688:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	3248      	adds	r2, #72	; 0x48
 800268e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026a4:	6979      	ldr	r1, [r7, #20]
 80026a6:	3348      	adds	r3, #72	; 0x48
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	440b      	add	r3, r1
 80026ac:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d122      	bne.n	80026fc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	431a      	orrs	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	3248      	adds	r2, #72	; 0x48
 80026dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026f2:	6979      	ldr	r1, [r7, #20]
 80026f4:	3348      	adds	r3, #72	; 0x48
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d109      	bne.n	8002718 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	43db      	mvns	r3, r3
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002716:	e007      	b.n	8002728 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	431a      	orrs	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d109      	bne.n	8002744 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	43db      	mvns	r3, r3
 800273a:	401a      	ands	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002742:	e007      	b.n	8002754 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	431a      	orrs	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d107      	bne.n	800276c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	431a      	orrs	r2, r3
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002772:	f023 0201 	bic.w	r2, r3, #1
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	e006      	b.n	800278e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b084      	sub	sp, #16
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d12e      	bne.n	800280c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2202      	movs	r2, #2
 80027b2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0201 	bic.w	r2, r2, #1
 80027c4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027c6:	f7fe ff3f 	bl	8001648 <HAL_GetTick>
 80027ca:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027cc:	e012      	b.n	80027f4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027ce:	f7fe ff3b 	bl	8001648 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b0a      	cmp	r3, #10
 80027da:	d90b      	bls.n	80027f4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2205      	movs	r2, #5
 80027ec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e012      	b.n	800281a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1e5      	bne.n	80027ce <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	e006      	b.n	800281a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
  }
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002822:	b480      	push	{r7}
 8002824:	b089      	sub	sp, #36	; 0x24
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002836:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002840:	7ffb      	ldrb	r3, [r7, #31]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d003      	beq.n	800284e <HAL_CAN_AddTxMessage+0x2c>
 8002846:	7ffb      	ldrb	r3, [r7, #31]
 8002848:	2b02      	cmp	r3, #2
 800284a:	f040 80ad 	bne.w	80029a8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10a      	bne.n	800286e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8095 	beq.w	8002998 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	0e1b      	lsrs	r3, r3, #24
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002878:	2201      	movs	r2, #1
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	409a      	lsls	r2, r3
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10d      	bne.n	80028a6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002894:	68f9      	ldr	r1, [r7, #12]
 8002896:	6809      	ldr	r1, [r1, #0]
 8002898:	431a      	orrs	r2, r3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3318      	adds	r3, #24
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	440b      	add	r3, r1
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	e00f      	b.n	80028c6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028b0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028b6:	68f9      	ldr	r1, [r7, #12]
 80028b8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80028ba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	3318      	adds	r3, #24
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	440b      	add	r3, r1
 80028c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6819      	ldr	r1, [r3, #0]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	3318      	adds	r3, #24
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	440b      	add	r3, r1
 80028d6:	3304      	adds	r3, #4
 80028d8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	7d1b      	ldrb	r3, [r3, #20]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d111      	bne.n	8002906 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3318      	adds	r3, #24
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	4413      	add	r3, r2
 80028ee:	3304      	adds	r3, #4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	6811      	ldr	r1, [r2, #0]
 80028f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	3318      	adds	r3, #24
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	440b      	add	r3, r1
 8002902:	3304      	adds	r3, #4
 8002904:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3307      	adds	r3, #7
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	061a      	lsls	r2, r3, #24
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3306      	adds	r3, #6
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	041b      	lsls	r3, r3, #16
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3305      	adds	r3, #5
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	021b      	lsls	r3, r3, #8
 8002920:	4313      	orrs	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	3204      	adds	r2, #4
 8002926:	7812      	ldrb	r2, [r2, #0]
 8002928:	4610      	mov	r0, r2
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	6811      	ldr	r1, [r2, #0]
 800292e:	ea43 0200 	orr.w	r2, r3, r0
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	440b      	add	r3, r1
 8002938:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800293c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3303      	adds	r3, #3
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	061a      	lsls	r2, r3, #24
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3302      	adds	r3, #2
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	041b      	lsls	r3, r3, #16
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3301      	adds	r3, #1
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	4313      	orrs	r3, r2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	7812      	ldrb	r2, [r2, #0]
 800295e:	4610      	mov	r0, r2
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	6811      	ldr	r1, [r2, #0]
 8002964:	ea43 0200 	orr.w	r2, r3, r0
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	440b      	add	r3, r1
 800296e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002972:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3318      	adds	r3, #24
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	4413      	add	r3, r2
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	6811      	ldr	r1, [r2, #0]
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	3318      	adds	r3, #24
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	440b      	add	r3, r1
 8002992:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	e00e      	b.n	80029b6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e006      	b.n	80029b6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
  }
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3724      	adds	r7, #36	; 0x24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b085      	sub	sp, #20
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80029d8:	7afb      	ldrb	r3, [r7, #11]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d002      	beq.n	80029e4 <HAL_CAN_IsTxMessagePending+0x22>
 80029de:	7afb      	ldrb	r3, [r7, #11]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d10b      	bne.n	80029fc <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	069b      	lsls	r3, r3, #26
 80029ee:	401a      	ands	r2, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	069b      	lsls	r3, r3, #26
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80029f8:	2301      	movs	r3, #1
 80029fa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80029fc:	68fb      	ldr	r3, [r7, #12]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b087      	sub	sp, #28
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a1e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a20:	7dfb      	ldrb	r3, [r7, #23]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d003      	beq.n	8002a2e <HAL_CAN_GetRxMessage+0x24>
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	f040 80f3 	bne.w	8002c14 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10e      	bne.n	8002a52 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d116      	bne.n	8002a70 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0e7      	b.n	8002c22 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0d8      	b.n	8002c22 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	331b      	adds	r3, #27
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	4413      	add	r3, r2
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0204 	and.w	r2, r3, #4
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	331b      	adds	r3, #27
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	4413      	add	r3, r2
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	0d5b      	lsrs	r3, r3, #21
 8002a9e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	e00b      	b.n	8002ac0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	331b      	adds	r3, #27
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	4413      	add	r3, r2
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	08db      	lsrs	r3, r3, #3
 8002ab8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	331b      	adds	r3, #27
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	4413      	add	r3, r2
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0202 	and.w	r2, r3, #2
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	331b      	adds	r3, #27
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	4413      	add	r3, r2
 8002ae2:	3304      	adds	r3, #4
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 020f 	and.w	r2, r3, #15
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	331b      	adds	r3, #27
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	4413      	add	r3, r2
 8002afa:	3304      	adds	r3, #4
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	331b      	adds	r3, #27
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	4413      	add	r3, r2
 8002b12:	3304      	adds	r3, #4
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	0c1b      	lsrs	r3, r3, #16
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0a1a      	lsrs	r2, r3, #8
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	0c1a      	lsrs	r2, r3, #16
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	3302      	adds	r3, #2
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	4413      	add	r3, r2
 8002b72:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	0e1a      	lsrs	r2, r3, #24
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	3303      	adds	r3, #3
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	3304      	adds	r3, #4
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	0a1a      	lsrs	r2, r3, #8
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	3305      	adds	r3, #5
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0c1a      	lsrs	r2, r3, #16
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	3306      	adds	r3, #6
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	0e1a      	lsrs	r2, r3, #24
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	3307      	adds	r3, #7
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d108      	bne.n	8002c00 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0220 	orr.w	r2, r2, #32
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	e007      	b.n	8002c10 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691a      	ldr	r2, [r3, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0220 	orr.w	r2, r2, #32
 8002c0e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002c10:	2300      	movs	r3, #0
 8002c12:	e006      	b.n	8002c22 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
  }
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b085      	sub	sp, #20
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c3e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d002      	beq.n	8002c4c <HAL_CAN_ActivateNotification+0x1e>
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d109      	bne.n	8002c60 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6959      	ldr	r1, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	e006      	b.n	8002c6e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
  }
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b08a      	sub	sp, #40	; 0x28
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d07c      	beq.n	8002dba <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d023      	beq.n	8002d12 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f983 	bl	8002fe8 <HAL_CAN_TxMailbox0CompleteCallback>
 8002ce2:	e016      	b.n	8002d12 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d004      	beq.n	8002cf8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf6:	e00c      	b.n	8002d12 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d004      	beq.n	8002d0c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0a:	e002      	b.n	8002d12 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f989 	bl	8003024 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d024      	beq.n	8002d66 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f963 	bl	8002ffc <HAL_CAN_TxMailbox1CompleteCallback>
 8002d36:	e016      	b.n	8002d66 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d004      	beq.n	8002d4c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4a:	e00c      	b.n	8002d66 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d004      	beq.n	8002d60 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5e:	e002      	b.n	8002d66 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f969 	bl	8003038 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d024      	beq.n	8002dba <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f943 	bl	8003010 <HAL_CAN_TxMailbox2CompleteCallback>
 8002d8a:	e016      	b.n	8002dba <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d004      	beq.n	8002da0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9e:	e00c      	b.n	8002dba <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
 8002db2:	e002      	b.n	8002dba <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f949 	bl	800304c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00c      	beq.n	8002dde <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d007      	beq.n	8002dde <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2210      	movs	r2, #16
 8002ddc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00b      	beq.n	8002e00 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2208      	movs	r2, #8
 8002df8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f930 	bl	8003060 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f005 fbff 	bl	800861c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00c      	beq.n	8002e42 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2210      	movs	r2, #16
 8002e40:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00b      	beq.n	8002e64 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d006      	beq.n	8002e64 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f912 	bl	8003088 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d009      	beq.n	8002e82 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d002      	beq.n	8002e82 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f8f9 	bl	8003074 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d006      	beq.n	8002ea4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2210      	movs	r2, #16
 8002e9c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f8fc 	bl	800309c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d006      	beq.n	8002ec6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f8f5 	bl	80030b0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d07b      	beq.n	8002fc8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d072      	beq.n	8002fc0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002eda:	6a3b      	ldr	r3, [r7, #32]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	f043 0302 	orr.w	r3, r3, #2
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d043      	beq.n	8002fc0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d03e      	beq.n	8002fc0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f48:	2b60      	cmp	r3, #96	; 0x60
 8002f4a:	d02b      	beq.n	8002fa4 <HAL_CAN_IRQHandler+0x32a>
 8002f4c:	2b60      	cmp	r3, #96	; 0x60
 8002f4e:	d82e      	bhi.n	8002fae <HAL_CAN_IRQHandler+0x334>
 8002f50:	2b50      	cmp	r3, #80	; 0x50
 8002f52:	d022      	beq.n	8002f9a <HAL_CAN_IRQHandler+0x320>
 8002f54:	2b50      	cmp	r3, #80	; 0x50
 8002f56:	d82a      	bhi.n	8002fae <HAL_CAN_IRQHandler+0x334>
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	d019      	beq.n	8002f90 <HAL_CAN_IRQHandler+0x316>
 8002f5c:	2b40      	cmp	r3, #64	; 0x40
 8002f5e:	d826      	bhi.n	8002fae <HAL_CAN_IRQHandler+0x334>
 8002f60:	2b30      	cmp	r3, #48	; 0x30
 8002f62:	d010      	beq.n	8002f86 <HAL_CAN_IRQHandler+0x30c>
 8002f64:	2b30      	cmp	r3, #48	; 0x30
 8002f66:	d822      	bhi.n	8002fae <HAL_CAN_IRQHandler+0x334>
 8002f68:	2b10      	cmp	r3, #16
 8002f6a:	d002      	beq.n	8002f72 <HAL_CAN_IRQHandler+0x2f8>
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d005      	beq.n	8002f7c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002f70:	e01d      	b.n	8002fae <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	f043 0308 	orr.w	r3, r3, #8
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f7a:	e019      	b.n	8002fb0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	f043 0310 	orr.w	r3, r3, #16
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f84:	e014      	b.n	8002fb0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	f043 0320 	orr.w	r3, r3, #32
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f8e:	e00f      	b.n	8002fb0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f98:	e00a      	b.n	8002fb0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fa2:	e005      	b.n	8002fb0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fac:	e000      	b.n	8002fb0 <HAL_CAN_IRQHandler+0x336>
            break;
 8002fae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002fbe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d008      	beq.n	8002fe0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f872 	bl	80030c4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	3728      	adds	r7, #40	; 0x28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <__NVIC_SetPriorityGrouping+0x44>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030f4:	4013      	ands	r3, r2
 80030f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800310a:	4a04      	ldr	r2, [pc, #16]	; (800311c <__NVIC_SetPriorityGrouping+0x44>)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	60d3      	str	r3, [r2, #12]
}
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <__NVIC_GetPriorityGrouping+0x18>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	0a1b      	lsrs	r3, r3, #8
 800312a:	f003 0307 	and.w	r3, r3, #7
}
 800312e:	4618      	mov	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314a:	2b00      	cmp	r3, #0
 800314c:	db0b      	blt.n	8003166 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	f003 021f 	and.w	r2, r3, #31
 8003154:	4907      	ldr	r1, [pc, #28]	; (8003174 <__NVIC_EnableIRQ+0x38>)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2001      	movs	r0, #1
 800315e:	fa00 f202 	lsl.w	r2, r0, r2
 8003162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	e000e100 	.word	0xe000e100

08003178 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	2b00      	cmp	r3, #0
 8003188:	db12      	blt.n	80031b0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	f003 021f 	and.w	r2, r3, #31
 8003190:	490a      	ldr	r1, [pc, #40]	; (80031bc <__NVIC_DisableIRQ+0x44>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2001      	movs	r0, #1
 800319a:	fa00 f202 	lsl.w	r2, r0, r2
 800319e:	3320      	adds	r3, #32
 80031a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80031a4:	f3bf 8f4f 	dsb	sy
}
 80031a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031aa:	f3bf 8f6f 	isb	sy
}
 80031ae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000e100 	.word	0xe000e100

080031c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	4603      	mov	r3, r0
 80031c8:	6039      	str	r1, [r7, #0]
 80031ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	db0a      	blt.n	80031ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	490c      	ldr	r1, [pc, #48]	; (800320c <__NVIC_SetPriority+0x4c>)
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	0112      	lsls	r2, r2, #4
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	440b      	add	r3, r1
 80031e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e8:	e00a      	b.n	8003200 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	4908      	ldr	r1, [pc, #32]	; (8003210 <__NVIC_SetPriority+0x50>)
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	3b04      	subs	r3, #4
 80031f8:	0112      	lsls	r2, r2, #4
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	440b      	add	r3, r1
 80031fe:	761a      	strb	r2, [r3, #24]
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000e100 	.word	0xe000e100
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003214:	b480      	push	{r7}
 8003216:	b089      	sub	sp, #36	; 0x24
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	f1c3 0307 	rsb	r3, r3, #7
 800322e:	2b04      	cmp	r3, #4
 8003230:	bf28      	it	cs
 8003232:	2304      	movcs	r3, #4
 8003234:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	3304      	adds	r3, #4
 800323a:	2b06      	cmp	r3, #6
 800323c:	d902      	bls.n	8003244 <NVIC_EncodePriority+0x30>
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	3b03      	subs	r3, #3
 8003242:	e000      	b.n	8003246 <NVIC_EncodePriority+0x32>
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003248:	f04f 32ff 	mov.w	r2, #4294967295
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43da      	mvns	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	401a      	ands	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800325c:	f04f 31ff 	mov.w	r1, #4294967295
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	fa01 f303 	lsl.w	r3, r1, r3
 8003266:	43d9      	mvns	r1, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800326c:	4313      	orrs	r3, r2
         );
}
 800326e:	4618      	mov	r0, r3
 8003270:	3724      	adds	r7, #36	; 0x24
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
	...

0800327c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3b01      	subs	r3, #1
 8003288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800328c:	d301      	bcc.n	8003292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800328e:	2301      	movs	r3, #1
 8003290:	e00f      	b.n	80032b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003292:	4a0a      	ldr	r2, [pc, #40]	; (80032bc <SysTick_Config+0x40>)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3b01      	subs	r3, #1
 8003298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800329a:	210f      	movs	r1, #15
 800329c:	f04f 30ff 	mov.w	r0, #4294967295
 80032a0:	f7ff ff8e 	bl	80031c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032a4:	4b05      	ldr	r3, [pc, #20]	; (80032bc <SysTick_Config+0x40>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032aa:	4b04      	ldr	r3, [pc, #16]	; (80032bc <SysTick_Config+0x40>)
 80032ac:	2207      	movs	r2, #7
 80032ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	e000e010 	.word	0xe000e010

080032c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff ff05 	bl	80030d8 <__NVIC_SetPriorityGrouping>
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b086      	sub	sp, #24
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4603      	mov	r3, r0
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
 80032e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032e8:	f7ff ff1a 	bl	8003120 <__NVIC_GetPriorityGrouping>
 80032ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	6978      	ldr	r0, [r7, #20]
 80032f4:	f7ff ff8e 	bl	8003214 <NVIC_EncodePriority>
 80032f8:	4602      	mov	r2, r0
 80032fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032fe:	4611      	mov	r1, r2
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff ff5d 	bl	80031c0 <__NVIC_SetPriority>
}
 8003306:	bf00      	nop
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	4603      	mov	r3, r0
 8003316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff ff0d 	bl	800313c <__NVIC_EnableIRQ>
}
 8003322:	bf00      	nop
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	4603      	mov	r3, r0
 8003332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff ff1d 	bl	8003178 <__NVIC_DisableIRQ>
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ff94 	bl	800327c <SysTick_Config>
 8003354:	4603      	mov	r3, r0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003362:	f000 f802 	bl	800336a <HAL_SYSTICK_Callback>
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800336a:	b480      	push	{r7}
 800336c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e098      	b.n	80034bc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	4b4d      	ldr	r3, [pc, #308]	; (80034c8 <HAL_DMA_Init+0x150>)
 8003392:	429a      	cmp	r2, r3
 8003394:	d80f      	bhi.n	80033b6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	461a      	mov	r2, r3
 800339c:	4b4b      	ldr	r3, [pc, #300]	; (80034cc <HAL_DMA_Init+0x154>)
 800339e:	4413      	add	r3, r2
 80033a0:	4a4b      	ldr	r2, [pc, #300]	; (80034d0 <HAL_DMA_Init+0x158>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	091b      	lsrs	r3, r3, #4
 80033a8:	009a      	lsls	r2, r3, #2
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a48      	ldr	r2, [pc, #288]	; (80034d4 <HAL_DMA_Init+0x15c>)
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40
 80033b4:	e00e      	b.n	80033d4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	4b46      	ldr	r3, [pc, #280]	; (80034d8 <HAL_DMA_Init+0x160>)
 80033be:	4413      	add	r3, r2
 80033c0:	4a43      	ldr	r2, [pc, #268]	; (80034d0 <HAL_DMA_Init+0x158>)
 80033c2:	fba2 2303 	umull	r2, r3, r2, r3
 80033c6:	091b      	lsrs	r3, r3, #4
 80033c8:	009a      	lsls	r2, r3, #2
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a42      	ldr	r2, [pc, #264]	; (80034dc <HAL_DMA_Init+0x164>)
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80033f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003404:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003410:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800342e:	d039      	beq.n	80034a4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	4a27      	ldr	r2, [pc, #156]	; (80034d4 <HAL_DMA_Init+0x15c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d11a      	bne.n	8003470 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800343a:	4b29      	ldr	r3, [pc, #164]	; (80034e0 <HAL_DMA_Init+0x168>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	f003 031c 	and.w	r3, r3, #28
 8003446:	210f      	movs	r1, #15
 8003448:	fa01 f303 	lsl.w	r3, r1, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	4924      	ldr	r1, [pc, #144]	; (80034e0 <HAL_DMA_Init+0x168>)
 8003450:	4013      	ands	r3, r2
 8003452:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003454:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <HAL_DMA_Init+0x168>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6859      	ldr	r1, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003460:	f003 031c 	and.w	r3, r3, #28
 8003464:	fa01 f303 	lsl.w	r3, r1, r3
 8003468:	491d      	ldr	r1, [pc, #116]	; (80034e0 <HAL_DMA_Init+0x168>)
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
 800346e:	e019      	b.n	80034a4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003470:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <HAL_DMA_Init+0x16c>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003478:	f003 031c 	and.w	r3, r3, #28
 800347c:	210f      	movs	r1, #15
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	4917      	ldr	r1, [pc, #92]	; (80034e4 <HAL_DMA_Init+0x16c>)
 8003486:	4013      	ands	r3, r2
 8003488:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800348a:	4b16      	ldr	r3, [pc, #88]	; (80034e4 <HAL_DMA_Init+0x16c>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6859      	ldr	r1, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003496:	f003 031c 	and.w	r3, r3, #28
 800349a:	fa01 f303 	lsl.w	r3, r1, r3
 800349e:	4911      	ldr	r1, [pc, #68]	; (80034e4 <HAL_DMA_Init+0x16c>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	40020407 	.word	0x40020407
 80034cc:	bffdfff8 	.word	0xbffdfff8
 80034d0:	cccccccd 	.word	0xcccccccd
 80034d4:	40020000 	.word	0x40020000
 80034d8:	bffdfbf8 	.word	0xbffdfbf8
 80034dc:	40020400 	.word	0x40020400
 80034e0:	400200a8 	.word	0x400200a8
 80034e4:	400204a8 	.word	0x400204a8

080034e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	f003 031c 	and.w	r3, r3, #28
 8003508:	2204      	movs	r2, #4
 800350a:	409a      	lsls	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d026      	beq.n	8003562 <HAL_DMA_IRQHandler+0x7a>
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0304 	and.w	r3, r3, #4
 800351a:	2b00      	cmp	r3, #0
 800351c:	d021      	beq.n	8003562 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d107      	bne.n	800353c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0204 	bic.w	r2, r2, #4
 800353a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003540:	f003 021c 	and.w	r2, r3, #28
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	2104      	movs	r1, #4
 800354a:	fa01 f202 	lsl.w	r2, r1, r2
 800354e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	2b00      	cmp	r3, #0
 8003556:	d071      	beq.n	800363c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003560:	e06c      	b.n	800363c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f003 031c 	and.w	r3, r3, #28
 800356a:	2202      	movs	r2, #2
 800356c:	409a      	lsls	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4013      	ands	r3, r2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d02e      	beq.n	80035d4 <HAL_DMA_IRQHandler+0xec>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d029      	beq.n	80035d4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10b      	bne.n	80035a6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 020a 	bic.w	r2, r2, #10
 800359c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	f003 021c 	and.w	r2, r3, #28
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	2102      	movs	r1, #2
 80035b4:	fa01 f202 	lsl.w	r2, r1, r2
 80035b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d038      	beq.n	800363c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80035d2:	e033      	b.n	800363c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d8:	f003 031c 	and.w	r3, r3, #28
 80035dc:	2208      	movs	r2, #8
 80035de:	409a      	lsls	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d02a      	beq.n	800363e <HAL_DMA_IRQHandler+0x156>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d025      	beq.n	800363e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 020e 	bic.w	r2, r2, #14
 8003600:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	f003 021c 	and.w	r2, r3, #28
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	2101      	movs	r1, #1
 8003610:	fa01 f202 	lsl.w	r2, r1, r2
 8003614:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003630:	2b00      	cmp	r3, #0
 8003632:	d004      	beq.n	800363e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800363c:	bf00      	nop
 800363e:	bf00      	nop
}
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003656:	e154      	b.n	8003902 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	2101      	movs	r1, #1
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	fa01 f303 	lsl.w	r3, r1, r3
 8003664:	4013      	ands	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 8146 	beq.w	80038fc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d005      	beq.n	8003688 <HAL_GPIO_Init+0x40>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d130      	bne.n	80036ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	2203      	movs	r2, #3
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4013      	ands	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036be:	2201      	movs	r2, #1
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4013      	ands	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	f003 0201 	and.w	r2, r3, #1
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d017      	beq.n	8003726 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	2203      	movs	r2, #3
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43db      	mvns	r3, r3
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4013      	ands	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d123      	bne.n	800377a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	08da      	lsrs	r2, r3, #3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	3208      	adds	r2, #8
 800373a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800373e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f003 0307 	and.w	r3, r3, #7
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	220f      	movs	r2, #15
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4013      	ands	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	691a      	ldr	r2, [r3, #16]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	08da      	lsrs	r2, r3, #3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3208      	adds	r2, #8
 8003774:	6939      	ldr	r1, [r7, #16]
 8003776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	2203      	movs	r2, #3
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4013      	ands	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 0203 	and.w	r2, r3, #3
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 80a0 	beq.w	80038fc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037bc:	4b58      	ldr	r3, [pc, #352]	; (8003920 <HAL_GPIO_Init+0x2d8>)
 80037be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c0:	4a57      	ldr	r2, [pc, #348]	; (8003920 <HAL_GPIO_Init+0x2d8>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6613      	str	r3, [r2, #96]	; 0x60
 80037c8:	4b55      	ldr	r3, [pc, #340]	; (8003920 <HAL_GPIO_Init+0x2d8>)
 80037ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037d4:	4a53      	ldr	r2, [pc, #332]	; (8003924 <HAL_GPIO_Init+0x2dc>)
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	089b      	lsrs	r3, r3, #2
 80037da:	3302      	adds	r3, #2
 80037dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f003 0303 	and.w	r3, r3, #3
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	220f      	movs	r2, #15
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4013      	ands	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037fe:	d019      	beq.n	8003834 <HAL_GPIO_Init+0x1ec>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a49      	ldr	r2, [pc, #292]	; (8003928 <HAL_GPIO_Init+0x2e0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d013      	beq.n	8003830 <HAL_GPIO_Init+0x1e8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a48      	ldr	r2, [pc, #288]	; (800392c <HAL_GPIO_Init+0x2e4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d00d      	beq.n	800382c <HAL_GPIO_Init+0x1e4>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a47      	ldr	r2, [pc, #284]	; (8003930 <HAL_GPIO_Init+0x2e8>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d007      	beq.n	8003828 <HAL_GPIO_Init+0x1e0>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a46      	ldr	r2, [pc, #280]	; (8003934 <HAL_GPIO_Init+0x2ec>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d101      	bne.n	8003824 <HAL_GPIO_Init+0x1dc>
 8003820:	2304      	movs	r3, #4
 8003822:	e008      	b.n	8003836 <HAL_GPIO_Init+0x1ee>
 8003824:	2307      	movs	r3, #7
 8003826:	e006      	b.n	8003836 <HAL_GPIO_Init+0x1ee>
 8003828:	2303      	movs	r3, #3
 800382a:	e004      	b.n	8003836 <HAL_GPIO_Init+0x1ee>
 800382c:	2302      	movs	r3, #2
 800382e:	e002      	b.n	8003836 <HAL_GPIO_Init+0x1ee>
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <HAL_GPIO_Init+0x1ee>
 8003834:	2300      	movs	r3, #0
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	f002 0203 	and.w	r2, r2, #3
 800383c:	0092      	lsls	r2, r2, #2
 800383e:	4093      	lsls	r3, r2
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003846:	4937      	ldr	r1, [pc, #220]	; (8003924 <HAL_GPIO_Init+0x2dc>)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	089b      	lsrs	r3, r3, #2
 800384c:	3302      	adds	r3, #2
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003854:	4b38      	ldr	r3, [pc, #224]	; (8003938 <HAL_GPIO_Init+0x2f0>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	43db      	mvns	r3, r3
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4013      	ands	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003878:	4a2f      	ldr	r2, [pc, #188]	; (8003938 <HAL_GPIO_Init+0x2f0>)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800387e:	4b2e      	ldr	r3, [pc, #184]	; (8003938 <HAL_GPIO_Init+0x2f0>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	43db      	mvns	r3, r3
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4013      	ands	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038a2:	4a25      	ldr	r2, [pc, #148]	; (8003938 <HAL_GPIO_Init+0x2f0>)
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038a8:	4b23      	ldr	r3, [pc, #140]	; (8003938 <HAL_GPIO_Init+0x2f0>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	43db      	mvns	r3, r3
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038cc:	4a1a      	ldr	r2, [pc, #104]	; (8003938 <HAL_GPIO_Init+0x2f0>)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038d2:	4b19      	ldr	r3, [pc, #100]	; (8003938 <HAL_GPIO_Init+0x2f0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	43db      	mvns	r3, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4013      	ands	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038f6:	4a10      	ldr	r2, [pc, #64]	; (8003938 <HAL_GPIO_Init+0x2f0>)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	3301      	adds	r3, #1
 8003900:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	f47f aea3 	bne.w	8003658 <HAL_GPIO_Init+0x10>
  }
}
 8003912:	bf00      	nop
 8003914:	bf00      	nop
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	40021000 	.word	0x40021000
 8003924:	40010000 	.word	0x40010000
 8003928:	48000400 	.word	0x48000400
 800392c:	48000800 	.word	0x48000800
 8003930:	48000c00 	.word	0x48000c00
 8003934:	48001000 	.word	0x48001000
 8003938:	40010400 	.word	0x40010400

0800393c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	807b      	strh	r3, [r7, #2]
 8003948:	4613      	mov	r3, r2
 800394a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800394c:	787b      	ldrb	r3, [r7, #1]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003952:	887a      	ldrh	r2, [r7, #2]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003958:	e002      	b.n	8003960 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800395a:	887a      	ldrh	r2, [r7, #2]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800397e:	887a      	ldrh	r2, [r7, #2]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4013      	ands	r3, r2
 8003984:	041a      	lsls	r2, r3, #16
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	43d9      	mvns	r1, r3
 800398a:	887b      	ldrh	r3, [r7, #2]
 800398c:	400b      	ands	r3, r1
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	619a      	str	r2, [r3, #24]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e081      	b.n	8003ab6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fd fc30 	bl	800122c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2224      	movs	r2, #36	; 0x24
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685a      	ldr	r2, [r3, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d107      	bne.n	8003a1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689a      	ldr	r2, [r3, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	e006      	b.n	8003a28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689a      	ldr	r2, [r3, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d104      	bne.n	8003a3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69d9      	ldr	r1, [r3, #28]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1a      	ldr	r2, [r3, #32]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	4608      	mov	r0, r1
 8003aca:	4611      	mov	r1, r2
 8003acc:	461a      	mov	r2, r3
 8003ace:	4603      	mov	r3, r0
 8003ad0:	817b      	strh	r3, [r7, #10]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	813b      	strh	r3, [r7, #8]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b20      	cmp	r3, #32
 8003ae4:	f040 80fd 	bne.w	8003ce2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_I2C_Mem_Read+0x34>
 8003aee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d105      	bne.n	8003b00 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003afa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0f1      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <HAL_I2C_Mem_Read+0x4e>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e0ea      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x224>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b16:	f7fd fd97 	bl	8001648 <HAL_GetTick>
 8003b1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	2319      	movs	r3, #25
 8003b22:	2201      	movs	r2, #1
 8003b24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 f95b 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0d5      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2222      	movs	r2, #34	; 0x22
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2240      	movs	r2, #64	; 0x40
 8003b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a3a      	ldr	r2, [r7, #32]
 8003b52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b60:	88f8      	ldrh	r0, [r7, #6]
 8003b62:	893a      	ldrh	r2, [r7, #8]
 8003b64:	8979      	ldrh	r1, [r7, #10]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	4603      	mov	r3, r0
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f8bf 	bl	8003cf4 <I2C_RequestMemoryRead>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0ad      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2bff      	cmp	r3, #255	; 0xff
 8003b90:	d90e      	bls.n	8003bb0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	22ff      	movs	r2, #255	; 0xff
 8003b96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	8979      	ldrh	r1, [r7, #10]
 8003ba0:	4b52      	ldr	r3, [pc, #328]	; (8003cec <HAL_I2C_Mem_Read+0x22c>)
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 fac3 	bl	8004134 <I2C_TransferConfig>
 8003bae:	e00f      	b.n	8003bd0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	8979      	ldrh	r1, [r7, #10]
 8003bc2:	4b4a      	ldr	r3, [pc, #296]	; (8003cec <HAL_I2C_Mem_Read+0x22c>)
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fab2 	bl	8004134 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2104      	movs	r1, #4
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 f902 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e07c      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d034      	beq.n	8003c90 <HAL_I2C_Mem_Read+0x1d0>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d130      	bne.n	8003c90 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c34:	2200      	movs	r2, #0
 8003c36:	2180      	movs	r1, #128	; 0x80
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f8d3 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e04d      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2bff      	cmp	r3, #255	; 0xff
 8003c50:	d90e      	bls.n	8003c70 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	22ff      	movs	r2, #255	; 0xff
 8003c56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	8979      	ldrh	r1, [r7, #10]
 8003c60:	2300      	movs	r3, #0
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 fa63 	bl	8004134 <I2C_TransferConfig>
 8003c6e:	e00f      	b.n	8003c90 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	8979      	ldrh	r1, [r7, #10]
 8003c82:	2300      	movs	r3, #0
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 fa52 	bl	8004134 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d19a      	bne.n	8003bd0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f920 	bl	8003ee4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e01a      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6859      	ldr	r1, [r3, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <HAL_I2C_Mem_Read+0x230>)
 8003cc2:	400b      	ands	r3, r1
 8003cc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e000      	b.n	8003ce4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003ce2:	2302      	movs	r3, #2
  }
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	80002400 	.word	0x80002400
 8003cf0:	fe00e800 	.word	0xfe00e800

08003cf4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af02      	add	r7, sp, #8
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	4608      	mov	r0, r1
 8003cfe:	4611      	mov	r1, r2
 8003d00:	461a      	mov	r2, r3
 8003d02:	4603      	mov	r3, r0
 8003d04:	817b      	strh	r3, [r7, #10]
 8003d06:	460b      	mov	r3, r1
 8003d08:	813b      	strh	r3, [r7, #8]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	8979      	ldrh	r1, [r7, #10]
 8003d14:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <I2C_RequestMemoryRead+0xa4>)
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fa0a 	bl	8004134 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	69b9      	ldr	r1, [r7, #24]
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f89d 	bl	8003e64 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e02c      	b.n	8003d8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d105      	bne.n	8003d46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d3a:	893b      	ldrh	r3, [r7, #8]
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	629a      	str	r2, [r3, #40]	; 0x28
 8003d44:	e015      	b.n	8003d72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d46:	893b      	ldrh	r3, [r7, #8]
 8003d48:	0a1b      	lsrs	r3, r3, #8
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	69b9      	ldr	r1, [r7, #24]
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 f883 	bl	8003e64 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e012      	b.n	8003d8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d68:	893b      	ldrh	r3, [r7, #8]
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	2140      	movs	r1, #64	; 0x40
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f831 	bl	8003de4 <I2C_WaitOnFlagUntilTimeout>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	80002000 	.word	0x80002000

08003d9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d103      	bne.n	8003dba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2200      	movs	r2, #0
 8003db8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d007      	beq.n	8003dd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	619a      	str	r2, [r3, #24]
  }
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	4613      	mov	r3, r2
 8003df2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003df4:	e022      	b.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfc:	d01e      	beq.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfe:	f7fd fc23 	bl	8001648 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d302      	bcc.n	8003e14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d113      	bne.n	8003e3c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e18:	f043 0220 	orr.w	r2, r3, #32
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e00f      	b.n	8003e5c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4013      	ands	r3, r2
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	461a      	mov	r2, r3
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d0cd      	beq.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e70:	e02c      	b.n	8003ecc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f870 	bl	8003f5c <I2C_IsErrorOccurred>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e02a      	b.n	8003edc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d01e      	beq.n	8003ecc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8e:	f7fd fbdb 	bl	8001648 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d113      	bne.n	8003ecc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea8:	f043 0220 	orr.w	r2, r3, #32
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e007      	b.n	8003edc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d1cb      	bne.n	8003e72 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ef0:	e028      	b.n	8003f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f830 	bl	8003f5c <I2C_IsErrorOccurred>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e026      	b.n	8003f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f06:	f7fd fb9f 	bl	8001648 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d302      	bcc.n	8003f1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d113      	bne.n	8003f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f20:	f043 0220 	orr.w	r2, r3, #32
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e007      	b.n	8003f54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	f003 0320 	and.w	r3, r3, #32
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	d1cf      	bne.n	8003ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	f003 0310 	and.w	r3, r3, #16
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d075      	beq.n	8004074 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2210      	movs	r2, #16
 8003f8e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f90:	e056      	b.n	8004040 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f98:	d052      	beq.n	8004040 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f9a:	f7fd fb55 	bl	8001648 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d302      	bcc.n	8003fb0 <I2C_IsErrorOccurred+0x54>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d147      	bne.n	8004040 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fc2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd2:	d12e      	bne.n	8004032 <I2C_IsErrorOccurred+0xd6>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fda:	d02a      	beq.n	8004032 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003fdc:	7cfb      	ldrb	r3, [r7, #19]
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d027      	beq.n	8004032 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ff0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ff2:	f7fd fb29 	bl	8001648 <HAL_GetTick>
 8003ff6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ff8:	e01b      	b.n	8004032 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ffa:	f7fd fb25 	bl	8001648 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b19      	cmp	r3, #25
 8004006:	d914      	bls.n	8004032 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400c:	f043 0220 	orr.w	r2, r3, #32
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b20      	cmp	r3, #32
 800403e:	d1dc      	bne.n	8003ffa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	2b20      	cmp	r3, #32
 800404c:	d003      	beq.n	8004056 <I2C_IsErrorOccurred+0xfa>
 800404e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004052:	2b00      	cmp	r3, #0
 8004054:	d09d      	beq.n	8003f92 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800405a:	2b00      	cmp	r3, #0
 800405c:	d103      	bne.n	8004066 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2220      	movs	r2, #32
 8004064:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	f043 0304 	orr.w	r3, r3, #4
 800406c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004096:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00b      	beq.n	80040c0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	f043 0308 	orr.w	r3, r3, #8
 80040ae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	f043 0302 	orr.w	r3, r3, #2
 80040d0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80040e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d01c      	beq.n	8004124 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f7ff fe56 	bl	8003d9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <I2C_IsErrorOccurred+0x1d4>)
 80040fc:	400b      	ands	r3, r1
 80040fe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	431a      	orrs	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2220      	movs	r2, #32
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004124:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004128:	4618      	mov	r0, r3
 800412a:	3728      	adds	r7, #40	; 0x28
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	fe00e800 	.word	0xfe00e800

08004134 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	460b      	mov	r3, r1
 8004140:	817b      	strh	r3, [r7, #10]
 8004142:	4613      	mov	r3, r2
 8004144:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004146:	897b      	ldrh	r3, [r7, #10]
 8004148:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800414c:	7a7b      	ldrb	r3, [r7, #9]
 800414e:	041b      	lsls	r3, r3, #16
 8004150:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004154:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	4313      	orrs	r3, r2
 800415e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004162:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	0d5b      	lsrs	r3, r3, #21
 800416e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004172:	4b08      	ldr	r3, [pc, #32]	; (8004194 <I2C_TransferConfig+0x60>)
 8004174:	430b      	orrs	r3, r1
 8004176:	43db      	mvns	r3, r3
 8004178:	ea02 0103 	and.w	r1, r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	03ff63ff 	.word	0x03ff63ff

08004198 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b20      	cmp	r3, #32
 80041ac:	d138      	bne.n	8004220 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e032      	b.n	8004222 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2224      	movs	r2, #36	; 0x24
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80041ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6819      	ldr	r1, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	e000      	b.n	8004222 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004220:	2302      	movs	r3, #2
  }
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800422e:	b480      	push	{r7}
 8004230:	b085      	sub	sp, #20
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b20      	cmp	r3, #32
 8004242:	d139      	bne.n	80042b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800424e:	2302      	movs	r3, #2
 8004250:	e033      	b.n	80042ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2224      	movs	r2, #36	; 0x24
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0201 	bic.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004280:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	021b      	lsls	r3, r3, #8
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	e000      	b.n	80042ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042b8:	2302      	movs	r3, #2
  }
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042cc:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40007000 	.word	0x40007000

080042e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b088      	sub	sp, #32
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d102      	bne.n	80042f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f000 bc02 	b.w	8004afc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042f8:	4b96      	ldr	r3, [pc, #600]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 030c 	and.w	r3, r3, #12
 8004300:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004302:	4b94      	ldr	r3, [pc, #592]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80e4 	beq.w	80044e2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d007      	beq.n	8004330 <HAL_RCC_OscConfig+0x4c>
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	2b0c      	cmp	r3, #12
 8004324:	f040 808b 	bne.w	800443e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	2b01      	cmp	r3, #1
 800432c:	f040 8087 	bne.w	800443e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004330:	4b88      	ldr	r3, [pc, #544]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d005      	beq.n	8004348 <HAL_RCC_OscConfig+0x64>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e3d9      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	4b81      	ldr	r3, [pc, #516]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0308 	and.w	r3, r3, #8
 8004354:	2b00      	cmp	r3, #0
 8004356:	d004      	beq.n	8004362 <HAL_RCC_OscConfig+0x7e>
 8004358:	4b7e      	ldr	r3, [pc, #504]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004360:	e005      	b.n	800436e <HAL_RCC_OscConfig+0x8a>
 8004362:	4b7c      	ldr	r3, [pc, #496]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 8004364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800436e:	4293      	cmp	r3, r2
 8004370:	d223      	bcs.n	80043ba <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fd8c 	bl	8004e94 <RCC_SetFlashLatencyFromMSIRange>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e3ba      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004386:	4b73      	ldr	r3, [pc, #460]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a72      	ldr	r2, [pc, #456]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 800438c:	f043 0308 	orr.w	r3, r3, #8
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4b70      	ldr	r3, [pc, #448]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	496d      	ldr	r1, [pc, #436]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043a4:	4b6b      	ldr	r3, [pc, #428]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	4968      	ldr	r1, [pc, #416]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	604b      	str	r3, [r1, #4]
 80043b8:	e025      	b.n	8004406 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043ba:	4b66      	ldr	r3, [pc, #408]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a65      	ldr	r2, [pc, #404]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 80043c0:	f043 0308 	orr.w	r3, r3, #8
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	4b63      	ldr	r3, [pc, #396]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	4960      	ldr	r1, [pc, #384]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043d8:	4b5e      	ldr	r3, [pc, #376]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	495b      	ldr	r1, [pc, #364]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d109      	bne.n	8004406 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fd4c 	bl	8004e94 <RCC_SetFlashLatencyFromMSIRange>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e37a      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004406:	f000 fc81 	bl	8004d0c <HAL_RCC_GetSysClockFreq>
 800440a:	4602      	mov	r2, r0
 800440c:	4b51      	ldr	r3, [pc, #324]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	4950      	ldr	r1, [pc, #320]	; (8004558 <HAL_RCC_OscConfig+0x274>)
 8004418:	5ccb      	ldrb	r3, [r1, r3]
 800441a:	f003 031f 	and.w	r3, r3, #31
 800441e:	fa22 f303 	lsr.w	r3, r2, r3
 8004422:	4a4e      	ldr	r2, [pc, #312]	; (800455c <HAL_RCC_OscConfig+0x278>)
 8004424:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004426:	4b4e      	ldr	r3, [pc, #312]	; (8004560 <HAL_RCC_OscConfig+0x27c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd f8bc 	bl	80015a8 <HAL_InitTick>
 8004430:	4603      	mov	r3, r0
 8004432:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004434:	7bfb      	ldrb	r3, [r7, #15]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d052      	beq.n	80044e0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	e35e      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d032      	beq.n	80044ac <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004446:	4b43      	ldr	r3, [pc, #268]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a42      	ldr	r2, [pc, #264]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004452:	f7fd f8f9 	bl	8001648 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800445a:	f7fd f8f5 	bl	8001648 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e347      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800446c:	4b39      	ldr	r3, [pc, #228]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004478:	4b36      	ldr	r3, [pc, #216]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a35      	ldr	r2, [pc, #212]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 800447e:	f043 0308 	orr.w	r3, r3, #8
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b33      	ldr	r3, [pc, #204]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	4930      	ldr	r1, [pc, #192]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 8004492:	4313      	orrs	r3, r2
 8004494:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004496:	4b2f      	ldr	r3, [pc, #188]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	69db      	ldr	r3, [r3, #28]
 80044a2:	021b      	lsls	r3, r3, #8
 80044a4:	492b      	ldr	r1, [pc, #172]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	604b      	str	r3, [r1, #4]
 80044aa:	e01a      	b.n	80044e2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044ac:	4b29      	ldr	r3, [pc, #164]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a28      	ldr	r2, [pc, #160]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 80044b2:	f023 0301 	bic.w	r3, r3, #1
 80044b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044b8:	f7fd f8c6 	bl	8001648 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044c0:	f7fd f8c2 	bl	8001648 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e314      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044d2:	4b20      	ldr	r3, [pc, #128]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f0      	bne.n	80044c0 <HAL_RCC_OscConfig+0x1dc>
 80044de:	e000      	b.n	80044e2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d073      	beq.n	80045d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d005      	beq.n	8004500 <HAL_RCC_OscConfig+0x21c>
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2b0c      	cmp	r3, #12
 80044f8:	d10e      	bne.n	8004518 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d10b      	bne.n	8004518 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004500:	4b14      	ldr	r3, [pc, #80]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d063      	beq.n	80045d4 <HAL_RCC_OscConfig+0x2f0>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d15f      	bne.n	80045d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e2f1      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004520:	d106      	bne.n	8004530 <HAL_RCC_OscConfig+0x24c>
 8004522:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a0b      	ldr	r2, [pc, #44]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 8004528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	e025      	b.n	800457c <HAL_RCC_OscConfig+0x298>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004538:	d114      	bne.n	8004564 <HAL_RCC_OscConfig+0x280>
 800453a:	4b06      	ldr	r3, [pc, #24]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a05      	ldr	r2, [pc, #20]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 8004540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	4b03      	ldr	r3, [pc, #12]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a02      	ldr	r2, [pc, #8]	; (8004554 <HAL_RCC_OscConfig+0x270>)
 800454c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	e013      	b.n	800457c <HAL_RCC_OscConfig+0x298>
 8004554:	40021000 	.word	0x40021000
 8004558:	0800b600 	.word	0x0800b600
 800455c:	20000000 	.word	0x20000000
 8004560:	20000004 	.word	0x20000004
 8004564:	4ba0      	ldr	r3, [pc, #640]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a9f      	ldr	r2, [pc, #636]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 800456a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	4b9d      	ldr	r3, [pc, #628]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a9c      	ldr	r2, [pc, #624]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 8004576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800457a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d013      	beq.n	80045ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fd f860 	bl	8001648 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800458c:	f7fd f85c 	bl	8001648 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b64      	cmp	r3, #100	; 0x64
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e2ae      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800459e:	4b92      	ldr	r3, [pc, #584]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0f0      	beq.n	800458c <HAL_RCC_OscConfig+0x2a8>
 80045aa:	e014      	b.n	80045d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fd f84c 	bl	8001648 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b4:	f7fd f848 	bl	8001648 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b64      	cmp	r3, #100	; 0x64
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e29a      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045c6:	4b88      	ldr	r3, [pc, #544]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0x2d0>
 80045d2:	e000      	b.n	80045d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d060      	beq.n	80046a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_OscConfig+0x310>
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	2b0c      	cmp	r3, #12
 80045ec:	d119      	bne.n	8004622 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d116      	bne.n	8004622 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f4:	4b7c      	ldr	r3, [pc, #496]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_RCC_OscConfig+0x328>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e277      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460c:	4b76      	ldr	r3, [pc, #472]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	061b      	lsls	r3, r3, #24
 800461a:	4973      	ldr	r1, [pc, #460]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 800461c:	4313      	orrs	r3, r2
 800461e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004620:	e040      	b.n	80046a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d023      	beq.n	8004672 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800462a:	4b6f      	ldr	r3, [pc, #444]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a6e      	ldr	r2, [pc, #440]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 8004630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004636:	f7fd f807 	bl	8001648 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800463e:	f7fd f803 	bl	8001648 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e255      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004650:	4b65      	ldr	r3, [pc, #404]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465c:	4b62      	ldr	r3, [pc, #392]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	061b      	lsls	r3, r3, #24
 800466a:	495f      	ldr	r1, [pc, #380]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
 8004670:	e018      	b.n	80046a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004672:	4b5d      	ldr	r3, [pc, #372]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a5c      	ldr	r2, [pc, #368]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 8004678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800467c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467e:	f7fc ffe3 	bl	8001648 <HAL_GetTick>
 8004682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004686:	f7fc ffdf 	bl	8001648 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e231      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004698:	4b53      	ldr	r3, [pc, #332]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1f0      	bne.n	8004686 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d03c      	beq.n	800472a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01c      	beq.n	80046f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b8:	4b4b      	ldr	r3, [pc, #300]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 80046ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046be:	4a4a      	ldr	r2, [pc, #296]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c8:	f7fc ffbe 	bl	8001648 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d0:	f7fc ffba 	bl	8001648 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e20c      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046e2:	4b41      	ldr	r3, [pc, #260]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 80046e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0ef      	beq.n	80046d0 <HAL_RCC_OscConfig+0x3ec>
 80046f0:	e01b      	b.n	800472a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046f2:	4b3d      	ldr	r3, [pc, #244]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 80046f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f8:	4a3b      	ldr	r2, [pc, #236]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 80046fa:	f023 0301 	bic.w	r3, r3, #1
 80046fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004702:	f7fc ffa1 	bl	8001648 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800470a:	f7fc ff9d 	bl	8001648 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e1ef      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800471c:	4b32      	ldr	r3, [pc, #200]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 800471e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1ef      	bne.n	800470a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 80a6 	beq.w	8004884 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004738:	2300      	movs	r3, #0
 800473a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800473c:	4b2a      	ldr	r3, [pc, #168]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10d      	bne.n	8004764 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004748:	4b27      	ldr	r3, [pc, #156]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 800474a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474c:	4a26      	ldr	r2, [pc, #152]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 800474e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004752:	6593      	str	r3, [r2, #88]	; 0x58
 8004754:	4b24      	ldr	r3, [pc, #144]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 8004756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475c:	60bb      	str	r3, [r7, #8]
 800475e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004760:	2301      	movs	r3, #1
 8004762:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004764:	4b21      	ldr	r3, [pc, #132]	; (80047ec <HAL_RCC_OscConfig+0x508>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d118      	bne.n	80047a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004770:	4b1e      	ldr	r3, [pc, #120]	; (80047ec <HAL_RCC_OscConfig+0x508>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1d      	ldr	r2, [pc, #116]	; (80047ec <HAL_RCC_OscConfig+0x508>)
 8004776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800477a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800477c:	f7fc ff64 	bl	8001648 <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004784:	f7fc ff60 	bl	8001648 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e1b2      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004796:	4b15      	ldr	r3, [pc, #84]	; (80047ec <HAL_RCC_OscConfig+0x508>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0f0      	beq.n	8004784 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d108      	bne.n	80047bc <HAL_RCC_OscConfig+0x4d8>
 80047aa:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b0:	4a0d      	ldr	r2, [pc, #52]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047ba:	e029      	b.n	8004810 <HAL_RCC_OscConfig+0x52c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	2b05      	cmp	r3, #5
 80047c2:	d115      	bne.n	80047f0 <HAL_RCC_OscConfig+0x50c>
 80047c4:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ca:	4a07      	ldr	r2, [pc, #28]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 80047cc:	f043 0304 	orr.w	r3, r3, #4
 80047d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047d4:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	4a03      	ldr	r2, [pc, #12]	; (80047e8 <HAL_RCC_OscConfig+0x504>)
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047e4:	e014      	b.n	8004810 <HAL_RCC_OscConfig+0x52c>
 80047e6:	bf00      	nop
 80047e8:	40021000 	.word	0x40021000
 80047ec:	40007000 	.word	0x40007000
 80047f0:	4b9a      	ldr	r3, [pc, #616]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f6:	4a99      	ldr	r2, [pc, #612]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004800:	4b96      	ldr	r3, [pc, #600]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 8004802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004806:	4a95      	ldr	r2, [pc, #596]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 8004808:	f023 0304 	bic.w	r3, r3, #4
 800480c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d016      	beq.n	8004846 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004818:	f7fc ff16 	bl	8001648 <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800481e:	e00a      	b.n	8004836 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004820:	f7fc ff12 	bl	8001648 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	f241 3288 	movw	r2, #5000	; 0x1388
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e162      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004836:	4b89      	ldr	r3, [pc, #548]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0ed      	beq.n	8004820 <HAL_RCC_OscConfig+0x53c>
 8004844:	e015      	b.n	8004872 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004846:	f7fc feff 	bl	8001648 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800484c:	e00a      	b.n	8004864 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484e:	f7fc fefb 	bl	8001648 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	f241 3288 	movw	r2, #5000	; 0x1388
 800485c:	4293      	cmp	r3, r2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e14b      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004864:	4b7d      	ldr	r3, [pc, #500]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1ed      	bne.n	800484e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004872:	7ffb      	ldrb	r3, [r7, #31]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d105      	bne.n	8004884 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004878:	4b78      	ldr	r3, [pc, #480]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 800487a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487c:	4a77      	ldr	r2, [pc, #476]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 800487e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004882:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	d03c      	beq.n	800490a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01c      	beq.n	80048d2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004898:	4b70      	ldr	r3, [pc, #448]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 800489a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800489e:	4a6f      	ldr	r2, [pc, #444]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a8:	f7fc fece 	bl	8001648 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048b0:	f7fc feca 	bl	8001648 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e11c      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048c2:	4b66      	ldr	r3, [pc, #408]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 80048c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0ef      	beq.n	80048b0 <HAL_RCC_OscConfig+0x5cc>
 80048d0:	e01b      	b.n	800490a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048d2:	4b62      	ldr	r3, [pc, #392]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 80048d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048d8:	4a60      	ldr	r2, [pc, #384]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 80048da:	f023 0301 	bic.w	r3, r3, #1
 80048de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e2:	f7fc feb1 	bl	8001648 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ea:	f7fc fead 	bl	8001648 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e0ff      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048fc:	4b57      	ldr	r3, [pc, #348]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 80048fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1ef      	bne.n	80048ea <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 80f3 	beq.w	8004afa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	2b02      	cmp	r3, #2
 800491a:	f040 80c9 	bne.w	8004ab0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800491e:	4b4f      	ldr	r3, [pc, #316]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f003 0203 	and.w	r2, r3, #3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492e:	429a      	cmp	r2, r3
 8004930:	d12c      	bne.n	800498c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	3b01      	subs	r3, #1
 800493e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004940:	429a      	cmp	r2, r3
 8004942:	d123      	bne.n	800498c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004950:	429a      	cmp	r2, r3
 8004952:	d11b      	bne.n	800498c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004960:	429a      	cmp	r2, r3
 8004962:	d113      	bne.n	800498c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496e:	085b      	lsrs	r3, r3, #1
 8004970:	3b01      	subs	r3, #1
 8004972:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004974:	429a      	cmp	r2, r3
 8004976:	d109      	bne.n	800498c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	085b      	lsrs	r3, r3, #1
 8004984:	3b01      	subs	r3, #1
 8004986:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004988:	429a      	cmp	r2, r3
 800498a:	d06b      	beq.n	8004a64 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b0c      	cmp	r3, #12
 8004990:	d062      	beq.n	8004a58 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004992:	4b32      	ldr	r3, [pc, #200]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e0ac      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049a2:	4b2e      	ldr	r3, [pc, #184]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a2d      	ldr	r2, [pc, #180]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 80049a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049ac:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049ae:	f7fc fe4b 	bl	8001648 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b6:	f7fc fe47 	bl	8001648 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e099      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c8:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049d4:	4b21      	ldr	r3, [pc, #132]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	4b21      	ldr	r3, [pc, #132]	; (8004a60 <HAL_RCC_OscConfig+0x77c>)
 80049da:	4013      	ands	r3, r2
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049e4:	3a01      	subs	r2, #1
 80049e6:	0112      	lsls	r2, r2, #4
 80049e8:	4311      	orrs	r1, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049ee:	0212      	lsls	r2, r2, #8
 80049f0:	4311      	orrs	r1, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049f6:	0852      	lsrs	r2, r2, #1
 80049f8:	3a01      	subs	r2, #1
 80049fa:	0552      	lsls	r2, r2, #21
 80049fc:	4311      	orrs	r1, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a02:	0852      	lsrs	r2, r2, #1
 8004a04:	3a01      	subs	r2, #1
 8004a06:	0652      	lsls	r2, r2, #25
 8004a08:	4311      	orrs	r1, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a0e:	06d2      	lsls	r2, r2, #27
 8004a10:	430a      	orrs	r2, r1
 8004a12:	4912      	ldr	r1, [pc, #72]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a18:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a0f      	ldr	r2, [pc, #60]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 8004a1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a22:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a24:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4a0c      	ldr	r2, [pc, #48]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 8004a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a2e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a30:	f7fc fe0a 	bl	8001648 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a38:	f7fc fe06 	bl	8001648 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e058      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a4a:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <HAL_RCC_OscConfig+0x778>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a56:	e050      	b.n	8004afa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e04f      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a64:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <HAL_RCC_OscConfig+0x820>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d144      	bne.n	8004afa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a70:	4b24      	ldr	r3, [pc, #144]	; (8004b04 <HAL_RCC_OscConfig+0x820>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a23      	ldr	r2, [pc, #140]	; (8004b04 <HAL_RCC_OscConfig+0x820>)
 8004a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a7a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a7c:	4b21      	ldr	r3, [pc, #132]	; (8004b04 <HAL_RCC_OscConfig+0x820>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a20      	ldr	r2, [pc, #128]	; (8004b04 <HAL_RCC_OscConfig+0x820>)
 8004a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a88:	f7fc fdde 	bl	8001648 <HAL_GetTick>
 8004a8c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a8e:	e008      	b.n	8004aa2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a90:	f7fc fdda 	bl	8001648 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e02c      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa2:	4b18      	ldr	r3, [pc, #96]	; (8004b04 <HAL_RCC_OscConfig+0x820>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f0      	beq.n	8004a90 <HAL_RCC_OscConfig+0x7ac>
 8004aae:	e024      	b.n	8004afa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2b0c      	cmp	r3, #12
 8004ab4:	d01f      	beq.n	8004af6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ab6:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <HAL_RCC_OscConfig+0x820>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a12      	ldr	r2, [pc, #72]	; (8004b04 <HAL_RCC_OscConfig+0x820>)
 8004abc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac2:	f7fc fdc1 	bl	8001648 <HAL_GetTick>
 8004ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac8:	e008      	b.n	8004adc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aca:	f7fc fdbd 	bl	8001648 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d901      	bls.n	8004adc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e00f      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004adc:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <HAL_RCC_OscConfig+0x820>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1f0      	bne.n	8004aca <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004ae8:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <HAL_RCC_OscConfig+0x820>)
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	4905      	ldr	r1, [pc, #20]	; (8004b04 <HAL_RCC_OscConfig+0x820>)
 8004aee:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <HAL_RCC_OscConfig+0x824>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	60cb      	str	r3, [r1, #12]
 8004af4:	e001      	b.n	8004afa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3720      	adds	r7, #32
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40021000 	.word	0x40021000
 8004b08:	feeefffc 	.word	0xfeeefffc

08004b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0e7      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b20:	4b75      	ldr	r3, [pc, #468]	; (8004cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d910      	bls.n	8004b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b72      	ldr	r3, [pc, #456]	; (8004cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 0207 	bic.w	r2, r3, #7
 8004b36:	4970      	ldr	r1, [pc, #448]	; (8004cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3e:	4b6e      	ldr	r3, [pc, #440]	; (8004cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d001      	beq.n	8004b50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e0cf      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d010      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	4b66      	ldr	r3, [pc, #408]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d908      	bls.n	8004b7e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b6c:	4b63      	ldr	r3, [pc, #396]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	4960      	ldr	r1, [pc, #384]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d04c      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d107      	bne.n	8004ba2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b92:	4b5a      	ldr	r3, [pc, #360]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d121      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e0a6      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d107      	bne.n	8004bba <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004baa:	4b54      	ldr	r3, [pc, #336]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d115      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e09a      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d107      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bc2:	4b4e      	ldr	r3, [pc, #312]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e08e      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bd2:	4b4a      	ldr	r3, [pc, #296]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e086      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004be2:	4b46      	ldr	r3, [pc, #280]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f023 0203 	bic.w	r2, r3, #3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4943      	ldr	r1, [pc, #268]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf4:	f7fc fd28 	bl	8001648 <HAL_GetTick>
 8004bf8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bfc:	f7fc fd24 	bl	8001648 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e06e      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c12:	4b3a      	ldr	r3, [pc, #232]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 020c 	and.w	r2, r3, #12
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d1eb      	bne.n	8004bfc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d010      	beq.n	8004c52 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689a      	ldr	r2, [r3, #8]
 8004c34:	4b31      	ldr	r3, [pc, #196]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d208      	bcs.n	8004c52 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c40:	4b2e      	ldr	r3, [pc, #184]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	492b      	ldr	r1, [pc, #172]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c52:	4b29      	ldr	r3, [pc, #164]	; (8004cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d210      	bcs.n	8004c82 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c60:	4b25      	ldr	r3, [pc, #148]	; (8004cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f023 0207 	bic.w	r2, r3, #7
 8004c68:	4923      	ldr	r1, [pc, #140]	; (8004cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c70:	4b21      	ldr	r3, [pc, #132]	; (8004cf8 <HAL_RCC_ClockConfig+0x1ec>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d001      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e036      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d008      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c8e:	4b1b      	ldr	r3, [pc, #108]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	4918      	ldr	r1, [pc, #96]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d009      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cac:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	4910      	ldr	r1, [pc, #64]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cc0:	f000 f824 	bl	8004d0c <HAL_RCC_GetSysClockFreq>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <HAL_RCC_ClockConfig+0x1f0>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	091b      	lsrs	r3, r3, #4
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	490b      	ldr	r1, [pc, #44]	; (8004d00 <HAL_RCC_ClockConfig+0x1f4>)
 8004cd2:	5ccb      	ldrb	r3, [r1, r3]
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cdc:	4a09      	ldr	r2, [pc, #36]	; (8004d04 <HAL_RCC_ClockConfig+0x1f8>)
 8004cde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ce0:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <HAL_RCC_ClockConfig+0x1fc>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fc fc5f 	bl	80015a8 <HAL_InitTick>
 8004cea:	4603      	mov	r3, r0
 8004cec:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cee:	7afb      	ldrb	r3, [r7, #11]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40022000 	.word	0x40022000
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	0800b600 	.word	0x0800b600
 8004d04:	20000000 	.word	0x20000000
 8004d08:	20000004 	.word	0x20000004

08004d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b089      	sub	sp, #36	; 0x24
 8004d10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61fb      	str	r3, [r7, #28]
 8004d16:	2300      	movs	r3, #0
 8004d18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d1a:	4b3e      	ldr	r3, [pc, #248]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
 8004d22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d24:	4b3b      	ldr	r3, [pc, #236]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f003 0303 	and.w	r3, r3, #3
 8004d2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d005      	beq.n	8004d40 <HAL_RCC_GetSysClockFreq+0x34>
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2b0c      	cmp	r3, #12
 8004d38:	d121      	bne.n	8004d7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d11e      	bne.n	8004d7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d40:	4b34      	ldr	r3, [pc, #208]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d107      	bne.n	8004d5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d4c:	4b31      	ldr	r3, [pc, #196]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d52:	0a1b      	lsrs	r3, r3, #8
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	e005      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d5c:	4b2d      	ldr	r3, [pc, #180]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	091b      	lsrs	r3, r3, #4
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d68:	4a2b      	ldr	r2, [pc, #172]	; (8004e18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d10d      	bne.n	8004d94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d7c:	e00a      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d102      	bne.n	8004d8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d84:	4b25      	ldr	r3, [pc, #148]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	e004      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d101      	bne.n	8004d94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d90:	4b23      	ldr	r3, [pc, #140]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2b0c      	cmp	r3, #12
 8004d98:	d134      	bne.n	8004e04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d9a:	4b1e      	ldr	r3, [pc, #120]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d003      	beq.n	8004db2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d003      	beq.n	8004db8 <HAL_RCC_GetSysClockFreq+0xac>
 8004db0:	e005      	b.n	8004dbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004db2:	4b1a      	ldr	r3, [pc, #104]	; (8004e1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004db4:	617b      	str	r3, [r7, #20]
      break;
 8004db6:	e005      	b.n	8004dc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004db8:	4b19      	ldr	r3, [pc, #100]	; (8004e20 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dba:	617b      	str	r3, [r7, #20]
      break;
 8004dbc:	e002      	b.n	8004dc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	617b      	str	r3, [r7, #20]
      break;
 8004dc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dc4:	4b13      	ldr	r3, [pc, #76]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	091b      	lsrs	r3, r3, #4
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	3301      	adds	r3, #1
 8004dd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dd2:	4b10      	ldr	r3, [pc, #64]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	0a1b      	lsrs	r3, r3, #8
 8004dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	fb03 f202 	mul.w	r2, r3, r2
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dea:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	0e5b      	lsrs	r3, r3, #25
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	3301      	adds	r3, #1
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e04:	69bb      	ldr	r3, [r7, #24]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3724      	adds	r7, #36	; 0x24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40021000 	.word	0x40021000
 8004e18:	0800b618 	.word	0x0800b618
 8004e1c:	00f42400 	.word	0x00f42400
 8004e20:	00b71b00 	.word	0x00b71b00

08004e24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e28:	4b03      	ldr	r3, [pc, #12]	; (8004e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	20000000 	.word	0x20000000

08004e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e40:	f7ff fff0 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 8004e44:	4602      	mov	r2, r0
 8004e46:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	0a1b      	lsrs	r3, r3, #8
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	4904      	ldr	r1, [pc, #16]	; (8004e64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e52:	5ccb      	ldrb	r3, [r1, r3]
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40021000 	.word	0x40021000
 8004e64:	0800b610 	.word	0x0800b610

08004e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e6c:	f7ff ffda 	bl	8004e24 <HAL_RCC_GetHCLKFreq>
 8004e70:	4602      	mov	r2, r0
 8004e72:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	0adb      	lsrs	r3, r3, #11
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	4904      	ldr	r1, [pc, #16]	; (8004e90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e7e:	5ccb      	ldrb	r3, [r1, r3]
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	0800b610 	.word	0x0800b610

08004e94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ea0:	4b2a      	ldr	r3, [pc, #168]	; (8004f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004eac:	f7ff fa0c 	bl	80042c8 <HAL_PWREx_GetVoltageRange>
 8004eb0:	6178      	str	r0, [r7, #20]
 8004eb2:	e014      	b.n	8004ede <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004eb4:	4b25      	ldr	r3, [pc, #148]	; (8004f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb8:	4a24      	ldr	r2, [pc, #144]	; (8004f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8004ec0:	4b22      	ldr	r3, [pc, #136]	; (8004f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ecc:	f7ff f9fc 	bl	80042c8 <HAL_PWREx_GetVoltageRange>
 8004ed0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ed2:	4b1e      	ldr	r3, [pc, #120]	; (8004f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed6:	4a1d      	ldr	r2, [pc, #116]	; (8004f4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004edc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee4:	d10b      	bne.n	8004efe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b80      	cmp	r3, #128	; 0x80
 8004eea:	d919      	bls.n	8004f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2ba0      	cmp	r3, #160	; 0xa0
 8004ef0:	d902      	bls.n	8004ef8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	e013      	b.n	8004f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ef8:	2301      	movs	r3, #1
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	e010      	b.n	8004f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b80      	cmp	r3, #128	; 0x80
 8004f02:	d902      	bls.n	8004f0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f04:	2303      	movs	r3, #3
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	e00a      	b.n	8004f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b80      	cmp	r3, #128	; 0x80
 8004f0e:	d102      	bne.n	8004f16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f10:	2302      	movs	r3, #2
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	e004      	b.n	8004f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b70      	cmp	r3, #112	; 0x70
 8004f1a:	d101      	bne.n	8004f20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f023 0207 	bic.w	r2, r3, #7
 8004f28:	4909      	ldr	r1, [pc, #36]	; (8004f50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f30:	4b07      	ldr	r3, [pc, #28]	; (8004f50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d001      	beq.n	8004f42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	40022000 	.word	0x40022000

08004f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f60:	2300      	movs	r3, #0
 8004f62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d031      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f78:	d01a      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004f7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f7e:	d814      	bhi.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d009      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f88:	d10f      	bne.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004f8a:	4b5d      	ldr	r3, [pc, #372]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	4a5c      	ldr	r2, [pc, #368]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f94:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f96:	e00c      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f9f0 	bl	8005384 <RCCEx_PLLSAI1_Config>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004fa8:	e003      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	74fb      	strb	r3, [r7, #19]
      break;
 8004fae:	e000      	b.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fb2:	7cfb      	ldrb	r3, [r7, #19]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10b      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fb8:	4b51      	ldr	r3, [pc, #324]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc6:	494e      	ldr	r1, [pc, #312]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fce:	e001      	b.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd0:	7cfb      	ldrb	r3, [r7, #19]
 8004fd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 809e 	beq.w	800511e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fe6:	4b46      	ldr	r3, [pc, #280]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e000      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00d      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ffc:	4b40      	ldr	r3, [pc, #256]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005000:	4a3f      	ldr	r2, [pc, #252]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005006:	6593      	str	r3, [r2, #88]	; 0x58
 8005008:	4b3d      	ldr	r3, [pc, #244]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800500a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005014:	2301      	movs	r3, #1
 8005016:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005018:	4b3a      	ldr	r3, [pc, #232]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a39      	ldr	r2, [pc, #228]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800501e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005022:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005024:	f7fc fb10 	bl	8001648 <HAL_GetTick>
 8005028:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800502a:	e009      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800502c:	f7fc fb0c 	bl	8001648 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d902      	bls.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	74fb      	strb	r3, [r7, #19]
        break;
 800503e:	e005      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005040:	4b30      	ldr	r3, [pc, #192]	; (8005104 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0ef      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800504c:	7cfb      	ldrb	r3, [r7, #19]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d15a      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005052:	4b2b      	ldr	r3, [pc, #172]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800505c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01e      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	429a      	cmp	r2, r3
 800506c:	d019      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800506e:	4b24      	ldr	r3, [pc, #144]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005078:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800507a:	4b21      	ldr	r3, [pc, #132]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800507c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005080:	4a1f      	ldr	r2, [pc, #124]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800508a:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800508c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005090:	4a1b      	ldr	r2, [pc, #108]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005096:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800509a:	4a19      	ldr	r2, [pc, #100]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d016      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7fc facc 	bl	8001648 <HAL_GetTick>
 80050b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050b2:	e00b      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b4:	f7fc fac8 	bl	8001648 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d902      	bls.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	74fb      	strb	r3, [r7, #19]
            break;
 80050ca:	e006      	b.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0ec      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80050da:	7cfb      	ldrb	r3, [r7, #19]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10b      	bne.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050e0:	4b07      	ldr	r3, [pc, #28]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ee:	4904      	ldr	r1, [pc, #16]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050f6:	e009      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050f8:	7cfb      	ldrb	r3, [r7, #19]
 80050fa:	74bb      	strb	r3, [r7, #18]
 80050fc:	e006      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80050fe:	bf00      	nop
 8005100:	40021000 	.word	0x40021000
 8005104:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005108:	7cfb      	ldrb	r3, [r7, #19]
 800510a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800510c:	7c7b      	ldrb	r3, [r7, #17]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d105      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005112:	4b9b      	ldr	r3, [pc, #620]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005116:	4a9a      	ldr	r2, [pc, #616]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800511c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800512a:	4b95      	ldr	r3, [pc, #596]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800512c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005130:	f023 0203 	bic.w	r2, r3, #3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	4991      	ldr	r1, [pc, #580]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800514c:	4b8c      	ldr	r3, [pc, #560]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005152:	f023 020c 	bic.w	r2, r3, #12
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515a:	4989      	ldr	r1, [pc, #548]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0304 	and.w	r3, r3, #4
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800516e:	4b84      	ldr	r3, [pc, #528]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005174:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517c:	4980      	ldr	r1, [pc, #512]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0320 	and.w	r3, r3, #32
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005190:	4b7b      	ldr	r3, [pc, #492]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005196:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	4978      	ldr	r1, [pc, #480]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051b2:	4b73      	ldr	r3, [pc, #460]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c0:	496f      	ldr	r1, [pc, #444]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051d4:	4b6a      	ldr	r3, [pc, #424]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	4967      	ldr	r1, [pc, #412]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051f6:	4b62      	ldr	r3, [pc, #392]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005204:	495e      	ldr	r1, [pc, #376]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00a      	beq.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005218:	4b59      	ldr	r3, [pc, #356]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005226:	4956      	ldr	r1, [pc, #344]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00a      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800523a:	4b51      	ldr	r3, [pc, #324]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800523c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005240:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	494d      	ldr	r1, [pc, #308]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d028      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800525c:	4b48      	ldr	r3, [pc, #288]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800525e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005262:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800526a:	4945      	ldr	r1, [pc, #276]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800527a:	d106      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800527c:	4b40      	ldr	r3, [pc, #256]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	4a3f      	ldr	r2, [pc, #252]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005286:	60d3      	str	r3, [r2, #12]
 8005288:	e011      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800528e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005292:	d10c      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3304      	adds	r3, #4
 8005298:	2101      	movs	r1, #1
 800529a:	4618      	mov	r0, r3
 800529c:	f000 f872 	bl	8005384 <RCCEx_PLLSAI1_Config>
 80052a0:	4603      	mov	r3, r0
 80052a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80052aa:	7cfb      	ldrb	r3, [r7, #19]
 80052ac:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d028      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052ba:	4b31      	ldr	r3, [pc, #196]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c8:	492d      	ldr	r1, [pc, #180]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052d8:	d106      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052da:	4b29      	ldr	r3, [pc, #164]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	4a28      	ldr	r2, [pc, #160]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80052e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052e4:	60d3      	str	r3, [r2, #12]
 80052e6:	e011      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052f0:	d10c      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3304      	adds	r3, #4
 80052f6:	2101      	movs	r1, #1
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 f843 	bl	8005384 <RCCEx_PLLSAI1_Config>
 80052fe:	4603      	mov	r3, r0
 8005300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005302:	7cfb      	ldrb	r3, [r7, #19]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8005308:	7cfb      	ldrb	r3, [r7, #19]
 800530a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01c      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005318:	4b19      	ldr	r3, [pc, #100]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005326:	4916      	ldr	r1, [pc, #88]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005332:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005336:	d10c      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3304      	adds	r3, #4
 800533c:	2102      	movs	r1, #2
 800533e:	4618      	mov	r0, r3
 8005340:	f000 f820 	bl	8005384 <RCCEx_PLLSAI1_Config>
 8005344:	4603      	mov	r3, r0
 8005346:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005348:	7cfb      	ldrb	r3, [r7, #19]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800534e:	7cfb      	ldrb	r3, [r7, #19]
 8005350:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00a      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800535e:	4b08      	ldr	r3, [pc, #32]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8005360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005364:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800536c:	4904      	ldr	r1, [pc, #16]	; (8005380 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005374:	7cbb      	ldrb	r3, [r7, #18]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40021000 	.word	0x40021000

08005384 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005392:	4b74      	ldr	r3, [pc, #464]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d018      	beq.n	80053d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800539e:	4b71      	ldr	r3, [pc, #452]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 0203 	and.w	r2, r3, #3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d10d      	bne.n	80053ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
       ||
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d009      	beq.n	80053ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80053b6:	4b6b      	ldr	r3, [pc, #428]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	091b      	lsrs	r3, r3, #4
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
       ||
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d047      	beq.n	800545a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	73fb      	strb	r3, [r7, #15]
 80053ce:	e044      	b.n	800545a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d018      	beq.n	800540a <RCCEx_PLLSAI1_Config+0x86>
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d825      	bhi.n	8005428 <RCCEx_PLLSAI1_Config+0xa4>
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d002      	beq.n	80053e6 <RCCEx_PLLSAI1_Config+0x62>
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d009      	beq.n	80053f8 <RCCEx_PLLSAI1_Config+0x74>
 80053e4:	e020      	b.n	8005428 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053e6:	4b5f      	ldr	r3, [pc, #380]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d11d      	bne.n	800542e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053f6:	e01a      	b.n	800542e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053f8:	4b5a      	ldr	r3, [pc, #360]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005400:	2b00      	cmp	r3, #0
 8005402:	d116      	bne.n	8005432 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005408:	e013      	b.n	8005432 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800540a:	4b56      	ldr	r3, [pc, #344]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10f      	bne.n	8005436 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005416:	4b53      	ldr	r3, [pc, #332]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d109      	bne.n	8005436 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005426:	e006      	b.n	8005436 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	73fb      	strb	r3, [r7, #15]
      break;
 800542c:	e004      	b.n	8005438 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800542e:	bf00      	nop
 8005430:	e002      	b.n	8005438 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005432:	bf00      	nop
 8005434:	e000      	b.n	8005438 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005436:	bf00      	nop
    }

    if(status == HAL_OK)
 8005438:	7bfb      	ldrb	r3, [r7, #15]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10d      	bne.n	800545a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800543e:	4b49      	ldr	r3, [pc, #292]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6819      	ldr	r1, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	3b01      	subs	r3, #1
 8005450:	011b      	lsls	r3, r3, #4
 8005452:	430b      	orrs	r3, r1
 8005454:	4943      	ldr	r1, [pc, #268]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005456:	4313      	orrs	r3, r2
 8005458:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800545a:	7bfb      	ldrb	r3, [r7, #15]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d17c      	bne.n	800555a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005460:	4b40      	ldr	r3, [pc, #256]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a3f      	ldr	r2, [pc, #252]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005466:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800546a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800546c:	f7fc f8ec 	bl	8001648 <HAL_GetTick>
 8005470:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005472:	e009      	b.n	8005488 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005474:	f7fc f8e8 	bl	8001648 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d902      	bls.n	8005488 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	73fb      	strb	r3, [r7, #15]
        break;
 8005486:	e005      	b.n	8005494 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005488:	4b36      	ldr	r3, [pc, #216]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1ef      	bne.n	8005474 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d15f      	bne.n	800555a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d110      	bne.n	80054c2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054a0:	4b30      	ldr	r3, [pc, #192]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80054a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	6892      	ldr	r2, [r2, #8]
 80054b0:	0211      	lsls	r1, r2, #8
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	68d2      	ldr	r2, [r2, #12]
 80054b6:	06d2      	lsls	r2, r2, #27
 80054b8:	430a      	orrs	r2, r1
 80054ba:	492a      	ldr	r1, [pc, #168]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	610b      	str	r3, [r1, #16]
 80054c0:	e027      	b.n	8005512 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d112      	bne.n	80054ee <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054c8:	4b26      	ldr	r3, [pc, #152]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80054d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6892      	ldr	r2, [r2, #8]
 80054d8:	0211      	lsls	r1, r2, #8
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6912      	ldr	r2, [r2, #16]
 80054de:	0852      	lsrs	r2, r2, #1
 80054e0:	3a01      	subs	r2, #1
 80054e2:	0552      	lsls	r2, r2, #21
 80054e4:	430a      	orrs	r2, r1
 80054e6:	491f      	ldr	r1, [pc, #124]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054e8:	4313      	orrs	r3, r2
 80054ea:	610b      	str	r3, [r1, #16]
 80054ec:	e011      	b.n	8005512 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054ee:	4b1d      	ldr	r3, [pc, #116]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80054f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6892      	ldr	r2, [r2, #8]
 80054fe:	0211      	lsls	r1, r2, #8
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	6952      	ldr	r2, [r2, #20]
 8005504:	0852      	lsrs	r2, r2, #1
 8005506:	3a01      	subs	r2, #1
 8005508:	0652      	lsls	r2, r2, #25
 800550a:	430a      	orrs	r2, r1
 800550c:	4915      	ldr	r1, [pc, #84]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 800550e:	4313      	orrs	r3, r2
 8005510:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005512:	4b14      	ldr	r3, [pc, #80]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a13      	ldr	r2, [pc, #76]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005518:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800551c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800551e:	f7fc f893 	bl	8001648 <HAL_GetTick>
 8005522:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005524:	e009      	b.n	800553a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005526:	f7fc f88f 	bl	8001648 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d902      	bls.n	800553a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	73fb      	strb	r3, [r7, #15]
          break;
 8005538:	e005      	b.n	8005546 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800553a:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0ef      	beq.n	8005526 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005546:	7bfb      	ldrb	r3, [r7, #15]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d106      	bne.n	800555a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800554c:	4b05      	ldr	r3, [pc, #20]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	4903      	ldr	r1, [pc, #12]	; (8005564 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005556:	4313      	orrs	r3, r2
 8005558:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800555a:	7bfb      	ldrb	r3, [r7, #15]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40021000 	.word	0x40021000

08005568 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d06c      	beq.n	8005654 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7fb fd60 	bl	8001054 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	22ca      	movs	r2, #202	; 0xca
 80055a2:	625a      	str	r2, [r3, #36]	; 0x24
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2253      	movs	r2, #83	; 0x53
 80055aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f925 	bl	80057fc <RTC_EnterInitMode>
 80055b2:	4603      	mov	r3, r0
 80055b4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80055b6:	7bfb      	ldrb	r3, [r7, #15]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d14b      	bne.n	8005654 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6812      	ldr	r2, [r2, #0]
 80055c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80055ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ce:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6899      	ldr	r1, [r3, #8]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	68d2      	ldr	r2, [r2, #12]
 80055f6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6919      	ldr	r1, [r3, #16]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	041a      	lsls	r2, r3, #16
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f929 	bl	8005864 <RTC_ExitInitMode>
 8005612:	4603      	mov	r3, r0
 8005614:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d11b      	bne.n	8005654 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0203 	bic.w	r2, r2, #3
 800562a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	69da      	ldr	r2, [r3, #28]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	22ff      	movs	r2, #255	; 0xff
 800564a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005654:	7bfb      	ldrb	r3, [r7, #15]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b086      	sub	sp, #24
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800568c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005690:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	0c1b      	lsrs	r3, r3, #16
 8005696:	b2db      	uxtb	r3, r3
 8005698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800569c:	b2da      	uxtb	r2, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	0a1b      	lsrs	r3, r3, #8
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	0d9b      	lsrs	r3, r3, #22
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	f003 0301 	and.w	r3, r3, #1
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d11a      	bne.n	800570c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 f900 	bl	80058e0 <RTC_Bcd2ToByte>
 80056e0:	4603      	mov	r3, r0
 80056e2:	461a      	mov	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 f8f7 	bl	80058e0 <RTC_Bcd2ToByte>
 80056f2:	4603      	mov	r3, r0
 80056f4:	461a      	mov	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	789b      	ldrb	r3, [r3, #2]
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 f8ee 	bl	80058e0 <RTC_Bcd2ToByte>
 8005704:	4603      	mov	r3, r0
 8005706:	461a      	mov	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b086      	sub	sp, #24
 800571a:	af00      	add	r7, sp, #0
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800572c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005730:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	0c1b      	lsrs	r3, r3, #16
 8005736:	b2da      	uxtb	r2, r3
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	0a1b      	lsrs	r3, r3, #8
 8005740:	b2db      	uxtb	r3, r3
 8005742:	f003 031f 	and.w	r3, r3, #31
 8005746:	b2da      	uxtb	r2, r3
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	b2db      	uxtb	r3, r3
 8005750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005754:	b2da      	uxtb	r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	0b5b      	lsrs	r3, r3, #13
 800575e:	b2db      	uxtb	r3, r3
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	b2da      	uxtb	r2, r3
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d11a      	bne.n	80057a6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	78db      	ldrb	r3, [r3, #3]
 8005774:	4618      	mov	r0, r3
 8005776:	f000 f8b3 	bl	80058e0 <RTC_Bcd2ToByte>
 800577a:	4603      	mov	r3, r0
 800577c:	461a      	mov	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	785b      	ldrb	r3, [r3, #1]
 8005786:	4618      	mov	r0, r3
 8005788:	f000 f8aa 	bl	80058e0 <RTC_Bcd2ToByte>
 800578c:	4603      	mov	r3, r0
 800578e:	461a      	mov	r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	789b      	ldrb	r3, [r3, #2]
 8005798:	4618      	mov	r0, r3
 800579a:	f000 f8a1 	bl	80058e0 <RTC_Bcd2ToByte>
 800579e:	4603      	mov	r3, r0
 80057a0:	461a      	mov	r2, r3
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057c6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80057c8:	f7fb ff3e 	bl	8001648 <HAL_GetTick>
 80057cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80057ce:	e009      	b.n	80057e4 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057d0:	f7fb ff3a 	bl	8001648 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057de:	d901      	bls.n	80057e4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e007      	b.n	80057f4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f003 0320 	and.w	r3, r3, #32
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0ee      	beq.n	80057d0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d120      	bne.n	8005858 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f04f 32ff 	mov.w	r2, #4294967295
 800581e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005820:	f7fb ff12 	bl	8001648 <HAL_GetTick>
 8005824:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005826:	e00d      	b.n	8005844 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005828:	f7fb ff0e 	bl	8001648 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005836:	d905      	bls.n	8005844 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2203      	movs	r2, #3
 8005840:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584e:	2b00      	cmp	r3, #0
 8005850:	d102      	bne.n	8005858 <RTC_EnterInitMode+0x5c>
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	2b03      	cmp	r3, #3
 8005856:	d1e7      	bne.n	8005828 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005858:	7bfb      	ldrb	r3, [r7, #15]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005870:	4b1a      	ldr	r3, [pc, #104]	; (80058dc <RTC_ExitInitMode+0x78>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	4a19      	ldr	r2, [pc, #100]	; (80058dc <RTC_ExitInitMode+0x78>)
 8005876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800587a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800587c:	4b17      	ldr	r3, [pc, #92]	; (80058dc <RTC_ExitInitMode+0x78>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10c      	bne.n	80058a2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff ff91 	bl	80057b0 <HAL_RTC_WaitForSynchro>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d01e      	beq.n	80058d2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2203      	movs	r2, #3
 8005898:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	73fb      	strb	r3, [r7, #15]
 80058a0:	e017      	b.n	80058d2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80058a2:	4b0e      	ldr	r3, [pc, #56]	; (80058dc <RTC_ExitInitMode+0x78>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	4a0d      	ldr	r2, [pc, #52]	; (80058dc <RTC_ExitInitMode+0x78>)
 80058a8:	f023 0320 	bic.w	r3, r3, #32
 80058ac:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff ff7e 	bl	80057b0 <HAL_RTC_WaitForSynchro>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d005      	beq.n	80058c6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2203      	movs	r2, #3
 80058be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80058c6:	4b05      	ldr	r3, [pc, #20]	; (80058dc <RTC_ExitInitMode+0x78>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	4a04      	ldr	r2, [pc, #16]	; (80058dc <RTC_ExitInitMode+0x78>)
 80058cc:	f043 0320 	orr.w	r3, r3, #32
 80058d0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40002800 	.word	0x40002800

080058e0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	4603      	mov	r3, r0
 80058e8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80058ea:	79fb      	ldrb	r3, [r7, #7]
 80058ec:	091b      	lsrs	r3, r3, #4
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	461a      	mov	r2, r3
 80058f2:	0092      	lsls	r2, r2, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	b2da      	uxtb	r2, r3
 8005902:	7bfb      	ldrb	r3, [r7, #15]
 8005904:	4413      	add	r3, r2
 8005906:	b2db      	uxtb	r3, r3
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e095      	b.n	8005a52 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	2b00      	cmp	r3, #0
 800592c:	d108      	bne.n	8005940 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005936:	d009      	beq.n	800594c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	61da      	str	r2, [r3, #28]
 800593e:	e005      	b.n	800594c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d106      	bne.n	800596c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7fb fb42 	bl	8000ff0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005982:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800598c:	d902      	bls.n	8005994 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	e002      	b.n	800599a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005998:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80059a2:	d007      	beq.n	80059b4 <HAL_SPI_Init+0xa0>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059ac:	d002      	beq.n	80059b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f6:	ea42 0103 	orr.w	r1, r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	0c1b      	lsrs	r3, r3, #16
 8005a10:	f003 0204 	and.w	r2, r3, #4
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	431a      	orrs	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a30:	ea42 0103 	orr.w	r1, r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b082      	sub	sp, #8
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e049      	b.n	8005b00 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d106      	bne.n	8005a86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7fb fb11 	bl	80010a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2202      	movs	r2, #2
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3304      	adds	r3, #4
 8005a96:	4619      	mov	r1, r3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f000 fa91 	bl	8005fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d001      	beq.n	8005b20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e033      	b.n	8005b88 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a19      	ldr	r2, [pc, #100]	; (8005b94 <HAL_TIM_Base_Start+0x8c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d009      	beq.n	8005b46 <HAL_TIM_Base_Start+0x3e>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3a:	d004      	beq.n	8005b46 <HAL_TIM_Base_Start+0x3e>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a15      	ldr	r2, [pc, #84]	; (8005b98 <HAL_TIM_Base_Start+0x90>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d115      	bne.n	8005b72 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	4b13      	ldr	r3, [pc, #76]	; (8005b9c <HAL_TIM_Base_Start+0x94>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b06      	cmp	r3, #6
 8005b56:	d015      	beq.n	8005b84 <HAL_TIM_Base_Start+0x7c>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b5e:	d011      	beq.n	8005b84 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0201 	orr.w	r2, r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b70:	e008      	b.n	8005b84 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0201 	orr.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	e000      	b.n	8005b86 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	40012c00 	.word	0x40012c00
 8005b98:	40014000 	.word	0x40014000
 8005b9c:	00010007 	.word	0x00010007

08005ba0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d122      	bne.n	8005bfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d11b      	bne.n	8005bfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f06f 0202 	mvn.w	r2, #2
 8005bcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f9ce 	bl	8005f84 <HAL_TIM_IC_CaptureCallback>
 8005be8:	e005      	b.n	8005bf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f9c0 	bl	8005f70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f9d1 	bl	8005f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f003 0304 	and.w	r3, r3, #4
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d122      	bne.n	8005c50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f003 0304 	and.w	r3, r3, #4
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d11b      	bne.n	8005c50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f06f 0204 	mvn.w	r2, #4
 8005c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2202      	movs	r2, #2
 8005c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f9a4 	bl	8005f84 <HAL_TIM_IC_CaptureCallback>
 8005c3c:	e005      	b.n	8005c4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 f996 	bl	8005f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f9a7 	bl	8005f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b08      	cmp	r3, #8
 8005c5c:	d122      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f003 0308 	and.w	r3, r3, #8
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d11b      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f06f 0208 	mvn.w	r2, #8
 8005c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2204      	movs	r2, #4
 8005c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f97a 	bl	8005f84 <HAL_TIM_IC_CaptureCallback>
 8005c90:	e005      	b.n	8005c9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f96c 	bl	8005f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f97d 	bl	8005f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	2b10      	cmp	r3, #16
 8005cb0:	d122      	bne.n	8005cf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f003 0310 	and.w	r3, r3, #16
 8005cbc:	2b10      	cmp	r3, #16
 8005cbe:	d11b      	bne.n	8005cf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0210 	mvn.w	r2, #16
 8005cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2208      	movs	r2, #8
 8005cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f950 	bl	8005f84 <HAL_TIM_IC_CaptureCallback>
 8005ce4:	e005      	b.n	8005cf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f942 	bl	8005f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f953 	bl	8005f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d10e      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d107      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f06f 0201 	mvn.w	r2, #1
 8005d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fb f937 	bl	8000f92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d2e:	2b80      	cmp	r3, #128	; 0x80
 8005d30:	d10e      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3c:	2b80      	cmp	r3, #128	; 0x80
 8005d3e:	d107      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 faa6 	bl	800629c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d5e:	d10e      	bne.n	8005d7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6a:	2b80      	cmp	r3, #128	; 0x80
 8005d6c:	d107      	bne.n	8005d7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fa99 	bl	80062b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d88:	2b40      	cmp	r3, #64	; 0x40
 8005d8a:	d10e      	bne.n	8005daa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d96:	2b40      	cmp	r3, #64	; 0x40
 8005d98:	d107      	bne.n	8005daa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f901 	bl	8005fac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d10e      	bne.n	8005dd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f003 0320 	and.w	r3, r3, #32
 8005dc2:	2b20      	cmp	r3, #32
 8005dc4:	d107      	bne.n	8005dd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f06f 0220 	mvn.w	r2, #32
 8005dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fa59 	bl	8006288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dd6:	bf00      	nop
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_TIM_ConfigClockSource+0x1c>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e0b6      	b.n	8005f68 <HAL_TIM_ConfigClockSource+0x18a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2202      	movs	r2, #2
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e18:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e1c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e24:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e36:	d03e      	beq.n	8005eb6 <HAL_TIM_ConfigClockSource+0xd8>
 8005e38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e3c:	f200 8087 	bhi.w	8005f4e <HAL_TIM_ConfigClockSource+0x170>
 8005e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e44:	f000 8086 	beq.w	8005f54 <HAL_TIM_ConfigClockSource+0x176>
 8005e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e4c:	d87f      	bhi.n	8005f4e <HAL_TIM_ConfigClockSource+0x170>
 8005e4e:	2b70      	cmp	r3, #112	; 0x70
 8005e50:	d01a      	beq.n	8005e88 <HAL_TIM_ConfigClockSource+0xaa>
 8005e52:	2b70      	cmp	r3, #112	; 0x70
 8005e54:	d87b      	bhi.n	8005f4e <HAL_TIM_ConfigClockSource+0x170>
 8005e56:	2b60      	cmp	r3, #96	; 0x60
 8005e58:	d050      	beq.n	8005efc <HAL_TIM_ConfigClockSource+0x11e>
 8005e5a:	2b60      	cmp	r3, #96	; 0x60
 8005e5c:	d877      	bhi.n	8005f4e <HAL_TIM_ConfigClockSource+0x170>
 8005e5e:	2b50      	cmp	r3, #80	; 0x50
 8005e60:	d03c      	beq.n	8005edc <HAL_TIM_ConfigClockSource+0xfe>
 8005e62:	2b50      	cmp	r3, #80	; 0x50
 8005e64:	d873      	bhi.n	8005f4e <HAL_TIM_ConfigClockSource+0x170>
 8005e66:	2b40      	cmp	r3, #64	; 0x40
 8005e68:	d058      	beq.n	8005f1c <HAL_TIM_ConfigClockSource+0x13e>
 8005e6a:	2b40      	cmp	r3, #64	; 0x40
 8005e6c:	d86f      	bhi.n	8005f4e <HAL_TIM_ConfigClockSource+0x170>
 8005e6e:	2b30      	cmp	r3, #48	; 0x30
 8005e70:	d064      	beq.n	8005f3c <HAL_TIM_ConfigClockSource+0x15e>
 8005e72:	2b30      	cmp	r3, #48	; 0x30
 8005e74:	d86b      	bhi.n	8005f4e <HAL_TIM_ConfigClockSource+0x170>
 8005e76:	2b20      	cmp	r3, #32
 8005e78:	d060      	beq.n	8005f3c <HAL_TIM_ConfigClockSource+0x15e>
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d867      	bhi.n	8005f4e <HAL_TIM_ConfigClockSource+0x170>
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d05c      	beq.n	8005f3c <HAL_TIM_ConfigClockSource+0x15e>
 8005e82:	2b10      	cmp	r3, #16
 8005e84:	d05a      	beq.n	8005f3c <HAL_TIM_ConfigClockSource+0x15e>
 8005e86:	e062      	b.n	8005f4e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6818      	ldr	r0, [r3, #0]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	6899      	ldr	r1, [r3, #8]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f000 f970 	bl	800617c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005eaa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	609a      	str	r2, [r3, #8]
      break;
 8005eb4:	e04f      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6818      	ldr	r0, [r3, #0]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	6899      	ldr	r1, [r3, #8]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f000 f959 	bl	800617c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ed8:	609a      	str	r2, [r3, #8]
      break;
 8005eda:	e03c      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6818      	ldr	r0, [r3, #0]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	6859      	ldr	r1, [r3, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f000 f8cd 	bl	8006088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2150      	movs	r1, #80	; 0x50
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 f926 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005efa:	e02c      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6818      	ldr	r0, [r3, #0]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	6859      	ldr	r1, [r3, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	f000 f8ec 	bl	80060e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2160      	movs	r1, #96	; 0x60
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 f916 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005f1a:	e01c      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	6859      	ldr	r1, [r3, #4]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	461a      	mov	r2, r3
 8005f2a:	f000 f8ad 	bl	8006088 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2140      	movs	r1, #64	; 0x40
 8005f34:	4618      	mov	r0, r3
 8005f36:	f000 f906 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005f3a:	e00c      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4619      	mov	r1, r3
 8005f46:	4610      	mov	r0, r2
 8005f48:	f000 f8fd 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005f4c:	e003      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	73fb      	strb	r3, [r7, #15]
      break;
 8005f52:	e000      	b.n	8005f56 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a2a      	ldr	r2, [pc, #168]	; (800607c <TIM_Base_SetConfig+0xbc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d003      	beq.n	8005fe0 <TIM_Base_SetConfig+0x20>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fde:	d108      	bne.n	8005ff2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a21      	ldr	r2, [pc, #132]	; (800607c <TIM_Base_SetConfig+0xbc>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00b      	beq.n	8006012 <TIM_Base_SetConfig+0x52>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006000:	d007      	beq.n	8006012 <TIM_Base_SetConfig+0x52>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a1e      	ldr	r2, [pc, #120]	; (8006080 <TIM_Base_SetConfig+0xc0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d003      	beq.n	8006012 <TIM_Base_SetConfig+0x52>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a1d      	ldr	r2, [pc, #116]	; (8006084 <TIM_Base_SetConfig+0xc4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d108      	bne.n	8006024 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689a      	ldr	r2, [r3, #8]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a0c      	ldr	r2, [pc, #48]	; (800607c <TIM_Base_SetConfig+0xbc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d007      	beq.n	8006060 <TIM_Base_SetConfig+0xa0>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a0b      	ldr	r2, [pc, #44]	; (8006080 <TIM_Base_SetConfig+0xc0>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d003      	beq.n	8006060 <TIM_Base_SetConfig+0xa0>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a0a      	ldr	r2, [pc, #40]	; (8006084 <TIM_Base_SetConfig+0xc4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d103      	bne.n	8006068 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	615a      	str	r2, [r3, #20]
}
 800606e:	bf00      	nop
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	40012c00 	.word	0x40012c00
 8006080:	40014000 	.word	0x40014000
 8006084:	40014400 	.word	0x40014400

08006088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6a1b      	ldr	r3, [r3, #32]
 8006098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0201 	bic.w	r2, r3, #1
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f023 030a 	bic.w	r3, r3, #10
 80060c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	697a      	ldr	r2, [r7, #20]
 80060d8:	621a      	str	r2, [r3, #32]
}
 80060da:	bf00      	nop
 80060dc:	371c      	adds	r7, #28
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b087      	sub	sp, #28
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f023 0210 	bic.w	r2, r3, #16
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006110:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	031b      	lsls	r3, r3, #12
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4313      	orrs	r3, r2
 800611a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006122:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006146:	b480      	push	{r7}
 8006148:	b085      	sub	sp, #20
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	f043 0307 	orr.w	r3, r3, #7
 8006168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	609a      	str	r2, [r3, #8]
}
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	021a      	lsls	r2, r3, #8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	431a      	orrs	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	609a      	str	r2, [r3, #8]
}
 80061b0:	bf00      	nop
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e04f      	b.n	8006274 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a21      	ldr	r2, [pc, #132]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d108      	bne.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006204:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006216:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	4313      	orrs	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a14      	ldr	r2, [pc, #80]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d009      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800623c:	d004      	beq.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a10      	ldr	r2, [pc, #64]	; (8006284 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d10c      	bne.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800624e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	4313      	orrs	r3, r2
 8006258:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	40012c00 	.word	0x40012c00
 8006284:	40014000 	.word	0x40014000

08006288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e040      	b.n	8006358 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fa ff38 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2224      	movs	r2, #36	; 0x24
 80062f0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f022 0201 	bic.w	r2, r2, #1
 8006300:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f992 	bl	800662c <UART_SetConfig>
 8006308:	4603      	mov	r3, r0
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e022      	b.n	8006358 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fbe0 	bl	8006ae0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800632e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800633e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0201 	orr.w	r2, r2, #1
 800634e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fc67 	bl	8006c24 <UART_CheckIdleState>
 8006356:	4603      	mov	r3, r0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	; 0x28
 8006364:	af02      	add	r7, sp, #8
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	4613      	mov	r3, r2
 800636e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006374:	2b20      	cmp	r3, #32
 8006376:	f040 8082 	bne.w	800647e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d002      	beq.n	8006386 <HAL_UART_Transmit+0x26>
 8006380:	88fb      	ldrh	r3, [r7, #6]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d101      	bne.n	800638a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e07a      	b.n	8006480 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <HAL_UART_Transmit+0x38>
 8006394:	2302      	movs	r3, #2
 8006396:	e073      	b.n	8006480 <HAL_UART_Transmit+0x120>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2221      	movs	r2, #33	; 0x21
 80063ac:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ae:	f7fb f94b 	bl	8001648 <HAL_GetTick>
 80063b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	88fa      	ldrh	r2, [r7, #6]
 80063b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	88fa      	ldrh	r2, [r7, #6]
 80063c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063cc:	d108      	bne.n	80063e0 <HAL_UART_Transmit+0x80>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d104      	bne.n	80063e0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80063d6:	2300      	movs	r3, #0
 80063d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	e003      	b.n	80063e8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063e4:	2300      	movs	r3, #0
 80063e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80063f0:	e02d      	b.n	800644e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2200      	movs	r2, #0
 80063fa:	2180      	movs	r1, #128	; 0x80
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 fc5a 	bl	8006cb6 <UART_WaitOnFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e039      	b.n	8006480 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10b      	bne.n	800642a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	881a      	ldrh	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800641e:	b292      	uxth	r2, r2
 8006420:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	3302      	adds	r3, #2
 8006426:	61bb      	str	r3, [r7, #24]
 8006428:	e008      	b.n	800643c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	781a      	ldrb	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	b292      	uxth	r2, r2
 8006434:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	3301      	adds	r3, #1
 800643a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006454:	b29b      	uxth	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1cb      	bne.n	80063f2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2200      	movs	r2, #0
 8006462:	2140      	movs	r1, #64	; 0x40
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 fc26 	bl	8006cb6 <UART_WaitOnFlagUntilTimeout>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e005      	b.n	8006480 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2220      	movs	r2, #32
 8006478:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	e000      	b.n	8006480 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800647e:	2302      	movs	r3, #2
  }
}
 8006480:	4618      	mov	r0, r3
 8006482:	3720      	adds	r7, #32
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08a      	sub	sp, #40	; 0x28
 800648c:	af02      	add	r7, sp, #8
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	603b      	str	r3, [r7, #0]
 8006494:	4613      	mov	r3, r2
 8006496:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800649c:	2b20      	cmp	r3, #32
 800649e:	f040 80bf 	bne.w	8006620 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <HAL_UART_Receive+0x26>
 80064a8:	88fb      	ldrh	r3, [r7, #6]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e0b7      	b.n	8006622 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d101      	bne.n	80064c0 <HAL_UART_Receive+0x38>
 80064bc:	2302      	movs	r3, #2
 80064be:	e0b0      	b.n	8006622 <HAL_UART_Receive+0x19a>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2222      	movs	r2, #34	; 0x22
 80064d4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064dc:	f7fb f8b4 	bl	8001648 <HAL_GetTick>
 80064e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	88fa      	ldrh	r2, [r7, #6]
 80064e6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	88fa      	ldrh	r2, [r7, #6]
 80064ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064fa:	d10e      	bne.n	800651a <HAL_UART_Receive+0x92>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d105      	bne.n	8006510 <HAL_UART_Receive+0x88>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f240 12ff 	movw	r2, #511	; 0x1ff
 800650a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800650e:	e02d      	b.n	800656c <HAL_UART_Receive+0xe4>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	22ff      	movs	r2, #255	; 0xff
 8006514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006518:	e028      	b.n	800656c <HAL_UART_Receive+0xe4>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10d      	bne.n	800653e <HAL_UART_Receive+0xb6>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d104      	bne.n	8006534 <HAL_UART_Receive+0xac>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	22ff      	movs	r2, #255	; 0xff
 800652e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006532:	e01b      	b.n	800656c <HAL_UART_Receive+0xe4>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	227f      	movs	r2, #127	; 0x7f
 8006538:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800653c:	e016      	b.n	800656c <HAL_UART_Receive+0xe4>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006546:	d10d      	bne.n	8006564 <HAL_UART_Receive+0xdc>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d104      	bne.n	800655a <HAL_UART_Receive+0xd2>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	227f      	movs	r2, #127	; 0x7f
 8006554:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006558:	e008      	b.n	800656c <HAL_UART_Receive+0xe4>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	223f      	movs	r2, #63	; 0x3f
 800655e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006562:	e003      	b.n	800656c <HAL_UART_Receive+0xe4>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006572:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800657c:	d108      	bne.n	8006590 <HAL_UART_Receive+0x108>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d104      	bne.n	8006590 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006586:	2300      	movs	r3, #0
 8006588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	61bb      	str	r3, [r7, #24]
 800658e:	e003      	b.n	8006598 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006594:	2300      	movs	r3, #0
 8006596:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80065a0:	e033      	b.n	800660a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2200      	movs	r2, #0
 80065aa:	2120      	movs	r1, #32
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 fb82 	bl	8006cb6 <UART_WaitOnFlagUntilTimeout>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e032      	b.n	8006622 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10c      	bne.n	80065dc <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	8a7b      	ldrh	r3, [r7, #18]
 80065cc:	4013      	ands	r3, r2
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	3302      	adds	r3, #2
 80065d8:	61bb      	str	r3, [r7, #24]
 80065da:	e00d      	b.n	80065f8 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	8a7b      	ldrh	r3, [r7, #18]
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	4013      	ands	r3, r2
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	3301      	adds	r3, #1
 80065f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1c5      	bne.n	80065a2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2220      	movs	r2, #32
 800661a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800661c:	2300      	movs	r3, #0
 800661e:	e000      	b.n	8006622 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006620:	2302      	movs	r3, #2
  }
}
 8006622:	4618      	mov	r0, r3
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
	...

0800662c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800662c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006630:	b08a      	sub	sp, #40	; 0x28
 8006632:	af00      	add	r7, sp, #0
 8006634:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	431a      	orrs	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	431a      	orrs	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	4313      	orrs	r3, r2
 8006652:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	4b9e      	ldr	r3, [pc, #632]	; (80068d4 <UART_SetConfig+0x2a8>)
 800665c:	4013      	ands	r3, r2
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	6812      	ldr	r2, [r2, #0]
 8006662:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006664:	430b      	orrs	r3, r1
 8006666:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	68da      	ldr	r2, [r3, #12]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a93      	ldr	r2, [pc, #588]	; (80068d8 <UART_SetConfig+0x2ac>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d004      	beq.n	8006698 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006694:	4313      	orrs	r3, r2
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066a8:	430a      	orrs	r2, r1
 80066aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a8a      	ldr	r2, [pc, #552]	; (80068dc <UART_SetConfig+0x2b0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d126      	bne.n	8006704 <UART_SetConfig+0xd8>
 80066b6:	4b8a      	ldr	r3, [pc, #552]	; (80068e0 <UART_SetConfig+0x2b4>)
 80066b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066bc:	f003 0303 	and.w	r3, r3, #3
 80066c0:	2b03      	cmp	r3, #3
 80066c2:	d81b      	bhi.n	80066fc <UART_SetConfig+0xd0>
 80066c4:	a201      	add	r2, pc, #4	; (adr r2, 80066cc <UART_SetConfig+0xa0>)
 80066c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ca:	bf00      	nop
 80066cc:	080066dd 	.word	0x080066dd
 80066d0:	080066ed 	.word	0x080066ed
 80066d4:	080066e5 	.word	0x080066e5
 80066d8:	080066f5 	.word	0x080066f5
 80066dc:	2301      	movs	r3, #1
 80066de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066e2:	e0ab      	b.n	800683c <UART_SetConfig+0x210>
 80066e4:	2302      	movs	r3, #2
 80066e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ea:	e0a7      	b.n	800683c <UART_SetConfig+0x210>
 80066ec:	2304      	movs	r3, #4
 80066ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066f2:	e0a3      	b.n	800683c <UART_SetConfig+0x210>
 80066f4:	2308      	movs	r3, #8
 80066f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066fa:	e09f      	b.n	800683c <UART_SetConfig+0x210>
 80066fc:	2310      	movs	r3, #16
 80066fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006702:	e09b      	b.n	800683c <UART_SetConfig+0x210>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a76      	ldr	r2, [pc, #472]	; (80068e4 <UART_SetConfig+0x2b8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d138      	bne.n	8006780 <UART_SetConfig+0x154>
 800670e:	4b74      	ldr	r3, [pc, #464]	; (80068e0 <UART_SetConfig+0x2b4>)
 8006710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006714:	f003 030c 	and.w	r3, r3, #12
 8006718:	2b0c      	cmp	r3, #12
 800671a:	d82d      	bhi.n	8006778 <UART_SetConfig+0x14c>
 800671c:	a201      	add	r2, pc, #4	; (adr r2, 8006724 <UART_SetConfig+0xf8>)
 800671e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006722:	bf00      	nop
 8006724:	08006759 	.word	0x08006759
 8006728:	08006779 	.word	0x08006779
 800672c:	08006779 	.word	0x08006779
 8006730:	08006779 	.word	0x08006779
 8006734:	08006769 	.word	0x08006769
 8006738:	08006779 	.word	0x08006779
 800673c:	08006779 	.word	0x08006779
 8006740:	08006779 	.word	0x08006779
 8006744:	08006761 	.word	0x08006761
 8006748:	08006779 	.word	0x08006779
 800674c:	08006779 	.word	0x08006779
 8006750:	08006779 	.word	0x08006779
 8006754:	08006771 	.word	0x08006771
 8006758:	2300      	movs	r3, #0
 800675a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800675e:	e06d      	b.n	800683c <UART_SetConfig+0x210>
 8006760:	2302      	movs	r3, #2
 8006762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006766:	e069      	b.n	800683c <UART_SetConfig+0x210>
 8006768:	2304      	movs	r3, #4
 800676a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800676e:	e065      	b.n	800683c <UART_SetConfig+0x210>
 8006770:	2308      	movs	r3, #8
 8006772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006776:	e061      	b.n	800683c <UART_SetConfig+0x210>
 8006778:	2310      	movs	r3, #16
 800677a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800677e:	e05d      	b.n	800683c <UART_SetConfig+0x210>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a58      	ldr	r2, [pc, #352]	; (80068e8 <UART_SetConfig+0x2bc>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d125      	bne.n	80067d6 <UART_SetConfig+0x1aa>
 800678a:	4b55      	ldr	r3, [pc, #340]	; (80068e0 <UART_SetConfig+0x2b4>)
 800678c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006790:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006794:	2b30      	cmp	r3, #48	; 0x30
 8006796:	d016      	beq.n	80067c6 <UART_SetConfig+0x19a>
 8006798:	2b30      	cmp	r3, #48	; 0x30
 800679a:	d818      	bhi.n	80067ce <UART_SetConfig+0x1a2>
 800679c:	2b20      	cmp	r3, #32
 800679e:	d00a      	beq.n	80067b6 <UART_SetConfig+0x18a>
 80067a0:	2b20      	cmp	r3, #32
 80067a2:	d814      	bhi.n	80067ce <UART_SetConfig+0x1a2>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <UART_SetConfig+0x182>
 80067a8:	2b10      	cmp	r3, #16
 80067aa:	d008      	beq.n	80067be <UART_SetConfig+0x192>
 80067ac:	e00f      	b.n	80067ce <UART_SetConfig+0x1a2>
 80067ae:	2300      	movs	r3, #0
 80067b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067b4:	e042      	b.n	800683c <UART_SetConfig+0x210>
 80067b6:	2302      	movs	r3, #2
 80067b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067bc:	e03e      	b.n	800683c <UART_SetConfig+0x210>
 80067be:	2304      	movs	r3, #4
 80067c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067c4:	e03a      	b.n	800683c <UART_SetConfig+0x210>
 80067c6:	2308      	movs	r3, #8
 80067c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067cc:	e036      	b.n	800683c <UART_SetConfig+0x210>
 80067ce:	2310      	movs	r3, #16
 80067d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d4:	e032      	b.n	800683c <UART_SetConfig+0x210>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a3f      	ldr	r2, [pc, #252]	; (80068d8 <UART_SetConfig+0x2ac>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d12a      	bne.n	8006836 <UART_SetConfig+0x20a>
 80067e0:	4b3f      	ldr	r3, [pc, #252]	; (80068e0 <UART_SetConfig+0x2b4>)
 80067e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067ee:	d01a      	beq.n	8006826 <UART_SetConfig+0x1fa>
 80067f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067f4:	d81b      	bhi.n	800682e <UART_SetConfig+0x202>
 80067f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067fa:	d00c      	beq.n	8006816 <UART_SetConfig+0x1ea>
 80067fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006800:	d815      	bhi.n	800682e <UART_SetConfig+0x202>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <UART_SetConfig+0x1e2>
 8006806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800680a:	d008      	beq.n	800681e <UART_SetConfig+0x1f2>
 800680c:	e00f      	b.n	800682e <UART_SetConfig+0x202>
 800680e:	2300      	movs	r3, #0
 8006810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006814:	e012      	b.n	800683c <UART_SetConfig+0x210>
 8006816:	2302      	movs	r3, #2
 8006818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800681c:	e00e      	b.n	800683c <UART_SetConfig+0x210>
 800681e:	2304      	movs	r3, #4
 8006820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006824:	e00a      	b.n	800683c <UART_SetConfig+0x210>
 8006826:	2308      	movs	r3, #8
 8006828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800682c:	e006      	b.n	800683c <UART_SetConfig+0x210>
 800682e:	2310      	movs	r3, #16
 8006830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006834:	e002      	b.n	800683c <UART_SetConfig+0x210>
 8006836:	2310      	movs	r3, #16
 8006838:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a25      	ldr	r2, [pc, #148]	; (80068d8 <UART_SetConfig+0x2ac>)
 8006842:	4293      	cmp	r3, r2
 8006844:	f040 808a 	bne.w	800695c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006848:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800684c:	2b08      	cmp	r3, #8
 800684e:	d824      	bhi.n	800689a <UART_SetConfig+0x26e>
 8006850:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <UART_SetConfig+0x22c>)
 8006852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006856:	bf00      	nop
 8006858:	0800687d 	.word	0x0800687d
 800685c:	0800689b 	.word	0x0800689b
 8006860:	08006885 	.word	0x08006885
 8006864:	0800689b 	.word	0x0800689b
 8006868:	0800688b 	.word	0x0800688b
 800686c:	0800689b 	.word	0x0800689b
 8006870:	0800689b 	.word	0x0800689b
 8006874:	0800689b 	.word	0x0800689b
 8006878:	08006893 	.word	0x08006893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800687c:	f7fe fade 	bl	8004e3c <HAL_RCC_GetPCLK1Freq>
 8006880:	61f8      	str	r0, [r7, #28]
        break;
 8006882:	e010      	b.n	80068a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006884:	4b19      	ldr	r3, [pc, #100]	; (80068ec <UART_SetConfig+0x2c0>)
 8006886:	61fb      	str	r3, [r7, #28]
        break;
 8006888:	e00d      	b.n	80068a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800688a:	f7fe fa3f 	bl	8004d0c <HAL_RCC_GetSysClockFreq>
 800688e:	61f8      	str	r0, [r7, #28]
        break;
 8006890:	e009      	b.n	80068a6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006896:	61fb      	str	r3, [r7, #28]
        break;
 8006898:	e005      	b.n	80068a6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 8109 	beq.w	8006ac0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	4613      	mov	r3, r2
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	4413      	add	r3, r2
 80068b8:	69fa      	ldr	r2, [r7, #28]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d305      	bcc.n	80068ca <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068c4:	69fa      	ldr	r2, [r7, #28]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d912      	bls.n	80068f0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80068d0:	e0f6      	b.n	8006ac0 <UART_SetConfig+0x494>
 80068d2:	bf00      	nop
 80068d4:	efff69f3 	.word	0xefff69f3
 80068d8:	40008000 	.word	0x40008000
 80068dc:	40013800 	.word	0x40013800
 80068e0:	40021000 	.word	0x40021000
 80068e4:	40004400 	.word	0x40004400
 80068e8:	40004800 	.word	0x40004800
 80068ec:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	2200      	movs	r2, #0
 80068f4:	461c      	mov	r4, r3
 80068f6:	4615      	mov	r5, r2
 80068f8:	f04f 0200 	mov.w	r2, #0
 80068fc:	f04f 0300 	mov.w	r3, #0
 8006900:	022b      	lsls	r3, r5, #8
 8006902:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006906:	0222      	lsls	r2, r4, #8
 8006908:	68f9      	ldr	r1, [r7, #12]
 800690a:	6849      	ldr	r1, [r1, #4]
 800690c:	0849      	lsrs	r1, r1, #1
 800690e:	2000      	movs	r0, #0
 8006910:	4688      	mov	r8, r1
 8006912:	4681      	mov	r9, r0
 8006914:	eb12 0a08 	adds.w	sl, r2, r8
 8006918:	eb43 0b09 	adc.w	fp, r3, r9
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	603b      	str	r3, [r7, #0]
 8006924:	607a      	str	r2, [r7, #4]
 8006926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800692a:	4650      	mov	r0, sl
 800692c:	4659      	mov	r1, fp
 800692e:	f7fa f8e3 	bl	8000af8 <__aeabi_uldivmod>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	4613      	mov	r3, r2
 8006938:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006940:	d308      	bcc.n	8006954 <UART_SetConfig+0x328>
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006948:	d204      	bcs.n	8006954 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	60da      	str	r2, [r3, #12]
 8006952:	e0b5      	b.n	8006ac0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800695a:	e0b1      	b.n	8006ac0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006964:	d15d      	bne.n	8006a22 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8006966:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800696a:	2b08      	cmp	r3, #8
 800696c:	d827      	bhi.n	80069be <UART_SetConfig+0x392>
 800696e:	a201      	add	r2, pc, #4	; (adr r2, 8006974 <UART_SetConfig+0x348>)
 8006970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006974:	08006999 	.word	0x08006999
 8006978:	080069a1 	.word	0x080069a1
 800697c:	080069a9 	.word	0x080069a9
 8006980:	080069bf 	.word	0x080069bf
 8006984:	080069af 	.word	0x080069af
 8006988:	080069bf 	.word	0x080069bf
 800698c:	080069bf 	.word	0x080069bf
 8006990:	080069bf 	.word	0x080069bf
 8006994:	080069b7 	.word	0x080069b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006998:	f7fe fa50 	bl	8004e3c <HAL_RCC_GetPCLK1Freq>
 800699c:	61f8      	str	r0, [r7, #28]
        break;
 800699e:	e014      	b.n	80069ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069a0:	f7fe fa62 	bl	8004e68 <HAL_RCC_GetPCLK2Freq>
 80069a4:	61f8      	str	r0, [r7, #28]
        break;
 80069a6:	e010      	b.n	80069ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069a8:	4b4c      	ldr	r3, [pc, #304]	; (8006adc <UART_SetConfig+0x4b0>)
 80069aa:	61fb      	str	r3, [r7, #28]
        break;
 80069ac:	e00d      	b.n	80069ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ae:	f7fe f9ad 	bl	8004d0c <HAL_RCC_GetSysClockFreq>
 80069b2:	61f8      	str	r0, [r7, #28]
        break;
 80069b4:	e009      	b.n	80069ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ba:	61fb      	str	r3, [r7, #28]
        break;
 80069bc:	e005      	b.n	80069ca <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d077      	beq.n	8006ac0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	005a      	lsls	r2, r3, #1
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	085b      	lsrs	r3, r3, #1
 80069da:	441a      	add	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	2b0f      	cmp	r3, #15
 80069ea:	d916      	bls.n	8006a1a <UART_SetConfig+0x3ee>
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f2:	d212      	bcs.n	8006a1a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f023 030f 	bic.w	r3, r3, #15
 80069fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	085b      	lsrs	r3, r3, #1
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	8afb      	ldrh	r3, [r7, #22]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	8afa      	ldrh	r2, [r7, #22]
 8006a16:	60da      	str	r2, [r3, #12]
 8006a18:	e052      	b.n	8006ac0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a20:	e04e      	b.n	8006ac0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a22:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a26:	2b08      	cmp	r3, #8
 8006a28:	d827      	bhi.n	8006a7a <UART_SetConfig+0x44e>
 8006a2a:	a201      	add	r2, pc, #4	; (adr r2, 8006a30 <UART_SetConfig+0x404>)
 8006a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a30:	08006a55 	.word	0x08006a55
 8006a34:	08006a5d 	.word	0x08006a5d
 8006a38:	08006a65 	.word	0x08006a65
 8006a3c:	08006a7b 	.word	0x08006a7b
 8006a40:	08006a6b 	.word	0x08006a6b
 8006a44:	08006a7b 	.word	0x08006a7b
 8006a48:	08006a7b 	.word	0x08006a7b
 8006a4c:	08006a7b 	.word	0x08006a7b
 8006a50:	08006a73 	.word	0x08006a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a54:	f7fe f9f2 	bl	8004e3c <HAL_RCC_GetPCLK1Freq>
 8006a58:	61f8      	str	r0, [r7, #28]
        break;
 8006a5a:	e014      	b.n	8006a86 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a5c:	f7fe fa04 	bl	8004e68 <HAL_RCC_GetPCLK2Freq>
 8006a60:	61f8      	str	r0, [r7, #28]
        break;
 8006a62:	e010      	b.n	8006a86 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a64:	4b1d      	ldr	r3, [pc, #116]	; (8006adc <UART_SetConfig+0x4b0>)
 8006a66:	61fb      	str	r3, [r7, #28]
        break;
 8006a68:	e00d      	b.n	8006a86 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a6a:	f7fe f94f 	bl	8004d0c <HAL_RCC_GetSysClockFreq>
 8006a6e:	61f8      	str	r0, [r7, #28]
        break;
 8006a70:	e009      	b.n	8006a86 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a76:	61fb      	str	r3, [r7, #28]
        break;
 8006a78:	e005      	b.n	8006a86 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a84:	bf00      	nop
    }

    if (pclk != 0U)
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d019      	beq.n	8006ac0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	085a      	lsrs	r2, r3, #1
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	441a      	add	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	2b0f      	cmp	r3, #15
 8006aa4:	d909      	bls.n	8006aba <UART_SetConfig+0x48e>
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aac:	d205      	bcs.n	8006aba <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60da      	str	r2, [r3, #12]
 8006ab8:	e002      	b.n	8006ac0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006acc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3728      	adds	r7, #40	; 0x28
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ada:	bf00      	nop
 8006adc:	00f42400 	.word	0x00f42400

08006ae0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00a      	beq.n	8006b0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00a      	beq.n	8006b4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	430a      	orrs	r2, r1
 8006b4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	f003 0308 	and.w	r3, r3, #8
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00a      	beq.n	8006b70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	430a      	orrs	r2, r1
 8006b6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	f003 0310 	and.w	r3, r3, #16
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	430a      	orrs	r2, r1
 8006bb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01a      	beq.n	8006bf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bde:	d10a      	bne.n	8006bf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00a      	beq.n	8006c18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	605a      	str	r2, [r3, #4]
  }
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af02      	add	r7, sp, #8
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c34:	f7fa fd08 	bl	8001648 <HAL_GetTick>
 8006c38:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0308 	and.w	r3, r3, #8
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d10e      	bne.n	8006c66 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c4c:	9300      	str	r3, [sp, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f82d 	bl	8006cb6 <UART_WaitOnFlagUntilTimeout>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e023      	b.n	8006cae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d10e      	bne.n	8006c92 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f817 	bl	8006cb6 <UART_WaitOnFlagUntilTimeout>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e00d      	b.n	8006cae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b09c      	sub	sp, #112	; 0x70
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	60f8      	str	r0, [r7, #12]
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	603b      	str	r3, [r7, #0]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cc6:	e0a5      	b.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cce:	f000 80a1 	beq.w	8006e14 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cd2:	f7fa fcb9 	bl	8001648 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d302      	bcc.n	8006ce8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006ce2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d13e      	bne.n	8006d66 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cfc:	667b      	str	r3, [r7, #100]	; 0x64
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d08:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e6      	bne.n	8006ce8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3308      	adds	r3, #8
 8006d20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d24:	e853 3f00 	ldrex	r3, [r3]
 8006d28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2c:	f023 0301 	bic.w	r3, r3, #1
 8006d30:	663b      	str	r3, [r7, #96]	; 0x60
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3308      	adds	r3, #8
 8006d38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1e5      	bne.n	8006d1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2220      	movs	r2, #32
 8006d52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2220      	movs	r2, #32
 8006d58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e067      	b.n	8006e36 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d04f      	beq.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	69db      	ldr	r3, [r3, #28]
 8006d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d82:	d147      	bne.n	8006e14 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d8c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006da2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	461a      	mov	r2, r3
 8006daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dac:	637b      	str	r3, [r7, #52]	; 0x34
 8006dae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006db2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e6      	bne.n	8006d8e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	e853 3f00 	ldrex	r3, [r3]
 8006dce:	613b      	str	r3, [r7, #16]
   return(result);
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f023 0301 	bic.w	r3, r3, #1
 8006dd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3308      	adds	r3, #8
 8006dde:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006de0:	623a      	str	r2, [r7, #32]
 8006de2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	69f9      	ldr	r1, [r7, #28]
 8006de6:	6a3a      	ldr	r2, [r7, #32]
 8006de8:	e841 2300 	strex	r3, r2, [r1]
 8006dec:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d1e5      	bne.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2220      	movs	r2, #32
 8006df8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2220      	movs	r2, #32
 8006e04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e010      	b.n	8006e36 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	69da      	ldr	r2, [r3, #28]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	bf0c      	ite	eq
 8006e24:	2301      	moveq	r3, #1
 8006e26:	2300      	movne	r3, #0
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	79fb      	ldrb	r3, [r7, #7]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	f43f af4a 	beq.w	8006cc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3770      	adds	r7, #112	; 0x70
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e016      	b.n	8006e7e <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7fa fa7b 	bl	800134c <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e62:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691a      	ldr	r2, [r3, #16]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	ea42 0103 	orr.w	r1, r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3708      	adds	r7, #8
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <BQ_AFE_Init>:
 * @arguments
 * @retvar
 */

void BQ_AFE_Init(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
	DATABASE_READ((void*)(&bq_database_bms), DATABASE_BMS);
 8006e8c:	2110      	movs	r1, #16
 8006e8e:	4816      	ldr	r0, [pc, #88]	; (8006ee8 <BQ_AFE_Init+0x60>)
 8006e90:	f002 fd36 	bl	8009900 <DATABASE_READ>

//	if(bq_database_bms.afe_state == AFE_SHUTDOWN && bq_database_bms.bms_state == BMS_IDLE)
	{
		GPIO_WritePin(GPIO_PIN_AFE_UART_EN,SET);
 8006e94:	2101      	movs	r1, #1
 8006e96:	2012      	movs	r0, #18
 8006e98:	f002 fa92 	bl	80093c0 <GPIO_WritePin>

		AFE_Wakeup();
 8006e9c:	f002 fec0 	bl	8009c20 <AFE_Wakeup>

		bq_database_bms.afe_state = AFE_IDLE;
 8006ea0:	4b11      	ldr	r3, [pc, #68]	; (8006ee8 <BQ_AFE_Init+0x60>)
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	719a      	strb	r2, [r3, #6]
		DATABASE_WRITE((void*)(&bq_database_bms), DATABASE_BMS);
 8006ea6:	2110      	movs	r1, #16
 8006ea8:	480f      	ldr	r0, [pc, #60]	; (8006ee8 <BQ_AFE_Init+0x60>)
 8006eaa:	f002 fcfb 	bl	80098a4 <DATABASE_WRITE>

		BQ_AFE_Config();
 8006eae:	f000 ffb3 	bl	8007e18 <BQ_AFE_Config>
		BQ_AFE_OV_Config();
 8006eb2:	f001 f891 	bl	8007fd8 <BQ_AFE_OV_Config>
		BQ_AFE_UV_Config();
 8006eb6:	f001 f90d 	bl	80080d4 <BQ_AFE_UV_Config>
		BQ_AFE_ClearAllFault();
 8006eba:	f001 f989 	bl	80081d0 <BQ_AFE_ClearAllFault>

		bq_database_bms.afe_state = AFE_ACTIVE;
 8006ebe:	4b0a      	ldr	r3, [pc, #40]	; (8006ee8 <BQ_AFE_Init+0x60>)
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	719a      	strb	r2, [r3, #6]
		DATABASE_WRITE((void*)(&bq_database_bms), DATABASE_BMS);
 8006ec4:	2110      	movs	r1, #16
 8006ec6:	4808      	ldr	r0, [pc, #32]	; (8006ee8 <BQ_AFE_Init+0x60>)
 8006ec8:	f002 fcec 	bl	80098a4 <DATABASE_WRITE>

//		if(BQ_AFE_CheckError() == NO_ERROR)
		{
//			CONT_StateRequest(CONT_NORMAL);

			DATABASE_READ((void*)(&bq_database_bms), DATABASE_BMS);
 8006ecc:	2110      	movs	r1, #16
 8006ece:	4806      	ldr	r0, [pc, #24]	; (8006ee8 <BQ_AFE_Init+0x60>)
 8006ed0:	f002 fd16 	bl	8009900 <DATABASE_READ>
			bq_database_bms.bms_state = BMS_STANDBY;
 8006ed4:	4b04      	ldr	r3, [pc, #16]	; (8006ee8 <BQ_AFE_Init+0x60>)
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	71da      	strb	r2, [r3, #7]
			DATABASE_WRITE((void*)(&bq_database_bms), DATABASE_BMS);
 8006eda:	2110      	movs	r1, #16
 8006edc:	4802      	ldr	r0, [pc, #8]	; (8006ee8 <BQ_AFE_Init+0x60>)
 8006ede:	f002 fce1 	bl	80098a4 <DATABASE_WRITE>
	}
//	else
//	{
//		Error_Handler();
//	}
}
 8006ee2:	bf00      	nop
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20000f24 	.word	0x20000f24

08006eec <BQ_AFE_ReadVoltage>:
 * @arguments
 * @retvar
 */

void BQ_AFE_ReadVoltage(void)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b09a      	sub	sp, #104	; 0x68
 8006ef0:	af02      	add	r7, sp, #8
	uint8_t AFE_RESPONSE[(NO_OF_CELLS_PER_STACK*2) + 3];
	uint8_t read = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint16_t Cell_ADC[NO_OF_CELLS_PER_STACK];
	uint16_t maxV,minV;
	uint16_t md_maxV,md_minV;
	uint8_t md_maxVIndex = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t md_minVIndex = 0;
 8006efe:	2300      	movs	r3, #0
 8006f00:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t maxVIndex = 0;
 8006f04:	2300      	movs	r3, #0
 8006f06:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	uint8_t minVIndex = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	uint32_t sum = 0;
 8006f10:	2300      	movs	r3, #0
 8006f12:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t mod_sum = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint8_t cell_index = 0;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	DATABASE_READ((void*)(&bq_database_bms), DATABASE_BMS);
 8006f1e:	2110      	movs	r1, #16
 8006f20:	48ad      	ldr	r0, [pc, #692]	; (80071d8 <BQ_AFE_ReadVoltage+0x2ec>)
 8006f22:	f002 fced 	bl	8009900 <DATABASE_READ>
	DATABASE_READ((void*)(&bq_database_eeprom), DATABASE_EEPROM);
 8006f26:	210d      	movs	r1, #13
 8006f28:	48ac      	ldr	r0, [pc, #688]	; (80071dc <BQ_AFE_ReadVoltage+0x2f0>)
 8006f2a:	f002 fce9 	bl	8009900 <DATABASE_READ>
	// For checking purpose condition is kept to bms_state == BMS_IDLE otherwise it should be
	// bms_state != BMS_IDLE
	if(bq_database_bms.bms_state != BMS_IDLE && bq_database_bms.balancing_status == BAL_OFF)
 8006f2e:	4baa      	ldr	r3, [pc, #680]	; (80071d8 <BQ_AFE_ReadVoltage+0x2ec>)
 8006f30:	79db      	ldrb	r3, [r3, #7]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	f000 825f 	beq.w	80073f6 <BQ_AFE_ReadVoltage+0x50a>
 8006f38:	4ba7      	ldr	r3, [pc, #668]	; (80071d8 <BQ_AFE_ReadVoltage+0x2ec>)
 8006f3a:	7b9b      	ldrb	r3, [r3, #14]
 8006f3c:	f083 0301 	eor.w	r3, r3, #1
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 8257 	beq.w	80073f6 <BQ_AFE_ReadVoltage+0x50a>
	{
		for(uint8_t Address = 0; Address < NO_OF_DAISY_STACK; Address++)
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8006f4e:	e11b      	b.n	8007188 <BQ_AFE_ReadVoltage+0x29c>
		{
			AFE_WriteReg(Address, 2, 0X00FFFF0000, 5, FRMWRT_SGL_R);
 8006f50:	f897 004a 	ldrb.w	r0, [r7, #74]	; 0x4a
 8006f54:	2300      	movs	r3, #0
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	2305      	movs	r3, #5
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	4aa0      	ldr	r2, [pc, #640]	; (80071e0 <BQ_AFE_ReadVoltage+0x2f4>)
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	2102      	movs	r1, #2
 8006f64:	f002 fe8e 	bl	8009c84 <AFE_WriteReg>
			read = AFE_WaitRespFrame(AFE_RESPONSE, 35, 0);
 8006f68:	f107 0320 	add.w	r3, r7, #32
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2123      	movs	r1, #35	; 0x23
 8006f70:	4618      	mov	r0, r3
 8006f72:	f003 f913 	bl	800a19c <AFE_WaitRespFrame>
 8006f76:	4603      	mov	r3, r0
 8006f78:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

			if(read == 32)
 8006f7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006f80:	2b20      	cmp	r3, #32
 8006f82:	f040 80fc 	bne.w	800717e <BQ_AFE_ReadVoltage+0x292>
			{
				if(Address%2 == 0)
 8006f86:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d17a      	bne.n	800708a <BQ_AFE_ReadVoltage+0x19e>
				{
					uint8_t cnt = 1;
 8006f94:	2301      	movs	r3, #1
 8006f96:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

					for(uint8_t i=0; i<NO_OF_CELLS_PER_STACK; i++)
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 8006fa0:	e064      	b.n	800706c <BQ_AFE_ReadVoltage+0x180>
					{
						Cell_ADC[i] = (AFE_RESPONSE[cnt] << 8) | (AFE_RESPONSE[cnt+1] & 0XFF);
 8006fa2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8006fa6:	3360      	adds	r3, #96	; 0x60
 8006fa8:	443b      	add	r3, r7
 8006faa:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8006fae:	021b      	lsls	r3, r3, #8
 8006fb0:	b21a      	sxth	r2, r3
 8006fb2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	3360      	adds	r3, #96	; 0x60
 8006fba:	443b      	add	r3, r7
 8006fbc:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8006fc0:	b21b      	sxth	r3, r3
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	b21a      	sxth	r2, r3
 8006fc6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006fca:	b292      	uxth	r2, r2
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	3360      	adds	r3, #96	; 0x60
 8006fd0:	443b      	add	r3, r7
 8006fd2:	f823 2c60 	strh.w	r2, [r3, #-96]
						bq_database_voltage.cell_voltage[cell_index] = ((Cell_ADC[i]*5*1000)/65535);
 8006fd6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	3360      	adds	r3, #96	; 0x60
 8006fde:	443b      	add	r3, r7
 8006fe0:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	f241 3388 	movw	r3, #5000	; 0x1388
 8006fea:	fb02 f303 	mul.w	r3, r2, r3
 8006fee:	4a7d      	ldr	r2, [pc, #500]	; (80071e4 <BQ_AFE_ReadVoltage+0x2f8>)
 8006ff0:	fb82 1203 	smull	r1, r2, r2, r3
 8006ff4:	441a      	add	r2, r3
 8006ff6:	13d2      	asrs	r2, r2, #15
 8006ff8:	17db      	asrs	r3, r3, #31
 8006ffa:	1ad2      	subs	r2, r2, r3
 8006ffc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007000:	b291      	uxth	r1, r2
 8007002:	4a79      	ldr	r2, [pc, #484]	; (80071e8 <BQ_AFE_ReadVoltage+0x2fc>)
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	4413      	add	r3, r2
 8007008:	460a      	mov	r2, r1
 800700a:	80da      	strh	r2, [r3, #6]
						bq_database_eeprom.cell_voltage[cell_index] = bq_database_voltage.cell_voltage[cell_index];
 800700c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007010:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8007014:	4974      	ldr	r1, [pc, #464]	; (80071e8 <BQ_AFE_ReadVoltage+0x2fc>)
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	440b      	add	r3, r1
 800701a:	88d8      	ldrh	r0, [r3, #6]
 800701c:	496f      	ldr	r1, [pc, #444]	; (80071dc <BQ_AFE_ReadVoltage+0x2f0>)
 800701e:	1d13      	adds	r3, r2, #4
 8007020:	4602      	mov	r2, r0
 8007022:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						sum = sum + bq_database_voltage.cell_voltage[cell_index];
 8007026:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800702a:	4a6f      	ldr	r2, [pc, #444]	; (80071e8 <BQ_AFE_ReadVoltage+0x2fc>)
 800702c:	005b      	lsls	r3, r3, #1
 800702e:	4413      	add	r3, r2
 8007030:	88db      	ldrh	r3, [r3, #6]
 8007032:	461a      	mov	r2, r3
 8007034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007036:	4413      	add	r3, r2
 8007038:	653b      	str	r3, [r7, #80]	; 0x50
						mod_sum = mod_sum + bq_database_voltage.cell_voltage[cell_index];
 800703a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800703e:	4a6a      	ldr	r2, [pc, #424]	; (80071e8 <BQ_AFE_ReadVoltage+0x2fc>)
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	4413      	add	r3, r2
 8007044:	88db      	ldrh	r3, [r3, #6]
 8007046:	461a      	mov	r2, r3
 8007048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800704a:	4413      	add	r3, r2
 800704c:	64fb      	str	r3, [r7, #76]	; 0x4c
						cell_index++;
 800704e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007052:	3301      	adds	r3, #1
 8007054:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
						cnt = cnt+2;
 8007058:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800705c:	3302      	adds	r3, #2
 800705e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
					for(uint8_t i=0; i<NO_OF_CELLS_PER_STACK; i++)
 8007062:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007066:	3301      	adds	r3, #1
 8007068:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 800706c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007070:	2b0f      	cmp	r3, #15
 8007072:	d996      	bls.n	8006fa2 <BQ_AFE_ReadVoltage+0xb6>
					}
					bq_database_voltage.module_voltage[Address] = mod_sum;
 8007074:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007078:	4a5b      	ldr	r2, [pc, #364]	; (80071e8 <BQ_AFE_ReadVoltage+0x2fc>)
 800707a:	335e      	adds	r3, #94	; 0x5e
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007082:	605a      	str	r2, [r3, #4]
					mod_sum = 0;
 8007084:	2300      	movs	r3, #0
 8007086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007088:	e079      	b.n	800717e <BQ_AFE_ReadVoltage+0x292>
				}

				else
				{
					uint8_t cnt = 3;
 800708a:	2303      	movs	r3, #3
 800708c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

					for(uint8_t i=0; i<(NO_OF_CELLS_PER_STACK-1); i++)
 8007090:	2300      	movs	r3, #0
 8007092:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8007096:	e064      	b.n	8007162 <BQ_AFE_ReadVoltage+0x276>
					{
						Cell_ADC[i] = (AFE_RESPONSE[cnt] << 8) | (AFE_RESPONSE[cnt+1] & 0XFF);
 8007098:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800709c:	3360      	adds	r3, #96	; 0x60
 800709e:	443b      	add	r3, r7
 80070a0:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80070a4:	021b      	lsls	r3, r3, #8
 80070a6:	b21a      	sxth	r2, r3
 80070a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80070ac:	3301      	adds	r3, #1
 80070ae:	3360      	adds	r3, #96	; 0x60
 80070b0:	443b      	add	r3, r7
 80070b2:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 80070b6:	b21b      	sxth	r3, r3
 80070b8:	4313      	orrs	r3, r2
 80070ba:	b21a      	sxth	r2, r3
 80070bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80070c0:	b292      	uxth	r2, r2
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	3360      	adds	r3, #96	; 0x60
 80070c6:	443b      	add	r3, r7
 80070c8:	f823 2c60 	strh.w	r2, [r3, #-96]
						bq_database_voltage.cell_voltage[cell_index] = ((Cell_ADC[i]*5*1000)/65535);
 80070cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80070d0:	005b      	lsls	r3, r3, #1
 80070d2:	3360      	adds	r3, #96	; 0x60
 80070d4:	443b      	add	r3, r7
 80070d6:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 80070da:	461a      	mov	r2, r3
 80070dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80070e0:	fb02 f303 	mul.w	r3, r2, r3
 80070e4:	4a3f      	ldr	r2, [pc, #252]	; (80071e4 <BQ_AFE_ReadVoltage+0x2f8>)
 80070e6:	fb82 1203 	smull	r1, r2, r2, r3
 80070ea:	441a      	add	r2, r3
 80070ec:	13d2      	asrs	r2, r2, #15
 80070ee:	17db      	asrs	r3, r3, #31
 80070f0:	1ad2      	subs	r2, r2, r3
 80070f2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80070f6:	b291      	uxth	r1, r2
 80070f8:	4a3b      	ldr	r2, [pc, #236]	; (80071e8 <BQ_AFE_ReadVoltage+0x2fc>)
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	4413      	add	r3, r2
 80070fe:	460a      	mov	r2, r1
 8007100:	80da      	strh	r2, [r3, #6]
						bq_database_eeprom.cell_voltage[cell_index] = bq_database_voltage.cell_voltage[cell_index];
 8007102:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007106:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800710a:	4937      	ldr	r1, [pc, #220]	; (80071e8 <BQ_AFE_ReadVoltage+0x2fc>)
 800710c:	005b      	lsls	r3, r3, #1
 800710e:	440b      	add	r3, r1
 8007110:	88d8      	ldrh	r0, [r3, #6]
 8007112:	4932      	ldr	r1, [pc, #200]	; (80071dc <BQ_AFE_ReadVoltage+0x2f0>)
 8007114:	1d13      	adds	r3, r2, #4
 8007116:	4602      	mov	r2, r0
 8007118:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
						sum = sum + bq_database_voltage.cell_voltage[cell_index];
 800711c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007120:	4a31      	ldr	r2, [pc, #196]	; (80071e8 <BQ_AFE_ReadVoltage+0x2fc>)
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	4413      	add	r3, r2
 8007126:	88db      	ldrh	r3, [r3, #6]
 8007128:	461a      	mov	r2, r3
 800712a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800712c:	4413      	add	r3, r2
 800712e:	653b      	str	r3, [r7, #80]	; 0x50
						mod_sum = mod_sum + bq_database_voltage.cell_voltage[cell_index];
 8007130:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007134:	4a2c      	ldr	r2, [pc, #176]	; (80071e8 <BQ_AFE_ReadVoltage+0x2fc>)
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	4413      	add	r3, r2
 800713a:	88db      	ldrh	r3, [r3, #6]
 800713c:	461a      	mov	r2, r3
 800713e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007140:	4413      	add	r3, r2
 8007142:	64fb      	str	r3, [r7, #76]	; 0x4c
						cell_index++;
 8007144:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007148:	3301      	adds	r3, #1
 800714a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
						cnt = cnt+2;
 800714e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007152:	3302      	adds	r3, #2
 8007154:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					for(uint8_t i=0; i<(NO_OF_CELLS_PER_STACK-1); i++)
 8007158:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800715c:	3301      	adds	r3, #1
 800715e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8007162:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007166:	2b0e      	cmp	r3, #14
 8007168:	d996      	bls.n	8007098 <BQ_AFE_ReadVoltage+0x1ac>
					}
					bq_database_voltage.module_voltage[Address] = mod_sum;
 800716a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800716e:	4a1e      	ldr	r2, [pc, #120]	; (80071e8 <BQ_AFE_ReadVoltage+0x2fc>)
 8007170:	335e      	adds	r3, #94	; 0x5e
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007178:	605a      	str	r2, [r3, #4]
					mod_sum = 0;
 800717a:	2300      	movs	r3, #0
 800717c:	64fb      	str	r3, [r7, #76]	; 0x4c
		for(uint8_t Address = 0; Address < NO_OF_DAISY_STACK; Address++)
 800717e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007182:	3301      	adds	r3, #1
 8007184:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8007188:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800718c:	2b07      	cmp	r3, #7
 800718e:	f67f aedf 	bls.w	8006f50 <BQ_AFE_ReadVoltage+0x64>
				}
			}
		}

		bq_database_voltage.avg_voltage = sum/BMS_NO_OF_CELLS;
 8007192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007194:	089b      	lsrs	r3, r3, #2
 8007196:	4a15      	ldr	r2, [pc, #84]	; (80071ec <BQ_AFE_ReadVoltage+0x300>)
 8007198:	fba2 2303 	umull	r2, r3, r2, r3
 800719c:	089b      	lsrs	r3, r3, #2
 800719e:	b29a      	uxth	r2, r3
 80071a0:	4b11      	ldr	r3, [pc, #68]	; (80071e8 <BQ_AFE_ReadVoltage+0x2fc>)
 80071a2:	f8a3 21a0 	strh.w	r2, [r3, #416]	; 0x1a0
		bq_database_voltage.sum_voltage = sum;
 80071a6:	4a10      	ldr	r2, [pc, #64]	; (80071e8 <BQ_AFE_ReadVoltage+0x2fc>)
 80071a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071aa:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		bq_database_eeprom.pack_voltage = sum;
 80071ae:	4a0b      	ldr	r2, [pc, #44]	; (80071dc <BQ_AFE_ReadVoltage+0x2f0>)
 80071b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b2:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c

		sum = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	653b      	str	r3, [r7, #80]	; 0x50

		HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80071ba:	2014      	movs	r0, #20
 80071bc:	f7fc f8a7 	bl	800330e <HAL_NVIC_EnableIRQ>

		maxV = bq_database_voltage.cell_voltage[0];
 80071c0:	4b09      	ldr	r3, [pc, #36]	; (80071e8 <BQ_AFE_ReadVoltage+0x2fc>)
 80071c2:	88db      	ldrh	r3, [r3, #6]
 80071c4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		minV = bq_database_voltage.cell_voltage[0];
 80071c8:	4b07      	ldr	r3, [pc, #28]	; (80071e8 <BQ_AFE_ReadVoltage+0x2fc>)
 80071ca:	88db      	ldrh	r3, [r3, #6]
 80071cc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

		for(uint8_t i=1; i<BMS_NO_OF_CELLS; i++)
 80071d0:	2301      	movs	r3, #1
 80071d2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80071d6:	e03c      	b.n	8007252 <BQ_AFE_ReadVoltage+0x366>
 80071d8:	20000f24 	.word	0x20000f24
 80071dc:	20000fb4 	.word	0x20000fb4
 80071e0:	ffff0000 	.word	0xffff0000
 80071e4:	80008001 	.word	0x80008001
 80071e8:	20000d5c 	.word	0x20000d5c
 80071ec:	21084211 	.word	0x21084211
		{
			if(maxV < bq_database_voltage.cell_voltage[i])
 80071f0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80071f4:	4a83      	ldr	r2, [pc, #524]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 80071f6:	005b      	lsls	r3, r3, #1
 80071f8:	4413      	add	r3, r2
 80071fa:	88db      	ldrh	r3, [r3, #6]
 80071fc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8007200:	429a      	cmp	r2, r3
 8007202:	d20b      	bcs.n	800721c <BQ_AFE_ReadVoltage+0x330>
			{
				maxV = bq_database_voltage.cell_voltage[i];
 8007204:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007208:	4a7e      	ldr	r2, [pc, #504]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	4413      	add	r3, r2
 800720e:	88db      	ldrh	r3, [r3, #6]
 8007210:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
				maxVIndex = i;
 8007214:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007218:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			}

			if(minV > bq_database_voltage.cell_voltage[i])
 800721c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007220:	4a78      	ldr	r2, [pc, #480]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	4413      	add	r3, r2
 8007226:	88db      	ldrh	r3, [r3, #6]
 8007228:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800722c:	429a      	cmp	r2, r3
 800722e:	d90b      	bls.n	8007248 <BQ_AFE_ReadVoltage+0x35c>
			{
				minV = bq_database_voltage.cell_voltage[i];
 8007230:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007234:	4a73      	ldr	r2, [pc, #460]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	4413      	add	r3, r2
 800723a:	88db      	ldrh	r3, [r3, #6]
 800723c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				minVIndex = i;
 8007240:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007244:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
		for(uint8_t i=1; i<BMS_NO_OF_CELLS; i++)
 8007248:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800724c:	3301      	adds	r3, #1
 800724e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8007252:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007256:	2b7b      	cmp	r3, #123	; 0x7b
 8007258:	d9ca      	bls.n	80071f0 <BQ_AFE_ReadVoltage+0x304>
			}
		}

		bq_database_voltage.max_voltage = maxV;
 800725a:	4a6a      	ldr	r2, [pc, #424]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 800725c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007260:	f8a2 319c 	strh.w	r3, [r2, #412]	; 0x19c
		bq_database_eeprom.max_voltage = maxV;
 8007264:	4a68      	ldr	r2, [pc, #416]	; (8007408 <BQ_AFE_ReadVoltage+0x51c>)
 8007266:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800726a:	f8a2 3186 	strh.w	r3, [r2, #390]	; 0x186
		bq_database_voltage.max_voltage_index = maxVIndex;
 800726e:	4a65      	ldr	r2, [pc, #404]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 8007270:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8007274:	f882 31c4 	strb.w	r3, [r2, #452]	; 0x1c4
		bq_database_eeprom.max_voltage_index = maxVIndex;
 8007278:	4a63      	ldr	r2, [pc, #396]	; (8007408 <BQ_AFE_ReadVoltage+0x51c>)
 800727a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800727e:	f882 3188 	strb.w	r3, [r2, #392]	; 0x188

		bq_database_voltage.min_voltage = minV;
 8007282:	4a60      	ldr	r2, [pc, #384]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 8007284:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007288:	f8a2 319e 	strh.w	r3, [r2, #414]	; 0x19e
		bq_database_eeprom.min_voltage = minV;
 800728c:	4a5e      	ldr	r2, [pc, #376]	; (8007408 <BQ_AFE_ReadVoltage+0x51c>)
 800728e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007292:	f8a2 318a 	strh.w	r3, [r2, #394]	; 0x18a
		bq_database_voltage.min_voltage_index = minVIndex;
 8007296:	4a5b      	ldr	r2, [pc, #364]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 8007298:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800729c:	f882 31c5 	strb.w	r3, [r2, #453]	; 0x1c5
		bq_database_eeprom.min_voltage_index = minVIndex;
 80072a0:	4a59      	ldr	r2, [pc, #356]	; (8007408 <BQ_AFE_ReadVoltage+0x51c>)
 80072a2:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80072a6:	f882 318c 	strb.w	r3, [r2, #396]	; 0x18c

		bq_database_voltage.diff_voltage = maxV - minV;
 80072aa:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80072ae:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	4b53      	ldr	r3, [pc, #332]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 80072b8:	f8a3 21a2 	strh.w	r2, [r3, #418]	; 0x1a2

		/* -------------------------------- */
		md_maxV = bq_database_voltage.module_voltage[0];
 80072bc:	4b51      	ldr	r3, [pc, #324]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 80072be:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80072c2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		md_minV = bq_database_voltage.module_voltage[0];
 80072c6:	4b4f      	ldr	r3, [pc, #316]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 80072c8:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80072cc:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

		for(uint8_t i=1; i<NO_OF_DAISY_STACK; i++)
 80072d0:	2301      	movs	r3, #1
 80072d2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 80072d6:	e034      	b.n	8007342 <BQ_AFE_ReadVoltage+0x456>
		{
			if(md_maxV < bq_database_voltage.module_voltage[i])
 80072d8:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 80072dc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80072e0:	4948      	ldr	r1, [pc, #288]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 80072e2:	335e      	adds	r3, #94	; 0x5e
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	440b      	add	r3, r1
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d20c      	bcs.n	8007308 <BQ_AFE_ReadVoltage+0x41c>
			{
				md_maxV = bq_database_voltage.module_voltage[i];
 80072ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80072f2:	4a44      	ldr	r2, [pc, #272]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 80072f4:	335e      	adds	r3, #94	; 0x5e
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	4413      	add	r3, r2
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
				md_maxVIndex = i;
 8007300:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007304:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if(md_minV > bq_database_voltage.module_voltage[i])
 8007308:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800730c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007310:	493c      	ldr	r1, [pc, #240]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 8007312:	335e      	adds	r3, #94	; 0x5e
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	440b      	add	r3, r1
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	429a      	cmp	r2, r3
 800731c:	d90c      	bls.n	8007338 <BQ_AFE_ReadVoltage+0x44c>
			{
				md_minV = bq_database_voltage.module_voltage[i];
 800731e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007322:	4a38      	ldr	r2, [pc, #224]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 8007324:	335e      	adds	r3, #94	; 0x5e
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				md_minVIndex = i;
 8007330:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007334:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
		for(uint8_t i=1; i<NO_OF_DAISY_STACK; i++)
 8007338:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800733c:	3301      	adds	r3, #1
 800733e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8007342:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007346:	2b07      	cmp	r3, #7
 8007348:	d9c6      	bls.n	80072d8 <BQ_AFE_ReadVoltage+0x3ec>
			}
		}
		bq_database_voltage.module_max_voltage = md_maxV;
 800734a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800734e:	4a2d      	ldr	r2, [pc, #180]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 8007350:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
		bq_database_voltage.module_max_voltage_index = md_maxVIndex;
 8007354:	4a2b      	ldr	r2, [pc, #172]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 8007356:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800735a:	f882 31b0 	strb.w	r3, [r2, #432]	; 0x1b0

		bq_database_voltage.module_min_voltage = md_minV;
 800735e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8007362:	4a28      	ldr	r2, [pc, #160]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 8007364:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac
		bq_database_voltage.module_min_voltage_index = md_minVIndex;
 8007368:	4a26      	ldr	r2, [pc, #152]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 800736a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800736e:	f882 31b1 	strb.w	r3, [r2, #433]	; 0x1b1

		bq_database_voltage.module_diff_voltage = md_maxV - md_minV;
 8007372:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8007376:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	461a      	mov	r2, r3
 800737e:	4b21      	ldr	r3, [pc, #132]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 8007380:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

		/**************CURRENT UPDATE TO EEPROM****************/
		bq_database_eeprom.current = bq_current_database.pack_current;
 8007384:	4b21      	ldr	r3, [pc, #132]	; (800740c <BQ_AFE_ReadVoltage+0x520>)
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	4a1f      	ldr	r2, [pc, #124]	; (8007408 <BQ_AFE_ReadVoltage+0x51c>)
 800738a:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174
		/******************************************************/

		DATABASE_WRITE((void*)(&bq_database_voltage), DATABASE_VOLTAGE);
 800738e:	2101      	movs	r1, #1
 8007390:	481c      	ldr	r0, [pc, #112]	; (8007404 <BQ_AFE_ReadVoltage+0x518>)
 8007392:	f002 fa87 	bl	80098a4 <DATABASE_WRITE>
		DATABASE_WRITE((void*)(&bq_database_eeprom), DATABASE_EEPROM);
 8007396:	210d      	movs	r1, #13
 8007398:	481b      	ldr	r0, [pc, #108]	; (8007408 <BQ_AFE_ReadVoltage+0x51c>)
 800739a:	f002 fa83 	bl	80098a4 <DATABASE_WRITE>
		DATABASE_WRITE((void*)(&bq_database_bms), DATABASE_BMS);
 800739e:	2110      	movs	r1, #16
 80073a0:	481b      	ldr	r0, [pc, #108]	; (8007410 <BQ_AFE_ReadVoltage+0x524>)
 80073a2:	f002 fa7f 	bl	80098a4 <DATABASE_WRITE>

		if(minV > 2500 && SOC_INIT == 0)
 80073a6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80073aa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d918      	bls.n	80073e4 <BQ_AFE_ReadVoltage+0x4f8>
 80073b2:	4b18      	ldr	r3, [pc, #96]	; (8007414 <BQ_AFE_ReadVoltage+0x528>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	f083 0301 	eor.w	r3, r3, #1
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d011      	beq.n	80073e4 <BQ_AFE_ReadVoltage+0x4f8>
		{
			scnt++;
 80073c0:	4b15      	ldr	r3, [pc, #84]	; (8007418 <BQ_AFE_ReadVoltage+0x52c>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	3301      	adds	r3, #1
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	4b13      	ldr	r3, [pc, #76]	; (8007418 <BQ_AFE_ReadVoltage+0x52c>)
 80073ca:	701a      	strb	r2, [r3, #0]
			if(scnt == 30)
 80073cc:	4b12      	ldr	r3, [pc, #72]	; (8007418 <BQ_AFE_ReadVoltage+0x52c>)
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	2b1e      	cmp	r3, #30
 80073d2:	d107      	bne.n	80073e4 <BQ_AFE_ReadVoltage+0x4f8>
			{
				SOC_Init();
 80073d4:	f000 fac4 	bl	8007960 <SOC_Init>
				SOC_INIT = 1;
 80073d8:	4b0e      	ldr	r3, [pc, #56]	; (8007414 <BQ_AFE_ReadVoltage+0x528>)
 80073da:	2201      	movs	r2, #1
 80073dc:	701a      	strb	r2, [r3, #0]
				scnt = 0;
 80073de:	4b0e      	ldr	r3, [pc, #56]	; (8007418 <BQ_AFE_ReadVoltage+0x52c>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	701a      	strb	r2, [r3, #0]
			}
		}
		if(SOC_INIT == 1)
 80073e4:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <BQ_AFE_ReadVoltage+0x528>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d004      	beq.n	80073f6 <BQ_AFE_ReadVoltage+0x50a>
		{
			SOC_Update();
 80073ec:	f000 fb50 	bl	8007a90 <SOC_Update>
			SOC_INIT = 1;
 80073f0:	4b08      	ldr	r3, [pc, #32]	; (8007414 <BQ_AFE_ReadVoltage+0x528>)
 80073f2:	2201      	movs	r2, #1
 80073f4:	701a      	strb	r2, [r3, #0]

//	FAULT_VoltageMonitor(&bq_database_voltage, &bq_database_bms);
//	TIMER_Delay_ms(2);
//	FAULT_CurrentMonitor(&bq_current_database, &bq_database_bms);

	GPIO_TogglePin(GPIO_PIN_LED);
 80073f6:	2032      	movs	r0, #50	; 0x32
 80073f8:	f002 f801 	bl	80093fe <GPIO_TogglePin>
}
 80073fc:	bf00      	nop
 80073fe:	3760      	adds	r7, #96	; 0x60
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	20000d5c 	.word	0x20000d5c
 8007408:	20000fb4 	.word	0x20000fb4
 800740c:	2000114c 	.word	0x2000114c
 8007410:	20000f24 	.word	0x20000f24
 8007414:	20001168 	.word	0x20001168
 8007418:	20001169 	.word	0x20001169
 800741c:	00000000 	.word	0x00000000

08007420 <BQ_AFE_ReadTemperature>:
 * @arguments
 * @retvar
 */

void BQ_AFE_ReadTemperature(void)
{
 8007420:	b590      	push	{r4, r7, lr}
 8007422:	b093      	sub	sp, #76	; 0x4c
 8007424:	af02      	add	r7, sp, #8
	uint8_t AFE_RESPONSE[(NO_OF_TEMPS_PER_STACK*2) + 3];
	uint8_t read = 0;
 8007426:	2300      	movs	r3, #0
 8007428:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint16_t Vout = 0;
 800742c:	2300      	movs	r3, #0
 800742e:	853b      	strh	r3, [r7, #40]	; 0x28
	uint16_t R_NTC = 0;
 8007430:	2300      	movs	r3, #0
 8007432:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint8_t temp_index = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint16_t Temp_ADC[NO_OF_TEMPS_PER_STACK];
	int16_t maxT,minT;
	uint8_t maxTIndex = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint8_t minTIndex = 0;
 8007440:	2300      	movs	r3, #0
 8007442:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint32_t sum = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	633b      	str	r3, [r7, #48]	; 0x30

	DATABASE_READ((void*)(&bq_database_bms), DATABASE_BMS);
 800744a:	2110      	movs	r1, #16
 800744c:	48bc      	ldr	r0, [pc, #752]	; (8007740 <BQ_AFE_ReadTemperature+0x320>)
 800744e:	f002 fa57 	bl	8009900 <DATABASE_READ>
	DATABASE_READ((void*)(&bq_database_eeprom), DATABASE_EEPROM);
 8007452:	210d      	movs	r1, #13
 8007454:	48bb      	ldr	r0, [pc, #748]	; (8007744 <BQ_AFE_ReadTemperature+0x324>)
 8007456:	f002 fa53 	bl	8009900 <DATABASE_READ>

	//Change to bms_state != BMS_IDLE
	if(bq_database_bms.bms_state != BMS_IDLE)
 800745a:	4bb9      	ldr	r3, [pc, #740]	; (8007740 <BQ_AFE_ReadTemperature+0x320>)
 800745c:	79db      	ldrb	r3, [r3, #7]
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 815a 	beq.w	8007718 <BQ_AFE_ReadTemperature+0x2f8>
	{

		for(uint8_t Address = 0; Address < NO_OF_DAISY_STACK; Address++)
 8007464:	2300      	movs	r3, #0
 8007466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800746a:	e0d6      	b.n	800761a <BQ_AFE_ReadTemperature+0x1fa>
		{
			AFE_WriteReg(Address, 2, 0X000000FF00, 5, FRMWRT_SGL_R);
 800746c:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8007470:	2300      	movs	r3, #0
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	2305      	movs	r3, #5
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800747c:	f04f 0300 	mov.w	r3, #0
 8007480:	2102      	movs	r1, #2
 8007482:	f002 fbff 	bl	8009c84 <AFE_WriteReg>
			read = AFE_WaitRespFrame(AFE_RESPONSE, 19,0);
 8007486:	f107 0314 	add.w	r3, r7, #20
 800748a:	2200      	movs	r2, #0
 800748c:	2113      	movs	r1, #19
 800748e:	4618      	mov	r0, r3
 8007490:	f002 fe84 	bl	800a19c <AFE_WaitRespFrame>
 8007494:	4603      	mov	r3, r0
 8007496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			if(read == 16)
 800749a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800749e:	2b10      	cmp	r3, #16
 80074a0:	f040 80b6 	bne.w	8007610 <BQ_AFE_ReadTemperature+0x1f0>
			{
				uint8_t cnt = 3;
 80074a4:	2303      	movs	r3, #3
 80074a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				for(uint8_t i=0; i<NO_OF_TEMPS_PER_STACK; i++)
 80074aa:	2300      	movs	r3, #0
 80074ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80074b0:	e0a9      	b.n	8007606 <BQ_AFE_ReadTemperature+0x1e6>
				{
					Temp_ADC[i] = (AFE_RESPONSE[cnt] << 8) | (AFE_RESPONSE[cnt+1] & 0XFF);
 80074b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80074b6:	3340      	adds	r3, #64	; 0x40
 80074b8:	443b      	add	r3, r7
 80074ba:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80074be:	021b      	lsls	r3, r3, #8
 80074c0:	b21a      	sxth	r2, r3
 80074c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80074c6:	3301      	adds	r3, #1
 80074c8:	3340      	adds	r3, #64	; 0x40
 80074ca:	443b      	add	r3, r7
 80074cc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80074d0:	b21b      	sxth	r3, r3
 80074d2:	4313      	orrs	r3, r2
 80074d4:	b21a      	sxth	r2, r3
 80074d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80074da:	b292      	uxth	r2, r2
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	3340      	adds	r3, #64	; 0x40
 80074e0:	443b      	add	r3, r7
 80074e2:	f823 2c3c 	strh.w	r2, [r3, #-60]
					Vout = ((Temp_ADC[i]*5345)/65535);
 80074e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	3340      	adds	r3, #64	; 0x40
 80074ee:	443b      	add	r3, r7
 80074f0:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80074f4:	461a      	mov	r2, r3
 80074f6:	f241 43e1 	movw	r3, #5345	; 0x14e1
 80074fa:	fb02 f303 	mul.w	r3, r2, r3
 80074fe:	4a92      	ldr	r2, [pc, #584]	; (8007748 <BQ_AFE_ReadTemperature+0x328>)
 8007500:	fb82 1203 	smull	r1, r2, r2, r3
 8007504:	441a      	add	r2, r3
 8007506:	13d2      	asrs	r2, r2, #15
 8007508:	17db      	asrs	r3, r3, #31
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	853b      	strh	r3, [r7, #40]	; 0x28
					if(Vout != 5345)
 800750e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007510:	f241 42e1 	movw	r2, #5345	; 0x14e1
 8007514:	4293      	cmp	r3, r2
 8007516:	d00b      	beq.n	8007530 <BQ_AFE_ReadTemperature+0x110>
						R_NTC = (Vout * 10000)/(5345 - Vout);
 8007518:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800751a:	f242 7210 	movw	r2, #10000	; 0x2710
 800751e:	fb03 f202 	mul.w	r2, r3, r2
 8007522:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007524:	f5c3 53a7 	rsb	r3, r3, #5344	; 0x14e0
 8007528:	3301      	adds	r3, #1
 800752a:	fb92 f3f3 	sdiv	r3, r2, r3
 800752e:	87fb      	strh	r3, [r7, #62]	; 0x3e
					bq_database_temperature.pack_temperature[temp_index] = ((298*3700)/(298*log((float)R_NTC/10000)+3700)) - 273;
 8007530:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753a:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800774c <BQ_AFE_ReadTemperature+0x32c>
 800753e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007542:	ee16 0a90 	vmov	r0, s13
 8007546:	f7f8 ffa7 	bl	8000498 <__aeabi_f2d>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	ec43 2b10 	vmov	d0, r2, r3
 8007552:	f003 fe45 	bl	800b1e0 <log>
 8007556:	ec51 0b10 	vmov	r0, r1, d0
 800755a:	a371      	add	r3, pc, #452	; (adr r3, 8007720 <BQ_AFE_ReadTemperature+0x300>)
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	f7f8 fff2 	bl	8000548 <__aeabi_dmul>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4610      	mov	r0, r2
 800756a:	4619      	mov	r1, r3
 800756c:	a36e      	add	r3, pc, #440	; (adr r3, 8007728 <BQ_AFE_ReadTemperature+0x308>)
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	f7f8 fe33 	bl	80001dc <__adddf3>
 8007576:	4602      	mov	r2, r0
 8007578:	460b      	mov	r3, r1
 800757a:	a16d      	add	r1, pc, #436	; (adr r1, 8007730 <BQ_AFE_ReadTemperature+0x310>)
 800757c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007580:	f7f9 f90c 	bl	800079c <__aeabi_ddiv>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4610      	mov	r0, r2
 800758a:	4619      	mov	r1, r3
 800758c:	a36a      	add	r3, pc, #424	; (adr r3, 8007738 <BQ_AFE_ReadTemperature+0x318>)
 800758e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007592:	f7f8 fe21 	bl	80001d8 <__aeabi_dsub>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	f897 403d 	ldrb.w	r4, [r7, #61]	; 0x3d
 800759e:	4610      	mov	r0, r2
 80075a0:	4619      	mov	r1, r3
 80075a2:	f7f9 fa81 	bl	8000aa8 <__aeabi_d2iz>
 80075a6:	4603      	mov	r3, r0
 80075a8:	b219      	sxth	r1, r3
 80075aa:	4a69      	ldr	r2, [pc, #420]	; (8007750 <BQ_AFE_ReadTemperature+0x330>)
 80075ac:	0063      	lsls	r3, r4, #1
 80075ae:	4413      	add	r3, r2
 80075b0:	460a      	mov	r2, r1
 80075b2:	80da      	strh	r2, [r3, #6]
					bq_database_eeprom.temperature[temp_index] = bq_database_temperature.pack_temperature[temp_index];
 80075b4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80075b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80075bc:	4964      	ldr	r1, [pc, #400]	; (8007750 <BQ_AFE_ReadTemperature+0x330>)
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	440b      	add	r3, r1
 80075c2:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80075c6:	495f      	ldr	r1, [pc, #380]	; (8007744 <BQ_AFE_ReadTemperature+0x324>)
 80075c8:	f102 0380 	add.w	r3, r2, #128	; 0x80
 80075cc:	4602      	mov	r2, r0
 80075ce:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
					sum = sum + bq_database_temperature.pack_temperature[temp_index];
 80075d2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80075d6:	4a5e      	ldr	r2, [pc, #376]	; (8007750 <BQ_AFE_ReadTemperature+0x330>)
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	4413      	add	r3, r2
 80075dc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80075e0:	461a      	mov	r2, r3
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	4413      	add	r3, r2
 80075e6:	633b      	str	r3, [r7, #48]	; 0x30
					temp_index++;
 80075e8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80075ec:	3301      	adds	r3, #1
 80075ee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
					cnt = cnt+2;
 80075f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80075f6:	3302      	adds	r3, #2
 80075f8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				for(uint8_t i=0; i<NO_OF_TEMPS_PER_STACK; i++)
 80075fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8007600:	3301      	adds	r3, #1
 8007602:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8007606:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800760a:	2b06      	cmp	r3, #6
 800760c:	f67f af51 	bls.w	80074b2 <BQ_AFE_ReadTemperature+0x92>
		for(uint8_t Address = 0; Address < NO_OF_DAISY_STACK; Address++)
 8007610:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007614:	3301      	adds	r3, #1
 8007616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800761a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800761e:	2b07      	cmp	r3, #7
 8007620:	f67f af24 	bls.w	800746c <BQ_AFE_ReadTemperature+0x4c>
				}
			}
		}

		bq_database_temperature.avg_temperature = sum/BMS_NO_OF_TEMPS;
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	08db      	lsrs	r3, r3, #3
 8007628:	4a4a      	ldr	r2, [pc, #296]	; (8007754 <BQ_AFE_ReadTemperature+0x334>)
 800762a:	fba2 2303 	umull	r2, r3, r2, r3
 800762e:	b21a      	sxth	r2, r3
 8007630:	4b47      	ldr	r3, [pc, #284]	; (8007750 <BQ_AFE_ReadTemperature+0x330>)
 8007632:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

		sum = 0;
 8007636:	2300      	movs	r3, #0
 8007638:	633b      	str	r3, [r7, #48]	; 0x30

		maxT = bq_database_temperature.pack_temperature[0];
 800763a:	4b45      	ldr	r3, [pc, #276]	; (8007750 <BQ_AFE_ReadTemperature+0x330>)
 800763c:	88db      	ldrh	r3, [r3, #6]
 800763e:	877b      	strh	r3, [r7, #58]	; 0x3a
		minT = bq_database_temperature.pack_temperature[0];
 8007640:	4b43      	ldr	r3, [pc, #268]	; (8007750 <BQ_AFE_ReadTemperature+0x330>)
 8007642:	88db      	ldrh	r3, [r3, #6]
 8007644:	873b      	strh	r3, [r7, #56]	; 0x38

		for(uint8_t i=1; i<BMS_NO_OF_TEMPS; i++)
 8007646:	2301      	movs	r3, #1
 8007648:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800764c:	e030      	b.n	80076b0 <BQ_AFE_ReadTemperature+0x290>
		{
			if(maxT < bq_database_temperature.pack_temperature[i])
 800764e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007652:	4a3f      	ldr	r2, [pc, #252]	; (8007750 <BQ_AFE_ReadTemperature+0x330>)
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	4413      	add	r3, r2
 8007658:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800765c:	f9b7 203a 	ldrsh.w	r2, [r7, #58]	; 0x3a
 8007660:	429a      	cmp	r2, r3
 8007662:	da0a      	bge.n	800767a <BQ_AFE_ReadTemperature+0x25a>
			{
				maxT = bq_database_temperature.pack_temperature[i];
 8007664:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007668:	4a39      	ldr	r2, [pc, #228]	; (8007750 <BQ_AFE_ReadTemperature+0x330>)
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	4413      	add	r3, r2
 800766e:	88db      	ldrh	r3, [r3, #6]
 8007670:	877b      	strh	r3, [r7, #58]	; 0x3a
				maxTIndex = i;
 8007672:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007676:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}

			if(minT > bq_database_temperature.pack_temperature[i])
 800767a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800767e:	4a34      	ldr	r2, [pc, #208]	; (8007750 <BQ_AFE_ReadTemperature+0x330>)
 8007680:	005b      	lsls	r3, r3, #1
 8007682:	4413      	add	r3, r2
 8007684:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007688:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 800768c:	429a      	cmp	r2, r3
 800768e:	dd0a      	ble.n	80076a6 <BQ_AFE_ReadTemperature+0x286>
			{
				minT = bq_database_temperature.pack_temperature[i];
 8007690:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007694:	4a2e      	ldr	r2, [pc, #184]	; (8007750 <BQ_AFE_ReadTemperature+0x330>)
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	4413      	add	r3, r2
 800769a:	88db      	ldrh	r3, [r3, #6]
 800769c:	873b      	strh	r3, [r7, #56]	; 0x38
				minTIndex = i;
 800769e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		for(uint8_t i=1; i<BMS_NO_OF_TEMPS; i++)
 80076a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076aa:	3301      	adds	r3, #1
 80076ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80076b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80076b4:	2b37      	cmp	r3, #55	; 0x37
 80076b6:	d9ca      	bls.n	800764e <BQ_AFE_ReadTemperature+0x22e>
			}
		}

		bq_database_temperature.max_temperature = maxT;
 80076b8:	4a25      	ldr	r2, [pc, #148]	; (8007750 <BQ_AFE_ReadTemperature+0x330>)
 80076ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80076bc:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
		bq_database_eeprom.max_temperature = maxT;
 80076c0:	4a20      	ldr	r2, [pc, #128]	; (8007744 <BQ_AFE_ReadTemperature+0x324>)
 80076c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80076c4:	f8a2 318e 	strh.w	r3, [r2, #398]	; 0x18e
		bq_database_temperature.max_temperature_index = maxTIndex;
 80076c8:	4a21      	ldr	r2, [pc, #132]	; (8007750 <BQ_AFE_ReadTemperature+0x330>)
 80076ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076ce:	f882 307e 	strb.w	r3, [r2, #126]	; 0x7e
		bq_database_eeprom.max_temperature_index = maxTIndex;
 80076d2:	4a1c      	ldr	r2, [pc, #112]	; (8007744 <BQ_AFE_ReadTemperature+0x324>)
 80076d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076d8:	f882 3190 	strb.w	r3, [r2, #400]	; 0x190

		bq_database_temperature.min_temperature = minT;
 80076dc:	4a1c      	ldr	r2, [pc, #112]	; (8007750 <BQ_AFE_ReadTemperature+0x330>)
 80076de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80076e0:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
		bq_database_eeprom.min_temperature = minT;
 80076e4:	4a17      	ldr	r2, [pc, #92]	; (8007744 <BQ_AFE_ReadTemperature+0x324>)
 80076e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80076e8:	f8a2 3192 	strh.w	r3, [r2, #402]	; 0x192
		bq_database_temperature.min_temperature_index = minTIndex;
 80076ec:	4a18      	ldr	r2, [pc, #96]	; (8007750 <BQ_AFE_ReadTemperature+0x330>)
 80076ee:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80076f2:	f882 307f 	strb.w	r3, [r2, #127]	; 0x7f
		bq_database_eeprom.min_temperature_index = minTIndex;
 80076f6:	4a13      	ldr	r2, [pc, #76]	; (8007744 <BQ_AFE_ReadTemperature+0x324>)
 80076f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80076fc:	f882 3194 	strb.w	r3, [r2, #404]	; 0x194

		DATABASE_WRITE((void*)(&bq_database_temperature), DATABASE_TEMPERATURE);
 8007700:	2102      	movs	r1, #2
 8007702:	4813      	ldr	r0, [pc, #76]	; (8007750 <BQ_AFE_ReadTemperature+0x330>)
 8007704:	f002 f8ce 	bl	80098a4 <DATABASE_WRITE>
		DATABASE_WRITE((void*)(&bq_database_eeprom), DATABASE_EEPROM);
 8007708:	210d      	movs	r1, #13
 800770a:	480e      	ldr	r0, [pc, #56]	; (8007744 <BQ_AFE_ReadTemperature+0x324>)
 800770c:	f002 f8ca 	bl	80098a4 <DATABASE_WRITE>
		DATABASE_WRITE((void*)(&bq_database_bms), DATABASE_BMS);
 8007710:	2110      	movs	r1, #16
 8007712:	480b      	ldr	r0, [pc, #44]	; (8007740 <BQ_AFE_ReadTemperature+0x320>)
 8007714:	f002 f8c6 	bl	80098a4 <DATABASE_WRITE>
	}

//	FAULT_TemperatureMonitor(&bq_database_temperature, &bq_database_bms);

//	GPIO_TogglePin(GPIO_PIN_LED2);
}
 8007718:	bf00      	nop
 800771a:	3744      	adds	r7, #68	; 0x44
 800771c:	46bd      	mov	sp, r7
 800771e:	bd90      	pop	{r4, r7, pc}
 8007720:	00000000 	.word	0x00000000
 8007724:	4072a000 	.word	0x4072a000
 8007728:	00000000 	.word	0x00000000
 800772c:	40ace800 	.word	0x40ace800
 8007730:	00000000 	.word	0x00000000
 8007734:	4130d308 	.word	0x4130d308
 8007738:	00000000 	.word	0x00000000
 800773c:	40711000 	.word	0x40711000
 8007740:	20000f24 	.word	0x20000f24
 8007744:	20000fb4 	.word	0x20000fb4
 8007748:	80008001 	.word	0x80008001
 800774c:	461c4000 	.word	0x461c4000
 8007750:	20000f34 	.word	0x20000f34
 8007754:	24924925 	.word	0x24924925

08007758 <BQ_AFE_GETState>:
	}

}

void BQ_AFE_GETState(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
	DATABASE_READ((void*)(&bq_database_bms), DATABASE_BMS);
 800775c:	2110      	movs	r1, #16
 800775e:	4813      	ldr	r0, [pc, #76]	; (80077ac <BQ_AFE_GETState+0x54>)
 8007760:	f002 f8ce 	bl	8009900 <DATABASE_READ>
	DATABASE_READ((void*)(&bq_current_database), DATABASE_CURRENT);
 8007764:	2103      	movs	r1, #3
 8007766:	4812      	ldr	r0, [pc, #72]	; (80077b0 <BQ_AFE_GETState+0x58>)
 8007768:	f002 f8ca 	bl	8009900 <DATABASE_READ>
	if(bq_database_bms.bms_state != BMS_ERROR)
 800776c:	4b0f      	ldr	r3, [pc, #60]	; (80077ac <BQ_AFE_GETState+0x54>)
 800776e:	79db      	ldrb	r3, [r3, #7]
 8007770:	2b04      	cmp	r3, #4
 8007772:	d014      	beq.n	800779e <BQ_AFE_GETState+0x46>
	{
		if(bq_current_database.pack_current < -4000)
 8007774:	4b0e      	ldr	r3, [pc, #56]	; (80077b0 <BQ_AFE_GETState+0x58>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f513 6f7a 	cmn.w	r3, #4000	; 0xfa0
 800777c:	da03      	bge.n	8007786 <BQ_AFE_GETState+0x2e>
		{
			bq_database_bms.bms_state = BMS_DISCHARGE;
 800777e:	4b0b      	ldr	r3, [pc, #44]	; (80077ac <BQ_AFE_GETState+0x54>)
 8007780:	2203      	movs	r2, #3
 8007782:	71da      	strb	r2, [r3, #7]
 8007784:	e00b      	b.n	800779e <BQ_AFE_GETState+0x46>
		}
		else if(bq_current_database.pack_current > 4000)
 8007786:	4b0a      	ldr	r3, [pc, #40]	; (80077b0 <BQ_AFE_GETState+0x58>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800778e:	dd03      	ble.n	8007798 <BQ_AFE_GETState+0x40>
		{
			bq_database_bms.bms_state = BMS_CHARGE;
 8007790:	4b06      	ldr	r3, [pc, #24]	; (80077ac <BQ_AFE_GETState+0x54>)
 8007792:	2202      	movs	r2, #2
 8007794:	71da      	strb	r2, [r3, #7]
 8007796:	e002      	b.n	800779e <BQ_AFE_GETState+0x46>
		}
		else
		{
			bq_database_bms.bms_state = BMS_STANDBY;
 8007798:	4b04      	ldr	r3, [pc, #16]	; (80077ac <BQ_AFE_GETState+0x54>)
 800779a:	2201      	movs	r2, #1
 800779c:	71da      	strb	r2, [r3, #7]
		}
	}

	DATABASE_WRITE((void*)(&bq_database_bms), DATABASE_BMS);
 800779e:	2110      	movs	r1, #16
 80077a0:	4802      	ldr	r0, [pc, #8]	; (80077ac <BQ_AFE_GETState+0x54>)
 80077a2:	f002 f87f 	bl	80098a4 <DATABASE_WRITE>
}
 80077a6:	bf00      	nop
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	20000f24 	.word	0x20000f24
 80077b0:	2000114c 	.word	0x2000114c

080077b4 <FAULT_SOCMonitor>:

	FAULTMANAGER_Current(database);
}

void FAULT_SOCMonitor(DATABASE_SOC_s *database, DATABASE_BMS_s *database_bms)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
	if(database_bms->bms_state != BMS_IDLE)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	79db      	ldrb	r3, [r3, #7]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 80b1 	beq.w	800792a <FAULT_SOCMonitor+0x176>
	{
		if(database_bms->bms_state != BMS_DISCHARGE)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	79db      	ldrb	r3, [r3, #7]
 80077cc:	2b03      	cmp	r3, #3
 80077ce:	d054      	beq.n	800787a <FAULT_SOCMonitor+0xc6>
		{
			DATABASE_READ((void*)(&fmon_database_error), DATABASE_ERROR);
 80077d0:	210c      	movs	r1, #12
 80077d2:	4858      	ldr	r0, [pc, #352]	; (8007934 <FAULT_SOCMonitor+0x180>)
 80077d4:	f002 f894 	bl	8009900 <DATABASE_READ>

			/* SOC_High */
			if(database->soc > SOCH_ROL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	799a      	ldrb	r2, [r3, #6]
 80077dc:	4b56      	ldr	r3, [pc, #344]	; (8007938 <FAULT_SOCMonitor+0x184>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d93e      	bls.n	8007862 <FAULT_SOCMonitor+0xae>
			{
				fmon_database_error.error_counter_ROL.soch_counter++;
 80077e4:	4b53      	ldr	r3, [pc, #332]	; (8007934 <FAULT_SOCMonitor+0x180>)
 80077e6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80077ea:	3301      	adds	r3, #1
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	4b51      	ldr	r3, [pc, #324]	; (8007934 <FAULT_SOCMonitor+0x180>)
 80077f0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
				if(fmon_database_error.error_counter_ROL.soch_counter > (SOCH_ROL_DELAY/SOC_SAMPLING))
 80077f4:	4b4f      	ldr	r3, [pc, #316]	; (8007934 <FAULT_SOCMonitor+0x180>)
 80077f6:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	4b4f      	ldr	r3, [pc, #316]	; (800793c <FAULT_SOCMonitor+0x188>)
 80077fe:	8819      	ldrh	r1, [r3, #0]
 8007800:	4b4f      	ldr	r3, [pc, #316]	; (8007940 <FAULT_SOCMonitor+0x18c>)
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	fbb1 f3f3 	udiv	r3, r1, r3
 8007808:	b29b      	uxth	r3, r3
 800780a:	429a      	cmp	r2, r3
 800780c:	d905      	bls.n	800781a <FAULT_SOCMonitor+0x66>
				{
					fmon_database_error.error_flag_ROL.soc_high = FAULT;
 800780e:	4b49      	ldr	r3, [pc, #292]	; (8007934 <FAULT_SOCMonitor+0x180>)
 8007810:	2201      	movs	r2, #1
 8007812:	745a      	strb	r2, [r3, #17]
					WARNING_ARRAY[FAULT_SOC_HIGH] = FAULT;
 8007814:	4b4b      	ldr	r3, [pc, #300]	; (8007944 <FAULT_SOCMonitor+0x190>)
 8007816:	2201      	movs	r2, #1
 8007818:	72da      	strb	r2, [r3, #11]
				}

				if(database->soc >= SOCH_MOL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	799a      	ldrb	r2, [r3, #6]
 800781e:	4b4a      	ldr	r3, [pc, #296]	; (8007948 <FAULT_SOCMonitor+0x194>)
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d318      	bcc.n	8007858 <FAULT_SOCMonitor+0xa4>
				{
					fmon_database_error.error_counter_MOL.soch_counter++;
 8007826:	4b43      	ldr	r3, [pc, #268]	; (8007934 <FAULT_SOCMonitor+0x180>)
 8007828:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800782c:	3301      	adds	r3, #1
 800782e:	b2da      	uxtb	r2, r3
 8007830:	4b40      	ldr	r3, [pc, #256]	; (8007934 <FAULT_SOCMonitor+0x180>)
 8007832:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
					if(fmon_database_error.error_counter_MOL.soch_counter > (SOCH_MOL_DELAY/SOC_SAMPLING))
 8007836:	4b3f      	ldr	r3, [pc, #252]	; (8007934 <FAULT_SOCMonitor+0x180>)
 8007838:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800783c:	b29a      	uxth	r2, r3
 800783e:	4b43      	ldr	r3, [pc, #268]	; (800794c <FAULT_SOCMonitor+0x198>)
 8007840:	8819      	ldrh	r1, [r3, #0]
 8007842:	4b3f      	ldr	r3, [pc, #252]	; (8007940 <FAULT_SOCMonitor+0x18c>)
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	fbb1 f3f3 	udiv	r3, r1, r3
 800784a:	b29b      	uxth	r3, r3
 800784c:	429a      	cmp	r2, r3
 800784e:	d910      	bls.n	8007872 <FAULT_SOCMonitor+0xbe>
					{
						fmon_database_error.error_flag_MOL.soc_high = FAULT;
 8007850:	4b38      	ldr	r3, [pc, #224]	; (8007934 <FAULT_SOCMonitor+0x180>)
 8007852:	2201      	movs	r2, #1
 8007854:	779a      	strb	r2, [r3, #30]
 8007856:	e00c      	b.n	8007872 <FAULT_SOCMonitor+0xbe>
					}
				}
				else
				{
					fmon_database_error.error_counter_MOL.soch_counter = 0;
 8007858:	4b36      	ldr	r3, [pc, #216]	; (8007934 <FAULT_SOCMonitor+0x180>)
 800785a:	2200      	movs	r2, #0
 800785c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8007860:	e007      	b.n	8007872 <FAULT_SOCMonitor+0xbe>
				}

			}
			else
			{
				fmon_database_error.error_counter_ROL.soch_counter = 0;
 8007862:	4b34      	ldr	r3, [pc, #208]	; (8007934 <FAULT_SOCMonitor+0x180>)
 8007864:	2200      	movs	r2, #0
 8007866:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
				fmon_database_error.error_counter_MOL.soch_counter = 0;
 800786a:	4b32      	ldr	r3, [pc, #200]	; (8007934 <FAULT_SOCMonitor+0x180>)
 800786c:	2200      	movs	r2, #0
 800786e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
			}

			DATABASE_WRITE((void*)(&fmon_database_error), DATABASE_ERROR);
 8007872:	210c      	movs	r1, #12
 8007874:	482f      	ldr	r0, [pc, #188]	; (8007934 <FAULT_SOCMonitor+0x180>)
 8007876:	f002 f815 	bl	80098a4 <DATABASE_WRITE>
		}

		if(database_bms->bms_state != BMS_CHARGE)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	79db      	ldrb	r3, [r3, #7]
 800787e:	2b02      	cmp	r3, #2
 8007880:	d050      	beq.n	8007924 <FAULT_SOCMonitor+0x170>
		{
			/* SOC_High */
			if(database->soc < SOCL_ROL)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	799a      	ldrb	r2, [r3, #6]
 8007886:	4b32      	ldr	r3, [pc, #200]	; (8007950 <FAULT_SOCMonitor+0x19c>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	429a      	cmp	r2, r3
 800788c:	d23e      	bcs.n	800790c <FAULT_SOCMonitor+0x158>
			{
				fmon_database_error.error_counter_ROL.socl_counter++;
 800788e:	4b29      	ldr	r3, [pc, #164]	; (8007934 <FAULT_SOCMonitor+0x180>)
 8007890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007894:	3301      	adds	r3, #1
 8007896:	b2da      	uxtb	r2, r3
 8007898:	4b26      	ldr	r3, [pc, #152]	; (8007934 <FAULT_SOCMonitor+0x180>)
 800789a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				if(fmon_database_error.error_counter_ROL.socl_counter > (SOCL_ROL_DELAY/SOC_SAMPLING))
 800789e:	4b25      	ldr	r3, [pc, #148]	; (8007934 <FAULT_SOCMonitor+0x180>)
 80078a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	4b2b      	ldr	r3, [pc, #172]	; (8007954 <FAULT_SOCMonitor+0x1a0>)
 80078a8:	8819      	ldrh	r1, [r3, #0]
 80078aa:	4b25      	ldr	r3, [pc, #148]	; (8007940 <FAULT_SOCMonitor+0x18c>)
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d905      	bls.n	80078c4 <FAULT_SOCMonitor+0x110>
				{
					fmon_database_error.error_flag_ROL.soc_low = FAULT;
 80078b8:	4b1e      	ldr	r3, [pc, #120]	; (8007934 <FAULT_SOCMonitor+0x180>)
 80078ba:	2201      	movs	r2, #1
 80078bc:	749a      	strb	r2, [r3, #18]
					WARNING_ARRAY[FAULT_SOC_LOW] = FAULT;
 80078be:	4b21      	ldr	r3, [pc, #132]	; (8007944 <FAULT_SOCMonitor+0x190>)
 80078c0:	2201      	movs	r2, #1
 80078c2:	731a      	strb	r2, [r3, #12]
				}

				if(database->soc <= SOCL_MOL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	799a      	ldrb	r2, [r3, #6]
 80078c8:	4b23      	ldr	r3, [pc, #140]	; (8007958 <FAULT_SOCMonitor+0x1a4>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d818      	bhi.n	8007902 <FAULT_SOCMonitor+0x14e>
				{
					fmon_database_error.error_counter_MOL.socl_counter++;
 80078d0:	4b18      	ldr	r3, [pc, #96]	; (8007934 <FAULT_SOCMonitor+0x180>)
 80078d2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80078d6:	3301      	adds	r3, #1
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	4b16      	ldr	r3, [pc, #88]	; (8007934 <FAULT_SOCMonitor+0x180>)
 80078dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
					if(fmon_database_error.error_counter_MOL.socl_counter > (SOCL_MOL_DELAY/SOC_SAMPLING))
 80078e0:	4b14      	ldr	r3, [pc, #80]	; (8007934 <FAULT_SOCMonitor+0x180>)
 80078e2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	4b1c      	ldr	r3, [pc, #112]	; (800795c <FAULT_SOCMonitor+0x1a8>)
 80078ea:	8819      	ldrh	r1, [r3, #0]
 80078ec:	4b14      	ldr	r3, [pc, #80]	; (8007940 <FAULT_SOCMonitor+0x18c>)
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d910      	bls.n	800791c <FAULT_SOCMonitor+0x168>
					{
						fmon_database_error.error_flag_MOL.soc_low = FAULT;
 80078fa:	4b0e      	ldr	r3, [pc, #56]	; (8007934 <FAULT_SOCMonitor+0x180>)
 80078fc:	2201      	movs	r2, #1
 80078fe:	77da      	strb	r2, [r3, #31]
 8007900:	e00c      	b.n	800791c <FAULT_SOCMonitor+0x168>
					}
				}
				else
				{
					fmon_database_error.error_counter_MOL.socl_counter = 0;
 8007902:	4b0c      	ldr	r3, [pc, #48]	; (8007934 <FAULT_SOCMonitor+0x180>)
 8007904:	2200      	movs	r2, #0
 8007906:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 800790a:	e007      	b.n	800791c <FAULT_SOCMonitor+0x168>
				}
			}
			else
			{
				fmon_database_error.error_counter_ROL.socl_counter = 0;
 800790c:	4b09      	ldr	r3, [pc, #36]	; (8007934 <FAULT_SOCMonitor+0x180>)
 800790e:	2200      	movs	r2, #0
 8007910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
				fmon_database_error.error_counter_MOL.socl_counter = 0;
 8007914:	4b07      	ldr	r3, [pc, #28]	; (8007934 <FAULT_SOCMonitor+0x180>)
 8007916:	2200      	movs	r2, #0
 8007918:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			}

			DATABASE_WRITE((void*)(&fmon_database_error), DATABASE_ERROR);
 800791c:	210c      	movs	r1, #12
 800791e:	4805      	ldr	r0, [pc, #20]	; (8007934 <FAULT_SOCMonitor+0x180>)
 8007920:	f001 ffc0 	bl	80098a4 <DATABASE_WRITE>
		}

		FAULTMANAGER_SOC(database);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f002 f847 	bl	80099b8 <FAULTMANAGER_SOC>
	}
}
 800792a:	bf00      	nop
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	2000116c 	.word	0x2000116c
 8007938:	20000014 	.word	0x20000014
 800793c:	20000016 	.word	0x20000016
 8007940:	2000000a 	.word	0x2000000a
 8007944:	200011ec 	.word	0x200011ec
 8007948:	20000015 	.word	0x20000015
 800794c:	20000018 	.word	0x20000018
 8007950:	20000020 	.word	0x20000020
 8007954:	20000022 	.word	0x20000022
 8007958:	20000021 	.word	0x20000021
 800795c:	20000024 	.word	0x20000024

08007960 <SOC_Init>:
 * @arguments
 * @retvar
 */

void SOC_Init(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	f5ad 7d5a 	sub.w	sp, sp, #872	; 0x368
 8007966:	af00      	add	r7, sp, #0
	uint8_t SOC_INITIAL  = 0;
 8007968:	2300      	movs	r3, #0
 800796a:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367
	DATABASE_VOLTAGE_s	soc_database_voltage = {0};
 800796e:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8007972:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8007976:	4618      	mov	r0, r3
 8007978:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
 800797c:	461a      	mov	r2, r3
 800797e:	2100      	movs	r1, #0
 8007980:	f003 fc24 	bl	800b1cc <memset>
	DATABASE_EEPROM_s readEEPROM_database = {0};
 8007984:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8007988:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 800798c:	4618      	mov	r0, r3
 800798e:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8007992:	461a      	mov	r2, r3
 8007994:	2100      	movs	r1, #0
 8007996:	f003 fc19 	bl	800b1cc <memset>

	readEEPROM_database = EEPROM_ReadAll();
 800799a:	f507 735a 	add.w	r3, r7, #872	; 0x368
 800799e:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 80079a2:	4618      	mov	r0, r3
 80079a4:	f003 fa80 	bl	800aea8 <EEPROM_ReadAll>

//	BQ_AFE_ReadVoltage();

	DATABASE_READ((void*)(&soc_database_bms), DATABASE_BMS);
 80079a8:	2110      	movs	r1, #16
 80079aa:	4834      	ldr	r0, [pc, #208]	; (8007a7c <SOC_Init+0x11c>)
 80079ac:	f001 ffa8 	bl	8009900 <DATABASE_READ>
	DATABASE_READ((void*)(&soc_database_voltage), DATABASE_VOLTAGE);
 80079b0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80079b4:	2101      	movs	r1, #1
 80079b6:	4618      	mov	r0, r3
 80079b8:	f001 ffa2 	bl	8009900 <DATABASE_READ>
	if(soc_database_bms.bms_state == BMS_STANDBY)
 80079bc:	4b2f      	ldr	r3, [pc, #188]	; (8007a7c <SOC_Init+0x11c>)
 80079be:	79db      	ldrb	r3, [r3, #7]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d156      	bne.n	8007a72 <SOC_Init+0x112>
	{
		DATABASE_READ((void*)(&soc_database), DATABASE_SOC);
 80079c4:	2104      	movs	r1, #4
 80079c6:	482e      	ldr	r0, [pc, #184]	; (8007a80 <SOC_Init+0x120>)
 80079c8:	f001 ff9a 	bl	8009900 <DATABASE_READ>
		DATABASE_READ((void*)(&soc_database_eeprom), DATABASE_EEPROM);
 80079cc:	210d      	movs	r1, #13
 80079ce:	482d      	ldr	r0, [pc, #180]	; (8007a84 <SOC_Init+0x124>)
 80079d0:	f001 ff96 	bl	8009900 <DATABASE_READ>

		SOC_INITIAL = calcInitialSOC(soc_database_voltage.avg_voltage);
 80079d4:	f507 735a 	add.w	r3, r7, #872	; 0x368
 80079d8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80079dc:	f8b3 31a0 	ldrh.w	r3, [r3, #416]	; 0x1a0
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 f9b9 	bl	8007d58 <calcInitialSOC>
 80079e6:	4603      	mov	r3, r0
 80079e8:	f887 3367 	strb.w	r3, [r7, #871]	; 0x367

		soc_database.soc = SOC_INITIAL;
 80079ec:	4a24      	ldr	r2, [pc, #144]	; (8007a80 <SOC_Init+0x120>)
 80079ee:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 80079f2:	7193      	strb	r3, [r2, #6]
		soc_database.max_soc = SOC_INITIAL;
 80079f4:	4a22      	ldr	r2, [pc, #136]	; (8007a80 <SOC_Init+0x120>)
 80079f6:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 80079fa:	71d3      	strb	r3, [r2, #7]
		soc_database.min_soc = SOC_INITIAL;
 80079fc:	4a20      	ldr	r2, [pc, #128]	; (8007a80 <SOC_Init+0x120>)
 80079fe:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 8007a02:	7213      	strb	r3, [r2, #8]
		soc_database.cycle = 0;
 8007a04:	4b1e      	ldr	r3, [pc, #120]	; (8007a80 <SOC_Init+0x120>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	815a      	strh	r2, [r3, #10]
		calc_soc = ((float)SOC_INITIAL/100);
 8007a0a:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 8007a0e:	ee07 3a90 	vmov	s15, r3
 8007a12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a16:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8007a88 <SOC_Init+0x128>
 8007a1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a1e:	4b1b      	ldr	r3, [pc, #108]	; (8007a8c <SOC_Init+0x12c>)
 8007a20:	edc3 7a00 	vstr	s15, [r3]

		if(readEEPROM_database.soc != 0)
 8007a24:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8007a28:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8007a2c:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00d      	beq.n	8007a50 <SOC_Init+0xf0>
		{
			soc_database.soc = readEEPROM_database.soc;
 8007a34:	f507 735a 	add.w	r3, r7, #872	; 0x368
 8007a38:	f5a3 7359 	sub.w	r3, r3, #868	; 0x364
 8007a3c:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
 8007a40:	4b0f      	ldr	r3, [pc, #60]	; (8007a80 <SOC_Init+0x120>)
 8007a42:	719a      	strb	r2, [r3, #6]
			soc_database_eeprom.soc = soc_database.soc;
 8007a44:	4b0e      	ldr	r3, [pc, #56]	; (8007a80 <SOC_Init+0x120>)
 8007a46:	799a      	ldrb	r2, [r3, #6]
 8007a48:	4b0e      	ldr	r3, [pc, #56]	; (8007a84 <SOC_Init+0x124>)
 8007a4a:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
 8007a4e:	e008      	b.n	8007a62 <SOC_Init+0x102>
		}

		else
		{
			soc_database.soc = SOC_INITIAL;
 8007a50:	4a0b      	ldr	r2, [pc, #44]	; (8007a80 <SOC_Init+0x120>)
 8007a52:	f897 3367 	ldrb.w	r3, [r7, #871]	; 0x367
 8007a56:	7193      	strb	r3, [r2, #6]
			soc_database_eeprom.soc = soc_database.soc;
 8007a58:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <SOC_Init+0x120>)
 8007a5a:	799a      	ldrb	r2, [r3, #6]
 8007a5c:	4b09      	ldr	r3, [pc, #36]	; (8007a84 <SOC_Init+0x124>)
 8007a5e:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
		}

		DATABASE_WRITE((void*)(&soc_database), DATABASE_SOC);
 8007a62:	2104      	movs	r1, #4
 8007a64:	4806      	ldr	r0, [pc, #24]	; (8007a80 <SOC_Init+0x120>)
 8007a66:	f001 ff1d 	bl	80098a4 <DATABASE_WRITE>
		DATABASE_WRITE((void*)(&soc_database_eeprom), DATABASE_EEPROM);
 8007a6a:	210d      	movs	r1, #13
 8007a6c:	4805      	ldr	r0, [pc, #20]	; (8007a84 <SOC_Init+0x124>)
 8007a6e:	f001 ff19 	bl	80098a4 <DATABASE_WRITE>
	}
}
 8007a72:	bf00      	nop
 8007a74:	f507 775a 	add.w	r7, r7, #872	; 0x368
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	200013bc 	.word	0x200013bc
 8007a80:	200011fc 	.word	0x200011fc
 8007a84:	20001224 	.word	0x20001224
 8007a88:	42c80000 	.word	0x42c80000
 8007a8c:	200013cc 	.word	0x200013cc

08007a90 <SOC_Update>:

void SOC_Update(void)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
	DATABASE_READ((void*)(&soc_database_current), DATABASE_CURRENT);
 8007a96:	2103      	movs	r1, #3
 8007a98:	48a4      	ldr	r0, [pc, #656]	; (8007d2c <SOC_Update+0x29c>)
 8007a9a:	f001 ff31 	bl	8009900 <DATABASE_READ>
	DATABASE_READ((void*)(&soc_database), DATABASE_SOC);
 8007a9e:	2104      	movs	r1, #4
 8007aa0:	48a3      	ldr	r0, [pc, #652]	; (8007d30 <SOC_Update+0x2a0>)
 8007aa2:	f001 ff2d 	bl	8009900 <DATABASE_READ>
	DATABASE_READ((void*)(&soc_database_bms), DATABASE_BMS);
 8007aa6:	2110      	movs	r1, #16
 8007aa8:	48a2      	ldr	r0, [pc, #648]	; (8007d34 <SOC_Update+0x2a4>)
 8007aaa:	f001 ff29 	bl	8009900 <DATABASE_READ>
	DATABASE_READ((void*)(&soc_database_eeprom), DATABASE_EEPROM);
 8007aae:	210d      	movs	r1, #13
 8007ab0:	48a1      	ldr	r0, [pc, #644]	; (8007d38 <SOC_Update+0x2a8>)
 8007ab2:	f001 ff25 	bl	8009900 <DATABASE_READ>

	if(soc_database_bms.bms_state == BMS_CHARGE || soc_database_bms.bms_state == BMS_DISCHARGE)
 8007ab6:	4b9f      	ldr	r3, [pc, #636]	; (8007d34 <SOC_Update+0x2a4>)
 8007ab8:	79db      	ldrb	r3, [r3, #7]
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d004      	beq.n	8007ac8 <SOC_Update+0x38>
 8007abe:	4b9d      	ldr	r3, [pc, #628]	; (8007d34 <SOC_Update+0x2a4>)
 8007ac0:	79db      	ldrb	r3, [r3, #7]
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	f040 80d3 	bne.w	8007c6e <SOC_Update+0x1de>
	{
		soc_database_current.current_counter -= ((float)soc_database_current.pack_current*CURRENT_UPDATE_TIME)/(3600*1000); // mAh
 8007ac8:	4b98      	ldr	r3, [pc, #608]	; (8007d2c <SOC_Update+0x29c>)
 8007aca:	ed93 7a04 	vldr	s14, [r3, #16]
 8007ace:	4b97      	ldr	r3, [pc, #604]	; (8007d2c <SOC_Update+0x29c>)
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	ee07 3a90 	vmov	s15, r3
 8007ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ada:	eddf 6a98 	vldr	s13, [pc, #608]	; 8007d3c <SOC_Update+0x2ac>
 8007ade:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007ae2:	ed9f 6a97 	vldr	s12, [pc, #604]	; 8007d40 <SOC_Update+0x2b0>
 8007ae6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007aee:	4b8f      	ldr	r3, [pc, #572]	; (8007d2c <SOC_Update+0x29c>)
 8007af0:	edc3 7a04 	vstr	s15, [r3, #16]
		float deltaSOC = ((float)soc_database_current.pack_current*CURRENT_UPDATE_TIME)/(1000*1000);
 8007af4:	4b8d      	ldr	r3, [pc, #564]	; (8007d2c <SOC_Update+0x29c>)
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	ee07 3a90 	vmov	s15, r3
 8007afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b00:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8007d3c <SOC_Update+0x2ac>
 8007b04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007b08:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8007d44 <SOC_Update+0x2b4>
 8007b0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007b10:	edc7 7a03 	vstr	s15, [r7, #12]

		if(soc_database_bms.bms_state == BMS_CHARGE)
 8007b14:	4b87      	ldr	r3, [pc, #540]	; (8007d34 <SOC_Update+0x2a4>)
 8007b16:	79db      	ldrb	r3, [r3, #7]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d116      	bne.n	8007b4a <SOC_Update+0xba>
		{
			soc_database_current.cycle_counter += ((float)soc_database_current.pack_current*CURRENT_UPDATE_TIME)/(3600*1000); // mAh
 8007b1c:	4b83      	ldr	r3, [pc, #524]	; (8007d2c <SOC_Update+0x29c>)
 8007b1e:	ed93 7a05 	vldr	s14, [r3, #20]
 8007b22:	4b82      	ldr	r3, [pc, #520]	; (8007d2c <SOC_Update+0x29c>)
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	ee07 3a90 	vmov	s15, r3
 8007b2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b2e:	eddf 6a83 	vldr	s13, [pc, #524]	; 8007d3c <SOC_Update+0x2ac>
 8007b32:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007b36:	ed9f 6a82 	vldr	s12, [pc, #520]	; 8007d40 <SOC_Update+0x2b0>
 8007b3a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b42:	4b7a      	ldr	r3, [pc, #488]	; (8007d2c <SOC_Update+0x29c>)
 8007b44:	edc3 7a05 	vstr	s15, [r3, #20]
 8007b48:	e019      	b.n	8007b7e <SOC_Update+0xee>
		}
		else if(soc_database_bms.bms_state == BMS_DISCHARGE)
 8007b4a:	4b7a      	ldr	r3, [pc, #488]	; (8007d34 <SOC_Update+0x2a4>)
 8007b4c:	79db      	ldrb	r3, [r3, #7]
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	d115      	bne.n	8007b7e <SOC_Update+0xee>
		{
			soc_database_current.cycle_counter -= ((float)soc_database_current.pack_current*CURRENT_UPDATE_TIME)/(3600*1000); // mAh
 8007b52:	4b76      	ldr	r3, [pc, #472]	; (8007d2c <SOC_Update+0x29c>)
 8007b54:	ed93 7a05 	vldr	s14, [r3, #20]
 8007b58:	4b74      	ldr	r3, [pc, #464]	; (8007d2c <SOC_Update+0x29c>)
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	ee07 3a90 	vmov	s15, r3
 8007b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b64:	eddf 6a75 	vldr	s13, [pc, #468]	; 8007d3c <SOC_Update+0x2ac>
 8007b68:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007b6c:	ed9f 6a74 	vldr	s12, [pc, #464]	; 8007d40 <SOC_Update+0x2b0>
 8007b70:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b78:	4b6c      	ldr	r3, [pc, #432]	; (8007d2c <SOC_Update+0x29c>)
 8007b7a:	edc3 7a05 	vstr	s15, [r3, #20]
		}

		calc_soc += ((deltaSOC)/(BATTERY_CAPACITY*3600));
 8007b7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007b82:	eddf 6a71 	vldr	s13, [pc, #452]	; 8007d48 <SOC_Update+0x2b8>
 8007b86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007b8a:	4b70      	ldr	r3, [pc, #448]	; (8007d4c <SOC_Update+0x2bc>)
 8007b8c:	edd3 7a00 	vldr	s15, [r3]
 8007b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b94:	4b6d      	ldr	r3, [pc, #436]	; (8007d4c <SOC_Update+0x2bc>)
 8007b96:	edc3 7a00 	vstr	s15, [r3]
		soc_database.soc = (uint8_t)(calc_soc*100);
 8007b9a:	4b6c      	ldr	r3, [pc, #432]	; (8007d4c <SOC_Update+0x2bc>)
 8007b9c:	edd3 7a00 	vldr	s15, [r3]
 8007ba0:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8007d3c <SOC_Update+0x2ac>
 8007ba4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bac:	edc7 7a01 	vstr	s15, [r7, #4]
 8007bb0:	793b      	ldrb	r3, [r7, #4]
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	4b5e      	ldr	r3, [pc, #376]	; (8007d30 <SOC_Update+0x2a0>)
 8007bb6:	719a      	strb	r2, [r3, #6]
		soc_database_eeprom.soc = (uint8_t)(calc_soc*100);
 8007bb8:	4b64      	ldr	r3, [pc, #400]	; (8007d4c <SOC_Update+0x2bc>)
 8007bba:	edd3 7a00 	vldr	s15, [r3]
 8007bbe:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8007d3c <SOC_Update+0x2ac>
 8007bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bca:	edc7 7a01 	vstr	s15, [r7, #4]
 8007bce:	793b      	ldrb	r3, [r7, #4]
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	4b59      	ldr	r3, [pc, #356]	; (8007d38 <SOC_Update+0x2a8>)
 8007bd4:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180

		if(soc_database.soc > 100){soc_database.soc = soc_database_eeprom.soc = 100;calc_soc = 1;}
 8007bd8:	4b55      	ldr	r3, [pc, #340]	; (8007d30 <SOC_Update+0x2a0>)
 8007bda:	799b      	ldrb	r3, [r3, #6]
 8007bdc:	2b64      	cmp	r3, #100	; 0x64
 8007bde:	d90c      	bls.n	8007bfa <SOC_Update+0x16a>
 8007be0:	4b55      	ldr	r3, [pc, #340]	; (8007d38 <SOC_Update+0x2a8>)
 8007be2:	2264      	movs	r2, #100	; 0x64
 8007be4:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
 8007be8:	4b53      	ldr	r3, [pc, #332]	; (8007d38 <SOC_Update+0x2a8>)
 8007bea:	f893 2180 	ldrb.w	r2, [r3, #384]	; 0x180
 8007bee:	4b50      	ldr	r3, [pc, #320]	; (8007d30 <SOC_Update+0x2a0>)
 8007bf0:	719a      	strb	r2, [r3, #6]
 8007bf2:	4b56      	ldr	r3, [pc, #344]	; (8007d4c <SOC_Update+0x2bc>)
 8007bf4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007bf8:	601a      	str	r2, [r3, #0]
		if(soc_database.soc < 0){soc_database.soc = soc_database_eeprom.soc = 0;calc_soc = 0;}

		if(soc_database.max_soc < soc_database.soc) { soc_database.max_soc = soc_database.soc; }
 8007bfa:	4b4d      	ldr	r3, [pc, #308]	; (8007d30 <SOC_Update+0x2a0>)
 8007bfc:	79da      	ldrb	r2, [r3, #7]
 8007bfe:	4b4c      	ldr	r3, [pc, #304]	; (8007d30 <SOC_Update+0x2a0>)
 8007c00:	799b      	ldrb	r3, [r3, #6]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d203      	bcs.n	8007c0e <SOC_Update+0x17e>
 8007c06:	4b4a      	ldr	r3, [pc, #296]	; (8007d30 <SOC_Update+0x2a0>)
 8007c08:	799a      	ldrb	r2, [r3, #6]
 8007c0a:	4b49      	ldr	r3, [pc, #292]	; (8007d30 <SOC_Update+0x2a0>)
 8007c0c:	71da      	strb	r2, [r3, #7]
		if(soc_database.min_soc > soc_database.soc) { soc_database.min_soc = soc_database.soc; }
 8007c0e:	4b48      	ldr	r3, [pc, #288]	; (8007d30 <SOC_Update+0x2a0>)
 8007c10:	7a1a      	ldrb	r2, [r3, #8]
 8007c12:	4b47      	ldr	r3, [pc, #284]	; (8007d30 <SOC_Update+0x2a0>)
 8007c14:	799b      	ldrb	r3, [r3, #6]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d903      	bls.n	8007c22 <SOC_Update+0x192>
 8007c1a:	4b45      	ldr	r3, [pc, #276]	; (8007d30 <SOC_Update+0x2a0>)
 8007c1c:	799a      	ldrb	r2, [r3, #6]
 8007c1e:	4b44      	ldr	r3, [pc, #272]	; (8007d30 <SOC_Update+0x2a0>)
 8007c20:	721a      	strb	r2, [r3, #8]

		if(soc_database_current.cycle_counter >= (BATTERY_CAPACITY*2*1000))
 8007c22:	4b42      	ldr	r3, [pc, #264]	; (8007d2c <SOC_Update+0x29c>)
 8007c24:	edd3 7a05 	vldr	s15, [r3, #20]
 8007c28:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8007d50 <SOC_Update+0x2c0>
 8007c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c34:	db0e      	blt.n	8007c54 <SOC_Update+0x1c4>
		{
			soc_database.cycle++;
 8007c36:	4b3e      	ldr	r3, [pc, #248]	; (8007d30 <SOC_Update+0x2a0>)
 8007c38:	895b      	ldrh	r3, [r3, #10]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	4b3c      	ldr	r3, [pc, #240]	; (8007d30 <SOC_Update+0x2a0>)
 8007c40:	815a      	strh	r2, [r3, #10]
			soc_database_eeprom.cycle_count = soc_database.cycle;
 8007c42:	4b3b      	ldr	r3, [pc, #236]	; (8007d30 <SOC_Update+0x2a0>)
 8007c44:	895a      	ldrh	r2, [r3, #10]
 8007c46:	4b3c      	ldr	r3, [pc, #240]	; (8007d38 <SOC_Update+0x2a8>)
 8007c48:	f8a3 2184 	strh.w	r2, [r3, #388]	; 0x184
			soc_database_current.cycle_counter = 0;
 8007c4c:	4b37      	ldr	r3, [pc, #220]	; (8007d2c <SOC_Update+0x29c>)
 8007c4e:	f04f 0200 	mov.w	r2, #0
 8007c52:	615a      	str	r2, [r3, #20]
		}

		DATABASE_WRITE((void*)(&soc_database_current), DATABASE_CURRENT);
 8007c54:	2103      	movs	r1, #3
 8007c56:	4835      	ldr	r0, [pc, #212]	; (8007d2c <SOC_Update+0x29c>)
 8007c58:	f001 fe24 	bl	80098a4 <DATABASE_WRITE>
		DATABASE_WRITE((void*)(&soc_database_eeprom), DATABASE_EEPROM);
 8007c5c:	210d      	movs	r1, #13
 8007c5e:	4836      	ldr	r0, [pc, #216]	; (8007d38 <SOC_Update+0x2a8>)
 8007c60:	f001 fe20 	bl	80098a4 <DATABASE_WRITE>
		DATABASE_WRITE((void*)(&soc_database), DATABASE_SOC);
 8007c64:	2104      	movs	r1, #4
 8007c66:	4832      	ldr	r0, [pc, #200]	; (8007d30 <SOC_Update+0x2a0>)
 8007c68:	f001 fe1c 	bl	80098a4 <DATABASE_WRITE>
	{
 8007c6c:	e055      	b.n	8007d1a <SOC_Update+0x28a>
	}
	else if(soc_database_bms.bms_state == BMS_ERROR)
 8007c6e:	4b31      	ldr	r3, [pc, #196]	; (8007d34 <SOC_Update+0x2a4>)
 8007c70:	79db      	ldrb	r3, [r3, #7]
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d151      	bne.n	8007d1a <SOC_Update+0x28a>
	{
		if(soc_database_eeprom.error_id == BMS_CELL_OVER_VOLTAGE)
 8007c76:	4b30      	ldr	r3, [pc, #192]	; (8007d38 <SOC_Update+0x2a8>)
 8007c78:	799b      	ldrb	r3, [r3, #6]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d124      	bne.n	8007cc8 <SOC_Update+0x238>
		{
			soc_database_current.current_counter = BATTERY_CAPACITY*1000;
 8007c7e:	4b2b      	ldr	r3, [pc, #172]	; (8007d2c <SOC_Update+0x29c>)
 8007c80:	4a34      	ldr	r2, [pc, #208]	; (8007d54 <SOC_Update+0x2c4>)
 8007c82:	611a      	str	r2, [r3, #16]

			soc_database.soc = 100;
 8007c84:	4b2a      	ldr	r3, [pc, #168]	; (8007d30 <SOC_Update+0x2a0>)
 8007c86:	2264      	movs	r2, #100	; 0x64
 8007c88:	719a      	strb	r2, [r3, #6]
			soc_database_eeprom.soc = 100;
 8007c8a:	4b2b      	ldr	r3, [pc, #172]	; (8007d38 <SOC_Update+0x2a8>)
 8007c8c:	2264      	movs	r2, #100	; 0x64
 8007c8e:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
			calc_soc = 1;
 8007c92:	4b2e      	ldr	r3, [pc, #184]	; (8007d4c <SOC_Update+0x2bc>)
 8007c94:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007c98:	601a      	str	r2, [r3, #0]

			if(soc_database.max_soc < soc_database.soc) { soc_database.max_soc = soc_database.soc; }
 8007c9a:	4b25      	ldr	r3, [pc, #148]	; (8007d30 <SOC_Update+0x2a0>)
 8007c9c:	79da      	ldrb	r2, [r3, #7]
 8007c9e:	4b24      	ldr	r3, [pc, #144]	; (8007d30 <SOC_Update+0x2a0>)
 8007ca0:	799b      	ldrb	r3, [r3, #6]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d203      	bcs.n	8007cae <SOC_Update+0x21e>
 8007ca6:	4b22      	ldr	r3, [pc, #136]	; (8007d30 <SOC_Update+0x2a0>)
 8007ca8:	799a      	ldrb	r2, [r3, #6]
 8007caa:	4b21      	ldr	r3, [pc, #132]	; (8007d30 <SOC_Update+0x2a0>)
 8007cac:	71da      	strb	r2, [r3, #7]

			DATABASE_WRITE((void*)(&soc_database_current), DATABASE_CURRENT);
 8007cae:	2103      	movs	r1, #3
 8007cb0:	481e      	ldr	r0, [pc, #120]	; (8007d2c <SOC_Update+0x29c>)
 8007cb2:	f001 fdf7 	bl	80098a4 <DATABASE_WRITE>
			DATABASE_WRITE((void*)(&soc_database_eeprom), DATABASE_EEPROM);
 8007cb6:	210d      	movs	r1, #13
 8007cb8:	481f      	ldr	r0, [pc, #124]	; (8007d38 <SOC_Update+0x2a8>)
 8007cba:	f001 fdf3 	bl	80098a4 <DATABASE_WRITE>
			DATABASE_WRITE((void*)(&soc_database), DATABASE_SOC);
 8007cbe:	2104      	movs	r1, #4
 8007cc0:	481b      	ldr	r0, [pc, #108]	; (8007d30 <SOC_Update+0x2a0>)
 8007cc2:	f001 fdef 	bl	80098a4 <DATABASE_WRITE>
 8007cc6:	e028      	b.n	8007d1a <SOC_Update+0x28a>
		}
		else if(soc_database_eeprom.error_id == BMS_CELL_UNDER_VOLTAGE)
 8007cc8:	4b1b      	ldr	r3, [pc, #108]	; (8007d38 <SOC_Update+0x2a8>)
 8007cca:	799b      	ldrb	r3, [r3, #6]
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d124      	bne.n	8007d1a <SOC_Update+0x28a>
		{
			soc_database_current.current_counter = 0;
 8007cd0:	4b16      	ldr	r3, [pc, #88]	; (8007d2c <SOC_Update+0x29c>)
 8007cd2:	f04f 0200 	mov.w	r2, #0
 8007cd6:	611a      	str	r2, [r3, #16]

			soc_database.soc = 0;
 8007cd8:	4b15      	ldr	r3, [pc, #84]	; (8007d30 <SOC_Update+0x2a0>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	719a      	strb	r2, [r3, #6]
			soc_database_eeprom.soc = 0;
 8007cde:	4b16      	ldr	r3, [pc, #88]	; (8007d38 <SOC_Update+0x2a8>)
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
			calc_soc = 0;
 8007ce6:	4b19      	ldr	r3, [pc, #100]	; (8007d4c <SOC_Update+0x2bc>)
 8007ce8:	f04f 0200 	mov.w	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]

			if(soc_database.min_soc > soc_database.soc) { soc_database.min_soc = soc_database.soc; }
 8007cee:	4b10      	ldr	r3, [pc, #64]	; (8007d30 <SOC_Update+0x2a0>)
 8007cf0:	7a1a      	ldrb	r2, [r3, #8]
 8007cf2:	4b0f      	ldr	r3, [pc, #60]	; (8007d30 <SOC_Update+0x2a0>)
 8007cf4:	799b      	ldrb	r3, [r3, #6]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d903      	bls.n	8007d02 <SOC_Update+0x272>
 8007cfa:	4b0d      	ldr	r3, [pc, #52]	; (8007d30 <SOC_Update+0x2a0>)
 8007cfc:	799a      	ldrb	r2, [r3, #6]
 8007cfe:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <SOC_Update+0x2a0>)
 8007d00:	721a      	strb	r2, [r3, #8]

			DATABASE_WRITE((void*)(&soc_database_current), DATABASE_CURRENT);
 8007d02:	2103      	movs	r1, #3
 8007d04:	4809      	ldr	r0, [pc, #36]	; (8007d2c <SOC_Update+0x29c>)
 8007d06:	f001 fdcd 	bl	80098a4 <DATABASE_WRITE>
			DATABASE_WRITE((void*)(&soc_database_eeprom), DATABASE_EEPROM);
 8007d0a:	210d      	movs	r1, #13
 8007d0c:	480a      	ldr	r0, [pc, #40]	; (8007d38 <SOC_Update+0x2a8>)
 8007d0e:	f001 fdc9 	bl	80098a4 <DATABASE_WRITE>
			DATABASE_WRITE((void*)(&soc_database), DATABASE_SOC);
 8007d12:	2104      	movs	r1, #4
 8007d14:	4806      	ldr	r0, [pc, #24]	; (8007d30 <SOC_Update+0x2a0>)
 8007d16:	f001 fdc5 	bl	80098a4 <DATABASE_WRITE>
		}
	}

	FAULT_SOCMonitor(&soc_database, &soc_database_bms);
 8007d1a:	4906      	ldr	r1, [pc, #24]	; (8007d34 <SOC_Update+0x2a4>)
 8007d1c:	4804      	ldr	r0, [pc, #16]	; (8007d30 <SOC_Update+0x2a0>)
 8007d1e:	f7ff fd49 	bl	80077b4 <FAULT_SOCMonitor>
}
 8007d22:	bf00      	nop
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	20001208 	.word	0x20001208
 8007d30:	200011fc 	.word	0x200011fc
 8007d34:	200013bc 	.word	0x200013bc
 8007d38:	20001224 	.word	0x20001224
 8007d3c:	42c80000 	.word	0x42c80000
 8007d40:	4a5bba00 	.word	0x4a5bba00
 8007d44:	49742400 	.word	0x49742400
 8007d48:	48b89200 	.word	0x48b89200
 8007d4c:	200013cc 	.word	0x200013cc
 8007d50:	484d1400 	.word	0x484d1400
 8007d54:	47cd1400 	.word	0x47cd1400

08007d58 <calcInitialSOC>:
	}
	DATABASE_WRITE((void*)(&soc_database_eeprom), DATABASE_EEPROM);
}

uint8_t calcInitialSOC(uint16_t Voltage)
{
 8007d58:	b490      	push	{r4, r7}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	80fb      	strh	r3, [r7, #6]
	uint8_t index = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]
	uint8_t soc = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	737b      	strb	r3, [r7, #13]

	if(Voltage > ocvVSsoc[19][0])
 8007d6a:	4b2a      	ldr	r3, [pc, #168]	; (8007e14 <calcInitialSOC+0xbc>)
 8007d6c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8007d70:	88fa      	ldrh	r2, [r7, #6]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d901      	bls.n	8007d7a <calcInitialSOC+0x22>
	{
		return 100;
 8007d76:	2364      	movs	r3, #100	; 0x64
 8007d78:	e047      	b.n	8007e0a <calcInitialSOC+0xb2>
	}
	else if(Voltage < ocvVSsoc[0][0])
 8007d7a:	4b26      	ldr	r3, [pc, #152]	; (8007e14 <calcInitialSOC+0xbc>)
 8007d7c:	881b      	ldrh	r3, [r3, #0]
 8007d7e:	88fa      	ldrh	r2, [r7, #6]
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d201      	bcs.n	8007d88 <calcInitialSOC+0x30>
	{
		return 0;
 8007d84:	2300      	movs	r3, #0
 8007d86:	e040      	b.n	8007e0a <calcInitialSOC+0xb2>
	}

	for(uint8_t i=0; i<20; i++)
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73bb      	strb	r3, [r7, #14]
 8007d8c:	e00c      	b.n	8007da8 <calcInitialSOC+0x50>
	{
		if(Voltage < ocvVSsoc[i][0])
 8007d8e:	7bbb      	ldrb	r3, [r7, #14]
 8007d90:	4a20      	ldr	r2, [pc, #128]	; (8007e14 <calcInitialSOC+0xbc>)
 8007d92:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8007d96:	88fa      	ldrh	r2, [r7, #6]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d202      	bcs.n	8007da2 <calcInitialSOC+0x4a>
		{
			index = i;
 8007d9c:	7bbb      	ldrb	r3, [r7, #14]
 8007d9e:	73fb      	strb	r3, [r7, #15]
			break;
 8007da0:	e005      	b.n	8007dae <calcInitialSOC+0x56>
	for(uint8_t i=0; i<20; i++)
 8007da2:	7bbb      	ldrb	r3, [r7, #14]
 8007da4:	3301      	adds	r3, #1
 8007da6:	73bb      	strb	r3, [r7, #14]
 8007da8:	7bbb      	ldrb	r3, [r7, #14]
 8007daa:	2b13      	cmp	r3, #19
 8007dac:	d9ef      	bls.n	8007d8e <calcInitialSOC+0x36>
		}
	}

	soc = (uint8_t)(ocvVSsoc[index-1][1] + (((Voltage - ocvVSsoc[index-1][0])*(ocvVSsoc[index][1] - ocvVSsoc[index-1][1]))/(ocvVSsoc[index][0] - ocvVSsoc[index-1][0])));
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
 8007db0:	3b01      	subs	r3, #1
 8007db2:	4a18      	ldr	r2, [pc, #96]	; (8007e14 <calcInitialSOC+0xbc>)
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	885b      	ldrh	r3, [r3, #2]
 8007dba:	b2da      	uxtb	r2, r3
 8007dbc:	88fb      	ldrh	r3, [r7, #6]
 8007dbe:	7bf9      	ldrb	r1, [r7, #15]
 8007dc0:	3901      	subs	r1, #1
 8007dc2:	4814      	ldr	r0, [pc, #80]	; (8007e14 <calcInitialSOC+0xbc>)
 8007dc4:	f830 1021 	ldrh.w	r1, [r0, r1, lsl #2]
 8007dc8:	1a59      	subs	r1, r3, r1
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
 8007dcc:	4811      	ldr	r0, [pc, #68]	; (8007e14 <calcInitialSOC+0xbc>)
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4403      	add	r3, r0
 8007dd2:	885b      	ldrh	r3, [r3, #2]
 8007dd4:	461c      	mov	r4, r3
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	480e      	ldr	r0, [pc, #56]	; (8007e14 <calcInitialSOC+0xbc>)
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4403      	add	r3, r0
 8007de0:	885b      	ldrh	r3, [r3, #2]
 8007de2:	1ae3      	subs	r3, r4, r3
 8007de4:	fb03 f101 	mul.w	r1, r3, r1
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
 8007dea:	480a      	ldr	r0, [pc, #40]	; (8007e14 <calcInitialSOC+0xbc>)
 8007dec:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 8007df0:	461c      	mov	r4, r3
 8007df2:	7bfb      	ldrb	r3, [r7, #15]
 8007df4:	3b01      	subs	r3, #1
 8007df6:	4807      	ldr	r0, [pc, #28]	; (8007e14 <calcInitialSOC+0xbc>)
 8007df8:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 8007dfc:	1ae3      	subs	r3, r4, r3
 8007dfe:	fb91 f3f3 	sdiv	r3, r1, r3
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	4413      	add	r3, r2
 8007e06:	737b      	strb	r3, [r7, #13]

	return soc;
 8007e08:	7b7b      	ldrb	r3, [r7, #13]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bc90      	pop	{r4, r7}
 8007e12:	4770      	bx	lr
 8007e14:	2000002c 	.word	0x2000002c

08007e18 <BQ_AFE_Config>:
 * @arguments
 * @retvar
 */

void BQ_AFE_Config(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af02      	add	r7, sp, #8
		AFE_WriteReg(BQ_ADDR, 14, 0X11, 1, FRMWRT_SGL_NR);
	}
	if(NO_OF_DAISY_STACK > 1)
	{
	/* Mask the Checksum Fault */
	AFE_WriteReg(BQ_ADDR, 107, 0X8000, 2, FRMWRT_ALL_NR);
 8007e1e:	2370      	movs	r3, #112	; 0x70
 8007e20:	9301      	str	r3, [sp, #4]
 8007e22:	2302      	movs	r3, #2
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007e2a:	f04f 0300 	mov.w	r3, #0
 8007e2e:	216b      	movs	r1, #107	; 0x6b
 8007e30:	2000      	movs	r0, #0
 8007e32:	f001 ff27 	bl	8009c84 <AFE_WriteReg>

	/* Communication Configuration : Single Ended, 250K Buad Rate */
	AFE_WriteReg(BQ_ADDR, 16, 0X10E0, 2, FRMWRT_ALL_NR);
 8007e36:	2370      	movs	r3, #112	; 0x70
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	f44f 5287 	mov.w	r2, #4320	; 0x10e0
 8007e42:	f04f 0300 	mov.w	r3, #0
 8007e46:	2110      	movs	r1, #16
 8007e48:	2000      	movs	r0, #0
 8007e4a:	f001 ff1b 	bl	8009c84 <AFE_WriteReg>

	/* Device Configuration : Auto Addressing Enable */
	AFE_WriteReg(BQ_ADDR, 14, 0X10, 1, FRMWRT_ALL_NR);
 8007e4e:	2370      	movs	r3, #112	; 0x70
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	2301      	movs	r3, #1
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	f04f 0210 	mov.w	r2, #16
 8007e5a:	f04f 0300 	mov.w	r3, #0
 8007e5e:	210e      	movs	r1, #14
 8007e60:	2000      	movs	r0, #0
 8007e62:	f001 ff0f 	bl	8009c84 <AFE_WriteReg>

	/* Device Control : Enable Auto Address */
	AFE_WriteReg(BQ_ADDR, 12, 0X08, 1, FRMWRT_ALL_NR);
 8007e66:	2370      	movs	r3, #112	; 0x70
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	9300      	str	r3, [sp, #0]
 8007e6e:	f04f 0208 	mov.w	r2, #8
 8007e72:	f04f 0300 	mov.w	r3, #0
 8007e76:	210c      	movs	r1, #12
 8007e78:	2000      	movs	r0, #0
 8007e7a:	f001 ff03 	bl	8009c84 <AFE_WriteReg>

	/* Assign Address in Incremental Order : Master - 0 */
	BQ_AFE_AddressAll();
 8007e7e:	f000 f9c5 	bl	800820c <BQ_AFE_AddressAll>

	/* Auto-Monitor Period : Auto-Monitor off */
	AFE_WriteReg(BQ_ADDR, 50, 0X00, 1, FRMWRT_ALL_NR);
 8007e82:	2370      	movs	r3, #112	; 0x70
 8007e84:	9301      	str	r3, [sp, #4]
 8007e86:	2301      	movs	r3, #1
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	f04f 0200 	mov.w	r2, #0
 8007e8e:	f04f 0300 	mov.w	r3, #0
 8007e92:	2132      	movs	r1, #50	; 0x32
 8007e94:	2000      	movs	r0, #0
 8007e96:	f001 fef5 	bl	8009c84 <AFE_WriteReg>

	/* Number of Channels : 16 */
	AFE_WriteReg(BQ_ADDR, 13, 0X10, 1, FRMWRT_ALL_NR);
 8007e9a:	2370      	movs	r3, #112	; 0x70
 8007e9c:	9301      	str	r3, [sp, #4]
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	f04f 0210 	mov.w	r2, #16
 8007ea6:	f04f 0300 	mov.w	r3, #0
 8007eaa:	210d      	movs	r1, #13
 8007eac:	2000      	movs	r0, #0
 8007eae:	f001 fee9 	bl	8009c84 <AFE_WriteReg>

	/* Channel Select : 16 Voltage Channel & 8 Auxiliary Channel */
	AFE_WriteReg(BQ_ADDR, 3, 0XFFFFFF00, 4, FRMWRT_ALL_NR);
 8007eb2:	2370      	movs	r3, #112	; 0x70
 8007eb4:	9301      	str	r3, [sp, #4]
 8007eb6:	2304      	movs	r3, #4
 8007eb8:	9300      	str	r3, [sp, #0]
 8007eba:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 8007ebe:	f04f 0300 	mov.w	r3, #0
 8007ec2:	2103      	movs	r1, #3
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	f001 fedd 	bl	8009c84 <AFE_WriteReg>

	/* Power Configuration  */
	AFE_WriteReg(BQ_ADDR, 15, 0X80, 1, FRMWRT_ALL_NR);
 8007eca:	2370      	movs	r3, #112	; 0x70
 8007ecc:	9301      	str	r3, [sp, #4]
 8007ece:	2301      	movs	r3, #1
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	f04f 0280 	mov.w	r2, #128	; 0x80
 8007ed6:	f04f 0300 	mov.w	r3, #0
 8007eda:	210f      	movs	r1, #15
 8007edc:	2000      	movs	r0, #0
 8007ede:	f001 fed1 	bl	8009c84 <AFE_WriteReg>

	/* Command Oversampling : OVS_CYCLE - 1 & OVSMP - 0 samples */
	AFE_WriteReg(BQ_ADDR, 7, 0XF8, 1, FRMWRT_ALL_NR);
 8007ee2:	2370      	movs	r3, #112	; 0x70
 8007ee4:	9301      	str	r3, [sp, #4]
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	f04f 02f8 	mov.w	r2, #248	; 0xf8
 8007eee:	f04f 0300 	mov.w	r3, #0
 8007ef2:	2107      	movs	r1, #7
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	f001 fec5 	bl	8009c84 <AFE_WriteReg>

	/* Cell Voltage & Temperature Sampling : Voltage - 60us & Internal Temperature - 100us */
	AFE_WriteReg(BQ_ADDR, 62, 0XBC, 1, FRMWRT_ALL_NR);
 8007efa:	2370      	movs	r3, #112	; 0x70
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	2301      	movs	r3, #1
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	f04f 02bc 	mov.w	r2, #188	; 0xbc
 8007f06:	f04f 0300 	mov.w	r3, #0
 8007f0a:	213e      	movs	r1, #62	; 0x3e
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	f001 feb9 	bl	8009c84 <AFE_WriteReg>

	/* AUX Sampling : Temperature - 12.6us */
	AFE_WriteReg(BQ_ADDR, 63, 0X44444444, 4, FRMWRT_ALL_NR);
 8007f12:	2370      	movs	r3, #112	; 0x70
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	2304      	movs	r3, #4
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 8007f1e:	f04f 0300 	mov.w	r3, #0
 8007f22:	213f      	movs	r1, #63	; 0x3f
 8007f24:	2000      	movs	r0, #0
 8007f26:	f001 fead 	bl	8009c84 <AFE_WriteReg>

	/* Test Sampling : TI Recommended Setting */
	AFE_WriteReg(BQ_ADDR, 67, 0XF999, 2, FRMWRT_ALL_NR);
 8007f2a:	2370      	movs	r3, #112	; 0x70
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	2302      	movs	r3, #2
 8007f30:	9300      	str	r3, [sp, #0]
 8007f32:	f64f 1299 	movw	r2, #63897	; 0xf999
 8007f36:	f04f 0300 	mov.w	r3, #0
 8007f3a:	2143      	movs	r1, #67	; 0x43
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	f001 fea1 	bl	8009c84 <AFE_WriteReg>

	/* Initial Sampling Delay : Voltage - 0 & Auxiliary - 0 */
	AFE_WriteReg(0X00, 61, 0X00, 1, FRMWRT_ALL_NR);
 8007f42:	2370      	movs	r3, #112	; 0x70
 8007f44:	9301      	str	r3, [sp, #4]
 8007f46:	2301      	movs	r3, #1
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	213d      	movs	r1, #61	; 0x3d
 8007f54:	2000      	movs	r0, #0
 8007f56:	f001 fe95 	bl	8009c84 <AFE_WriteReg>

	/* Balancing Configuration : BAL_TIME - Untill Stopped & BAL_CONTINUE - 1 */
	AFE_WriteReg(BQ_ADDR, 19, 0X08, 1, FRMWRT_ALL_NR);
 8007f5a:	2370      	movs	r3, #112	; 0x70
 8007f5c:	9301      	str	r3, [sp, #4]
 8007f5e:	2301      	movs	r3, #1
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	f04f 0208 	mov.w	r2, #8
 8007f66:	f04f 0300 	mov.w	r3, #0
 8007f6a:	2113      	movs	r1, #19
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	f001 fe89 	bl	8009c84 <AFE_WriteReg>

	/* Balancing OFF */
	AFE_WriteReg(BQ_ADDR, 20, 0X0000, 2, FRMWRT_ALL_NR);
 8007f72:	2370      	movs	r3, #112	; 0x70
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	2302      	movs	r3, #2
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	f04f 0200 	mov.w	r2, #0
 8007f7e:	f04f 0300 	mov.w	r3, #0
 8007f82:	2114      	movs	r1, #20
 8007f84:	2000      	movs	r0, #0
 8007f86:	f001 fe7d 	bl	8009c84 <AFE_WriteReg>

	/* Device Config : Auto Addressing Enable and UNLATCHED_FAULT Enable */
	AFE_WriteReg(BQ_ADDR, 14, 0X11, 1, FRMWRT_ALL_NR);
 8007f8a:	2370      	movs	r3, #112	; 0x70
 8007f8c:	9301      	str	r3, [sp, #4]
 8007f8e:	2301      	movs	r3, #1
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	f04f 0211 	mov.w	r2, #17
 8007f96:	f04f 0300 	mov.w	r3, #0
 8007f9a:	210e      	movs	r1, #14
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	f001 fe71 	bl	8009c84 <AFE_WriteReg>

	AFE_WriteReg(0, 16, 0X10D0, 2, FRMWRT_SGL_NR);
 8007fa2:	2310      	movs	r3, #16
 8007fa4:	9301      	str	r3, [sp, #4]
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	f241 02d0 	movw	r2, #4304	; 0x10d0
 8007fae:	f04f 0300 	mov.w	r3, #0
 8007fb2:	2110      	movs	r1, #16
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	f001 fe65 	bl	8009c84 <AFE_WriteReg>

	AFE_WriteReg(NO_OF_DAISY_STACK-1, 16, 0X1028, 2, FRMWRT_SGL_NR);
 8007fba:	2310      	movs	r3, #16
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	f241 0228 	movw	r2, #4136	; 0x1028
 8007fc6:	f04f 0300 	mov.w	r3, #0
 8007fca:	2110      	movs	r1, #16
 8007fcc:	2007      	movs	r0, #7
 8007fce:	f001 fe59 	bl	8009c84 <AFE_WriteReg>
	}
}
 8007fd2:	bf00      	nop
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <BQ_AFE_OV_Config>:

void BQ_AFE_OV_Config(void)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af02      	add	r7, sp, #8
	/* Cell OverVoltage Threshold : 4.2V */                       // (0XFFFF*4.2V)/5V = OVERVOLTAGE THRESHOLD
	AFE_WriteReg(BQ_ADDR, 144, 0XD70A, 2, FRMWRT_ALL_NR);
 8007fde:	2370      	movs	r3, #112	; 0x70
 8007fe0:	9301      	str	r3, [sp, #4]
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	f24d 720a 	movw	r2, #55050	; 0xd70a
 8007fea:	f04f 0300 	mov.w	r3, #0
 8007fee:	2190      	movs	r1, #144	; 0x90
 8007ff0:	2000      	movs	r0, #0
 8007ff2:	f001 fe47 	bl	8009c84 <AFE_WriteReg>

	/* Comparator OverVoltage Threshold : 4.2V */           // (0XFF*4.2V)/5.175V = OVERVOLTAGE THRESHOLD
	AFE_WriteReg(BQ_ADDR, 141, 0XCE, 1, FRMWRT_ALL_NR);
 8007ff6:	2370      	movs	r3, #112	; 0x70
 8007ff8:	9301      	str	r3, [sp, #4]
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	f04f 02ce 	mov.w	r2, #206	; 0xce
 8008002:	f04f 0300 	mov.w	r3, #0
 8008006:	218d      	movs	r1, #141	; 0x8d
 8008008:	2000      	movs	r0, #0
 800800a:	f001 fe3b 	bl	8009c84 <AFE_WriteReg>

	/* AUX0 OverVoltage Threshold : 4.15V @ 0C */              // (0XFFFF*4.2V)/5V = AUX OVERVOLTAGE
	AFE_WriteReg(BQ_ADDR, 148, 0XD47A, 2, FRMWRT_ALL_NR);
 800800e:	2370      	movs	r3, #112	; 0x70
 8008010:	9301      	str	r3, [sp, #4]
 8008012:	2302      	movs	r3, #2
 8008014:	9300      	str	r3, [sp, #0]
 8008016:	f24d 427a 	movw	r2, #54394	; 0xd47a
 800801a:	f04f 0300 	mov.w	r3, #0
 800801e:	2194      	movs	r1, #148	; 0x94
 8008020:	2000      	movs	r0, #0
 8008022:	f001 fe2f 	bl	8009c84 <AFE_WriteReg>

	/* AUX1 OverVoltage Threshold : 4.15V @ 0C */
	AFE_WriteReg(BQ_ADDR, 152, 0XD47A, 2, FRMWRT_ALL_NR);
 8008026:	2370      	movs	r3, #112	; 0x70
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	2302      	movs	r3, #2
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	f24d 427a 	movw	r2, #54394	; 0xd47a
 8008032:	f04f 0300 	mov.w	r3, #0
 8008036:	2198      	movs	r1, #152	; 0x98
 8008038:	2000      	movs	r0, #0
 800803a:	f001 fe23 	bl	8009c84 <AFE_WriteReg>

	/* AUX2 OverVoltage Threshold : 4.15V @ 0C */
	AFE_WriteReg(BQ_ADDR, 156, 0XD47A, 2, FRMWRT_ALL_NR);
 800803e:	2370      	movs	r3, #112	; 0x70
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	2302      	movs	r3, #2
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	f24d 427a 	movw	r2, #54394	; 0xd47a
 800804a:	f04f 0300 	mov.w	r3, #0
 800804e:	219c      	movs	r1, #156	; 0x9c
 8008050:	2000      	movs	r0, #0
 8008052:	f001 fe17 	bl	8009c84 <AFE_WriteReg>

	/* AUX3 OverVoltage Threshold : 4.15V @ 0C */
	AFE_WriteReg(BQ_ADDR, 160, 0XD47A, 2, FRMWRT_ALL_NR);
 8008056:	2370      	movs	r3, #112	; 0x70
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	2302      	movs	r3, #2
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	f24d 427a 	movw	r2, #54394	; 0xd47a
 8008062:	f04f 0300 	mov.w	r3, #0
 8008066:	21a0      	movs	r1, #160	; 0xa0
 8008068:	2000      	movs	r0, #0
 800806a:	f001 fe0b 	bl	8009c84 <AFE_WriteReg>

	/* AUX4 OverVoltage Threshold : 4.15V @ 0C */
	AFE_WriteReg(BQ_ADDR, 164, 0XD47A, 2, FRMWRT_ALL_NR);
 800806e:	2370      	movs	r3, #112	; 0x70
 8008070:	9301      	str	r3, [sp, #4]
 8008072:	2302      	movs	r3, #2
 8008074:	9300      	str	r3, [sp, #0]
 8008076:	f24d 427a 	movw	r2, #54394	; 0xd47a
 800807a:	f04f 0300 	mov.w	r3, #0
 800807e:	21a4      	movs	r1, #164	; 0xa4
 8008080:	2000      	movs	r0, #0
 8008082:	f001 fdff 	bl	8009c84 <AFE_WriteReg>

	/* AUX5 OverVoltage Threshold : 4.15V @ 0C */
	AFE_WriteReg(BQ_ADDR, 168, 0XD47A, 2, FRMWRT_ALL_NR);
 8008086:	2370      	movs	r3, #112	; 0x70
 8008088:	9301      	str	r3, [sp, #4]
 800808a:	2302      	movs	r3, #2
 800808c:	9300      	str	r3, [sp, #0]
 800808e:	f24d 427a 	movw	r2, #54394	; 0xd47a
 8008092:	f04f 0300 	mov.w	r3, #0
 8008096:	21a8      	movs	r1, #168	; 0xa8
 8008098:	2000      	movs	r0, #0
 800809a:	f001 fdf3 	bl	8009c84 <AFE_WriteReg>

	/* AUX6 OverVoltage Threshold : 4.15V @ 0C */
	AFE_WriteReg(BQ_ADDR, 172, 0XD47A, 2, FRMWRT_ALL_NR);
 800809e:	2370      	movs	r3, #112	; 0x70
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	2302      	movs	r3, #2
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	f24d 427a 	movw	r2, #54394	; 0xd47a
 80080aa:	f04f 0300 	mov.w	r3, #0
 80080ae:	21ac      	movs	r1, #172	; 0xac
 80080b0:	2000      	movs	r0, #0
 80080b2:	f001 fde7 	bl	8009c84 <AFE_WriteReg>

	/* AUX7 OverVoltage Threshold : 4.15V @ 0C */
	AFE_WriteReg(BQ_ADDR, 176, 0XD47A, 2, FRMWRT_ALL_NR);
 80080b6:	2370      	movs	r3, #112	; 0x70
 80080b8:	9301      	str	r3, [sp, #4]
 80080ba:	2302      	movs	r3, #2
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	f24d 427a 	movw	r2, #54394	; 0xd47a
 80080c2:	f04f 0300 	mov.w	r3, #0
 80080c6:	21b0      	movs	r1, #176	; 0xb0
 80080c8:	2000      	movs	r0, #0
 80080ca:	f001 fddb 	bl	8009c84 <AFE_WriteReg>
}
 80080ce:	bf00      	nop
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <BQ_AFE_UV_Config>:

void BQ_AFE_UV_Config(void)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af02      	add	r7, sp, #8
	/* Cell UnderVoltage Threshold : 3.0V */                   // (0XFFFF*3.0V)/5V = UNDERVOLTAGE THRESHOLD
	AFE_WriteReg(BQ_ADDR, 142, 0X9997, 2, FRMWRT_ALL_NR);
 80080da:	2370      	movs	r3, #112	; 0x70
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	2302      	movs	r3, #2
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	f649 1297 	movw	r2, #39319	; 0x9997
 80080e6:	f04f 0300 	mov.w	r3, #0
 80080ea:	218e      	movs	r1, #142	; 0x8e
 80080ec:	2000      	movs	r0, #0
 80080ee:	f001 fdc9 	bl	8009c84 <AFE_WriteReg>

	/* Comparator UnderVoltage Threshold : 3.0V */             // (0XFF*3.0V)/5.175V = UNDEROLTAGE THRESHOLD
	AFE_WriteReg(BQ_ADDR, 140, 0XC4, 1, FRMWRT_ALL_NR);
 80080f2:	2370      	movs	r3, #112	; 0x70
 80080f4:	9301      	str	r3, [sp, #4]
 80080f6:	2301      	movs	r3, #1
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	f04f 02c4 	mov.w	r2, #196	; 0xc4
 80080fe:	f04f 0300 	mov.w	r3, #0
 8008102:	218c      	movs	r1, #140	; 0x8c
 8008104:	2000      	movs	r0, #0
 8008106:	f001 fdbd 	bl	8009c84 <AFE_WriteReg>

	/* AUX0 UnderVoltage Threshold : 1.08V @ 60C */            // (0XFFFF*1.08V)/5V = AUX UNDERVOLTAGE
	AFE_WriteReg(BQ_ADDR, 146, 0X374C, 2, FRMWRT_ALL_NR);
 800810a:	2370      	movs	r3, #112	; 0x70
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	2302      	movs	r3, #2
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	f243 724c 	movw	r2, #14156	; 0x374c
 8008116:	f04f 0300 	mov.w	r3, #0
 800811a:	2192      	movs	r1, #146	; 0x92
 800811c:	2000      	movs	r0, #0
 800811e:	f001 fdb1 	bl	8009c84 <AFE_WriteReg>

	/* AUX1 UnderVoltage Threshold : 1.08V @ 60C */
	AFE_WriteReg(BQ_ADDR, 150, 0X374C, 2, FRMWRT_ALL_NR);
 8008122:	2370      	movs	r3, #112	; 0x70
 8008124:	9301      	str	r3, [sp, #4]
 8008126:	2302      	movs	r3, #2
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	f243 724c 	movw	r2, #14156	; 0x374c
 800812e:	f04f 0300 	mov.w	r3, #0
 8008132:	2196      	movs	r1, #150	; 0x96
 8008134:	2000      	movs	r0, #0
 8008136:	f001 fda5 	bl	8009c84 <AFE_WriteReg>

	/* AUX2 UnderVoltage Threshold : 1.08V @ 60C */
	AFE_WriteReg(BQ_ADDR, 154, 0X374C, 2, FRMWRT_ALL_NR);
 800813a:	2370      	movs	r3, #112	; 0x70
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	2302      	movs	r3, #2
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	f243 724c 	movw	r2, #14156	; 0x374c
 8008146:	f04f 0300 	mov.w	r3, #0
 800814a:	219a      	movs	r1, #154	; 0x9a
 800814c:	2000      	movs	r0, #0
 800814e:	f001 fd99 	bl	8009c84 <AFE_WriteReg>

	/* AUX3 UnderVoltage Threshold : 1.08V @ 60C */
	AFE_WriteReg(BQ_ADDR, 158, 0X374C, 2, FRMWRT_ALL_NR);
 8008152:	2370      	movs	r3, #112	; 0x70
 8008154:	9301      	str	r3, [sp, #4]
 8008156:	2302      	movs	r3, #2
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	f243 724c 	movw	r2, #14156	; 0x374c
 800815e:	f04f 0300 	mov.w	r3, #0
 8008162:	219e      	movs	r1, #158	; 0x9e
 8008164:	2000      	movs	r0, #0
 8008166:	f001 fd8d 	bl	8009c84 <AFE_WriteReg>

	/* AUX4 UnderVoltage Threshold : 1.08V @ 60C */
	AFE_WriteReg(BQ_ADDR, 162, 0X374C, 2, FRMWRT_ALL_NR);
 800816a:	2370      	movs	r3, #112	; 0x70
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	2302      	movs	r3, #2
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	f243 724c 	movw	r2, #14156	; 0x374c
 8008176:	f04f 0300 	mov.w	r3, #0
 800817a:	21a2      	movs	r1, #162	; 0xa2
 800817c:	2000      	movs	r0, #0
 800817e:	f001 fd81 	bl	8009c84 <AFE_WriteReg>

	/* AUX5 UnderVoltage Threshold : 1.08V @ 60C */
	AFE_WriteReg(BQ_ADDR, 166, 0X374C, 2, FRMWRT_ALL_NR);
 8008182:	2370      	movs	r3, #112	; 0x70
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	2302      	movs	r3, #2
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	f243 724c 	movw	r2, #14156	; 0x374c
 800818e:	f04f 0300 	mov.w	r3, #0
 8008192:	21a6      	movs	r1, #166	; 0xa6
 8008194:	2000      	movs	r0, #0
 8008196:	f001 fd75 	bl	8009c84 <AFE_WriteReg>

	/* AUX6 UnderVoltage Threshold : 1.08V @ 60C */
	AFE_WriteReg(BQ_ADDR, 170, 0X374C, 2, FRMWRT_ALL_NR);
 800819a:	2370      	movs	r3, #112	; 0x70
 800819c:	9301      	str	r3, [sp, #4]
 800819e:	2302      	movs	r3, #2
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	f243 724c 	movw	r2, #14156	; 0x374c
 80081a6:	f04f 0300 	mov.w	r3, #0
 80081aa:	21aa      	movs	r1, #170	; 0xaa
 80081ac:	2000      	movs	r0, #0
 80081ae:	f001 fd69 	bl	8009c84 <AFE_WriteReg>

	/* AUX7 UnderVoltage Threshold : 1.08V @ 60C */
	AFE_WriteReg(BQ_ADDR, 174, 0X374C, 2, FRMWRT_ALL_NR);
 80081b2:	2370      	movs	r3, #112	; 0x70
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	2302      	movs	r3, #2
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	f243 724c 	movw	r2, #14156	; 0x374c
 80081be:	f04f 0300 	mov.w	r3, #0
 80081c2:	21ae      	movs	r1, #174	; 0xae
 80081c4:	2000      	movs	r0, #0
 80081c6:	f001 fd5d 	bl	8009c84 <AFE_WriteReg>
}
 80081ca:	bf00      	nop
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <BQ_AFE_ClearAllFault>:


void BQ_AFE_ClearAllFault(void)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af02      	add	r7, sp, #8
	/* Device Status : Reset the Comm_Clear, Comm_Reset and Stack_Fault_Det */
	AFE_WriteReg(0X00, 81, 0X38, 1, FRMWRT_ALL_NR);
 80081d6:	2370      	movs	r3, #112	; 0x70
 80081d8:	9301      	str	r3, [sp, #4]
 80081da:	2301      	movs	r3, #1
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	f04f 0238 	mov.w	r2, #56	; 0x38
 80081e2:	f04f 0300 	mov.w	r3, #0
 80081e6:	2151      	movs	r1, #81	; 0x51
 80081e8:	2000      	movs	r0, #0
 80081ea:	f001 fd4b 	bl	8009c84 <AFE_WriteReg>

	/* Fault Summary : Reset all the Faults */
	AFE_WriteReg(0X00, 82, 0XFFC0, 2, FRMWRT_ALL_NR);
 80081ee:	2370      	movs	r3, #112	; 0x70
 80081f0:	9301      	str	r3, [sp, #4]
 80081f2:	2302      	movs	r3, #2
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 80081fa:	f04f 0300 	mov.w	r3, #0
 80081fe:	2152      	movs	r1, #82	; 0x52
 8008200:	2000      	movs	r0, #0
 8008202:	f001 fd3f 	bl	8009c84 <AFE_WriteReg>
}
 8008206:	bf00      	nop
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <BQ_AFE_AddressAll>:

void BQ_AFE_AddressAll(void)
{
 800820c:	b5b0      	push	{r4, r5, r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af02      	add	r7, sp, #8
	uint64_t Address = 0;
 8008212:	f04f 0200 	mov.w	r2, #0
 8008216:	f04f 0300 	mov.w	r3, #0
 800821a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	for(uint8_t i = 0; i < NO_OF_DAISY_STACK; i++)
 800821e:	2300      	movs	r3, #0
 8008220:	71fb      	strb	r3, [r7, #7]
 8008222:	e013      	b.n	800824c <BQ_AFE_AddressAll+0x40>
	{
		AFE_WriteReg(0X00, 10, Address, 1, FRMWRT_ALL_NR);
 8008224:	2370      	movs	r3, #112	; 0x70
 8008226:	9301      	str	r3, [sp, #4]
 8008228:	2301      	movs	r3, #1
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008230:	210a      	movs	r1, #10
 8008232:	2000      	movs	r0, #0
 8008234:	f001 fd26 	bl	8009c84 <AFE_WriteReg>
		Address++;
 8008238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800823c:	1c54      	adds	r4, r2, #1
 800823e:	f143 0500 	adc.w	r5, r3, #0
 8008242:	e9c7 4502 	strd	r4, r5, [r7, #8]
	for(uint8_t i = 0; i < NO_OF_DAISY_STACK; i++)
 8008246:	79fb      	ldrb	r3, [r7, #7]
 8008248:	3301      	adds	r3, #1
 800824a:	71fb      	strb	r3, [r7, #7]
 800824c:	79fb      	ldrb	r3, [r7, #7]
 800824e:	2b07      	cmp	r3, #7
 8008250:	d9e8      	bls.n	8008224 <BQ_AFE_AddressAll+0x18>
	}
}
 8008252:	bf00      	nop
 8008254:	bf00      	nop
 8008256:	3710      	adds	r7, #16
 8008258:	46bd      	mov	sp, r7
 800825a:	bdb0      	pop	{r4, r5, r7, pc}

0800825c <WWDG_Init>:
		Error_Handler();
	}
}

void WWDG_Init(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	af00      	add	r7, sp, #0
	if (HAL_WWDG_Init(&hwwdg_cfg) != HAL_OK)
 8008260:	4804      	ldr	r0, [pc, #16]	; (8008274 <WWDG_Init+0x18>)
 8008262:	f7fe fdec 	bl	8006e3e <HAL_WWDG_Init>
 8008266:	4603      	mov	r3, r0
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <WWDG_Init+0x14>
	{
		Error_Handler();
 800826c:	f7f9 f8da 	bl	8001424 <Error_Handler>
	}
}
 8008270:	bf00      	nop
 8008272:	bd80      	pop	{r7, pc}
 8008274:	20000aa4 	.word	0x20000aa4

08008278 <ADC_Init>:
 * @arguments
 * @retvar
 */

void ADC_Init(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
	if(HAL_ADC_Init(&adc_cfg) != HAL_OK)
 800827e:	4814      	ldr	r0, [pc, #80]	; (80082d0 <ADC_Init+0x58>)
 8008280:	f7f9 fb9e 	bl	80019c0 <HAL_ADC_Init>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d001      	beq.n	800828e <ADC_Init+0x16>
	{
		Error_Handler();
 800828a:	f7f9 f8cb 	bl	8001424 <Error_Handler>
	}

	for(uint8_t i=0; i<adc_channel_cfg_length; i++)
 800828e:	2300      	movs	r3, #0
 8008290:	71fb      	strb	r3, [r7, #7]
 8008292:	e012      	b.n	80082ba <ADC_Init+0x42>
	{
		if(HAL_ADC_ConfigChannel(&adc_cfg, &adc_channel_cfg[i]) != HAL_OK)
 8008294:	79fa      	ldrb	r2, [r7, #7]
 8008296:	4613      	mov	r3, r2
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	4413      	add	r3, r2
 800829c:	00db      	lsls	r3, r3, #3
 800829e:	4a0d      	ldr	r2, [pc, #52]	; (80082d4 <ADC_Init+0x5c>)
 80082a0:	4413      	add	r3, r2
 80082a2:	4619      	mov	r1, r3
 80082a4:	480a      	ldr	r0, [pc, #40]	; (80082d0 <ADC_Init+0x58>)
 80082a6:	f7f9 fcd3 	bl	8001c50 <HAL_ADC_ConfigChannel>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d001      	beq.n	80082b4 <ADC_Init+0x3c>
		{
			Error_Handler();
 80082b0:	f7f9 f8b8 	bl	8001424 <Error_Handler>
	for(uint8_t i=0; i<adc_channel_cfg_length; i++)
 80082b4:	79fb      	ldrb	r3, [r7, #7]
 80082b6:	3301      	adds	r3, #1
 80082b8:	71fb      	strb	r3, [r7, #7]
 80082ba:	4b07      	ldr	r3, [pc, #28]	; (80082d8 <ADC_Init+0x60>)
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	79fa      	ldrb	r2, [r7, #7]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d3e7      	bcc.n	8008294 <ADC_Init+0x1c>
		}
	}
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop
 80082c8:	3708      	adds	r7, #8
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop
 80082d0:	2000007c 	.word	0x2000007c
 80082d4:	200000e0 	.word	0x200000e0
 80082d8:	20000128 	.word	0x20000128

080082dc <CAN1_Init>:
 * @arguments
 * @retvar
 */

void CAN1_Init(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
	if(HAL_CAN_Init(&can_cfg) != HAL_OK)
 80082e0:	4812      	ldr	r0, [pc, #72]	; (800832c <CAN1_Init+0x50>)
 80082e2:	f7fa f895 	bl	8002410 <HAL_CAN_Init>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <CAN1_Init+0x14>
	{
		Error_Handler();
 80082ec:	f7f9 f89a 	bl	8001424 <Error_Handler>
	}

	CAN1_FilterConfig();
 80082f0:	f000 f820 	bl	8008334 <CAN1_FilterConfig>

//	GPIO_WritePin(GPIO_PIN_CAN1_STB, 0);

	if(HAL_CAN_ActivateNotification(&can_cfg, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80082f4:	2103      	movs	r1, #3
 80082f6:	480d      	ldr	r0, [pc, #52]	; (800832c <CAN1_Init+0x50>)
 80082f8:	f7fa fc99 	bl	8002c2e <HAL_CAN_ActivateNotification>
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <CAN1_Init+0x2a>
	{
		Error_Handler();
 8008302:	f7f9 f88f 	bl	8001424 <Error_Handler>
	}

	if(HAL_CAN_Start(&can_cfg) != HAL_OK)
 8008306:	4809      	ldr	r0, [pc, #36]	; (800832c <CAN1_Init+0x50>)
 8008308:	f7fa fa47 	bl	800279a <HAL_CAN_Start>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <CAN1_Init+0x3a>
	{
		Error_Handler();
 8008312:	f7f9 f887 	bl	8001424 <Error_Handler>
	}

	can_tx_cfg.DLC = 8;
 8008316:	4b06      	ldr	r3, [pc, #24]	; (8008330 <CAN1_Init+0x54>)
 8008318:	2208      	movs	r2, #8
 800831a:	611a      	str	r2, [r3, #16]
	can_tx_cfg.IDE = CAN_ID_EXT;
 800831c:	4b04      	ldr	r3, [pc, #16]	; (8008330 <CAN1_Init+0x54>)
 800831e:	2204      	movs	r2, #4
 8008320:	609a      	str	r2, [r3, #8]
	can_tx_cfg.RTR = CAN_RTR_DATA;
 8008322:	4b03      	ldr	r3, [pc, #12]	; (8008330 <CAN1_Init+0x54>)
 8008324:	2200      	movs	r2, #0
 8008326:	60da      	str	r2, [r3, #12]
}
 8008328:	bf00      	nop
 800832a:	bd80      	pop	{r7, pc}
 800832c:	2000012c 	.word	0x2000012c
 8008330:	20001938 	.word	0x20001938

08008334 <CAN1_FilterConfig>:

void CAN1_FilterConfig(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
	if(HAL_CAN_ConfigFilter(&can_cfg, &can_filter_cfg) != HAL_OK)
 8008338:	4905      	ldr	r1, [pc, #20]	; (8008350 <CAN1_FilterConfig+0x1c>)
 800833a:	4806      	ldr	r0, [pc, #24]	; (8008354 <CAN1_FilterConfig+0x20>)
 800833c:	f7fa f963 	bl	8002606 <HAL_CAN_ConfigFilter>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <CAN1_FilterConfig+0x16>
	{
		Error_Handler();
 8008346:	f7f9 f86d 	bl	8001424 <Error_Handler>
	}
}
 800834a:	bf00      	nop
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	20000154 	.word	0x20000154
 8008354:	2000012c 	.word	0x2000012c

08008358 <CAN1_Rx>:

void CAN1_Rx(void)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b088      	sub	sp, #32
 800835c:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef	can_rx_cfg;

	if(HAL_CAN_GetRxMessage(&can_cfg, CAN_RX_FIFO0, &can_rx_cfg, DataRx) != HAL_OK)
 800835e:	1d3a      	adds	r2, r7, #4
 8008360:	4ba0      	ldr	r3, [pc, #640]	; (80085e4 <CAN1_Rx+0x28c>)
 8008362:	2100      	movs	r1, #0
 8008364:	48a0      	ldr	r0, [pc, #640]	; (80085e8 <CAN1_Rx+0x290>)
 8008366:	f7fa fb50 	bl	8002a0a <HAL_CAN_GetRxMessage>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <CAN1_Rx+0x1c>
	{
		Error_Handler();
 8008370:	f7f9 f858 	bl	8001424 <Error_Handler>
	}

	VRX = can_rx_cfg.ExtId;
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4a9d      	ldr	r2, [pc, #628]	; (80085ec <CAN1_Rx+0x294>)
 8008378:	6013      	str	r3, [r2, #0]
	VRX_STD = can_rx_cfg.StdId;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a9c      	ldr	r2, [pc, #624]	; (80085f0 <CAN1_Rx+0x298>)
 800837e:	6013      	str	r3, [r2, #0]
	can_rxflag = 1;
 8008380:	4b9c      	ldr	r3, [pc, #624]	; (80085f4 <CAN1_Rx+0x29c>)
 8008382:	2201      	movs	r2, #1
 8008384:	701a      	strb	r2, [r3, #0]
	if(can_rx_cfg.RTR == CAN_RTR_REMOTE)
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	2b02      	cmp	r3, #2
 800838a:	f040 80ed 	bne.w	8008568 <CAN1_Rx+0x210>
	{
		switch(VRX)
 800838e:	4b97      	ldr	r3, [pc, #604]	; (80085ec <CAN1_Rx+0x294>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a99      	ldr	r2, [pc, #612]	; (80085f8 <CAN1_Rx+0x2a0>)
 8008394:	4293      	cmp	r3, r2
 8008396:	f000 80cc 	beq.w	8008532 <CAN1_Rx+0x1da>
 800839a:	4a97      	ldr	r2, [pc, #604]	; (80085f8 <CAN1_Rx+0x2a0>)
 800839c:	4293      	cmp	r3, r2
 800839e:	f200 8117 	bhi.w	80085d0 <CAN1_Rx+0x278>
 80083a2:	4a96      	ldr	r2, [pc, #600]	; (80085fc <CAN1_Rx+0x2a4>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	f000 80c1 	beq.w	800852c <CAN1_Rx+0x1d4>
 80083aa:	4a94      	ldr	r2, [pc, #592]	; (80085fc <CAN1_Rx+0x2a4>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	f200 810f 	bhi.w	80085d0 <CAN1_Rx+0x278>
 80083b2:	4a93      	ldr	r2, [pc, #588]	; (8008600 <CAN1_Rx+0x2a8>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	f000 80b6 	beq.w	8008526 <CAN1_Rx+0x1ce>
 80083ba:	4a91      	ldr	r2, [pc, #580]	; (8008600 <CAN1_Rx+0x2a8>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	f0c0 8107 	bcc.w	80085d0 <CAN1_Rx+0x278>
 80083c2:	4a90      	ldr	r2, [pc, #576]	; (8008604 <CAN1_Rx+0x2ac>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	f200 8103 	bhi.w	80085d0 <CAN1_Rx+0x278>
 80083ca:	4a8f      	ldr	r2, [pc, #572]	; (8008608 <CAN1_Rx+0x2b0>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	f0c0 80ff 	bcc.w	80085d0 <CAN1_Rx+0x278>
 80083d2:	4a8e      	ldr	r2, [pc, #568]	; (800860c <CAN1_Rx+0x2b4>)
 80083d4:	441a      	add	r2, r3
 80083d6:	2a3f      	cmp	r2, #63	; 0x3f
 80083d8:	f200 80fa 	bhi.w	80085d0 <CAN1_Rx+0x278>
 80083dc:	a301      	add	r3, pc, #4	; (adr r3, 80083e4 <CAN1_Rx+0x8c>)
 80083de:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80083e2:	bf00      	nop
 80083e4:	080084e5 	.word	0x080084e5
 80083e8:	080084eb 	.word	0x080084eb
 80083ec:	080084f1 	.word	0x080084f1
 80083f0:	080084f7 	.word	0x080084f7
 80083f4:	080084fd 	.word	0x080084fd
 80083f8:	08008503 	.word	0x08008503
 80083fc:	08008509 	.word	0x08008509
 8008400:	0800850f 	.word	0x0800850f
 8008404:	08008515 	.word	0x08008515
 8008408:	0800851b 	.word	0x0800851b
 800840c:	08008521 	.word	0x08008521
 8008410:	080085d1 	.word	0x080085d1
 8008414:	080085d1 	.word	0x080085d1
 8008418:	080085d1 	.word	0x080085d1
 800841c:	080085d1 	.word	0x080085d1
 8008420:	080085d1 	.word	0x080085d1
 8008424:	080085d1 	.word	0x080085d1
 8008428:	08008539 	.word	0x08008539
 800842c:	080085d1 	.word	0x080085d1
 8008430:	080085d1 	.word	0x080085d1
 8008434:	080085d1 	.word	0x080085d1
 8008438:	0800853f 	.word	0x0800853f
 800843c:	080085d1 	.word	0x080085d1
 8008440:	080085d1 	.word	0x080085d1
 8008444:	080085d1 	.word	0x080085d1
 8008448:	080085d1 	.word	0x080085d1
 800844c:	080085d1 	.word	0x080085d1
 8008450:	080085d1 	.word	0x080085d1
 8008454:	080085d1 	.word	0x080085d1
 8008458:	080085d1 	.word	0x080085d1
 800845c:	080085d1 	.word	0x080085d1
 8008460:	08008545 	.word	0x08008545
 8008464:	080085d1 	.word	0x080085d1
 8008468:	080085d1 	.word	0x080085d1
 800846c:	080085d1 	.word	0x080085d1
 8008470:	0800854b 	.word	0x0800854b
 8008474:	080085d1 	.word	0x080085d1
 8008478:	080085d1 	.word	0x080085d1
 800847c:	080085d1 	.word	0x080085d1
 8008480:	08008551 	.word	0x08008551
 8008484:	080085d1 	.word	0x080085d1
 8008488:	080085d1 	.word	0x080085d1
 800848c:	080085d1 	.word	0x080085d1
 8008490:	080085d1 	.word	0x080085d1
 8008494:	080085d1 	.word	0x080085d1
 8008498:	080085d1 	.word	0x080085d1
 800849c:	080085d1 	.word	0x080085d1
 80084a0:	080085d1 	.word	0x080085d1
 80084a4:	080085d1 	.word	0x080085d1
 80084a8:	08008557 	.word	0x08008557
 80084ac:	080085d1 	.word	0x080085d1
 80084b0:	080085d1 	.word	0x080085d1
 80084b4:	080085d1 	.word	0x080085d1
 80084b8:	0800855d 	.word	0x0800855d
 80084bc:	080085d1 	.word	0x080085d1
 80084c0:	080085d1 	.word	0x080085d1
 80084c4:	080085d1 	.word	0x080085d1
 80084c8:	080085d1 	.word	0x080085d1
 80084cc:	080085d1 	.word	0x080085d1
 80084d0:	080085d1 	.word	0x080085d1
 80084d4:	080085d1 	.word	0x080085d1
 80084d8:	080085d1 	.word	0x080085d1
 80084dc:	080085d1 	.word	0x080085d1
 80084e0:	08008563 	.word	0x08008563
		{
			case CAN_FAULTS_1:
				CAN_Send_Fault_1();
 80084e4:	f000 f99c 	bl	8008820 <CAN_Send_Fault_1>
				break;
 80084e8:	e077      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_FAULTS_2:
				CAN_Send_Fault_2();
 80084ea:	f000 f9bf 	bl	800886c <CAN_Send_Fault_2>
				break;
 80084ee:	e074      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_WARNING_1:
				CAN_Send_Warning_1();
 80084f0:	f000 f9e2 	bl	80088b8 <CAN_Send_Warning_1>
				break;
 80084f4:	e071      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_WARNING_2:
				CAN_Send_Warning_2();
 80084f6:	f000 fa05 	bl	8008904 <CAN_Send_Warning_2>
				break;
 80084fa:	e06e      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_CONTACTOR_STATUS:
				CAN_Send_Cont_Status();
 80084fc:	f000 fa28 	bl	8008950 <CAN_Send_Cont_Status>
				break;
 8008500:	e06b      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_BATTERY_SUMMARY:
				CAN_Send_Summary();
 8008502:	f000 fa53 	bl	80089ac <CAN_Send_Summary>
				break;
 8008506:	e068      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_MIN_MAX_VOLTAGE:
				CAN_Send_MinMax_VOLTAGE();
 8008508:	f000 fa92 	bl	8008a30 <CAN_Send_MinMax_VOLTAGE>
				break;
 800850c:	e065      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_MIN_MAX_TEMP:
				CAN_Send_MinMax_TEMP();
 800850e:	f000 faff 	bl	8008b10 <CAN_Send_MinMax_TEMP>
				break;
 8008512:	e062      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_PACK_SUMMARY_VOLTAGE:
				CAN_Send_PackSummary_VOLTAGE();
 8008514:	f000 fb6a 	bl	8008bec <CAN_Send_PackSummary_VOLTAGE>
				break;
 8008518:	e05f      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_PACK_SUMMARY_CURRENT:
				CAN_Send_PackSummary_CURRENT();
 800851a:	f000 fbc5 	bl	8008ca8 <CAN_Send_PackSummary_CURRENT>
				break;
 800851e:	e05c      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_PACK_SUMMARY_SOX:
				CAN_Send_PackSummary_SOX();
 8008520:	f000 fc20 	bl	8008d64 <CAN_Send_PackSummary_SOX>
				break;
 8008524:	e059      	b.n	80085da <CAN1_Rx+0x282>
//					CAN_IMD_Send();
//				}
//			    break;

			case CAN_BMS_CHG_MSG:
				 CAN_Send_CHG_MSG();
 8008526:	f000 fd81 	bl	800902c <CAN_Send_CHG_MSG>
				 break;
 800852a:	e056      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_AFE_INIT:
				 WWDG_Init();
 800852c:	f7ff fe96 	bl	800825c <WWDG_Init>
				 break;
 8008530:	e053      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_ALL_MSSG:
				 CAN_Send_MASTER_PACK();
 8008532:	f000 fc73 	bl	8008e1c <CAN_Send_MASTER_PACK>
				 break;
 8008536:	e050      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_MASTER_PACK:
				 CAN_Send_MASTER_PACK();
 8008538:	f000 fc70 	bl	8008e1c <CAN_Send_MASTER_PACK>
				 break;
 800853c:	e04d      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_SLAVE_1:
				 CAN_Send_Slave_PACK();
 800853e:	f000 fce9 	bl	8008f14 <CAN_Send_Slave_PACK>
				 break;
 8008542:	e04a      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_SLAVE_2:
				 CAN_Send_Slave_PACK();
 8008544:	f000 fce6 	bl	8008f14 <CAN_Send_Slave_PACK>
				 break;
 8008548:	e047      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_SLAVE_3:
				 CAN_Send_Slave_PACK();
 800854a:	f000 fce3 	bl	8008f14 <CAN_Send_Slave_PACK>
				 break;
 800854e:	e044      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_SLAVE_4:
				 CAN_Send_Slave_PACK();
 8008550:	f000 fce0 	bl	8008f14 <CAN_Send_Slave_PACK>
				 break;
 8008554:	e041      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_SLAVE_5:
				 CAN_Send_Slave_PACK();
 8008556:	f000 fcdd 	bl	8008f14 <CAN_Send_Slave_PACK>
				 break;
 800855a:	e03e      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_SLAVE_6:
				 CAN_Send_Slave_PACK();
 800855c:	f000 fcda 	bl	8008f14 <CAN_Send_Slave_PACK>
				 break;
 8008560:	e03b      	b.n	80085da <CAN1_Rx+0x282>

			case CAN_SLAVE_7:
				 CAN_Send_Slave_PACK();
 8008562:	f000 fcd7 	bl	8008f14 <CAN_Send_Slave_PACK>
				 break;
 8008566:	e038      	b.n	80085da <CAN1_Rx+0x282>
//				CAN_Send_All_BalancingSummary();
				break;
		}

	}
	else if(can_rx_cfg.RTR == CAN_RTR_DATA)
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d132      	bne.n	80085d4 <CAN1_Rx+0x27c>
	{
		switch(VRX)
 800856e:	4b1f      	ldr	r3, [pc, #124]	; (80085ec <CAN1_Rx+0x294>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a27      	ldr	r2, [pc, #156]	; (8008610 <CAN1_Rx+0x2b8>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d028      	beq.n	80085ca <CAN1_Rx+0x272>
 8008578:	4a25      	ldr	r2, [pc, #148]	; (8008610 <CAN1_Rx+0x2b8>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d32c      	bcc.n	80085d8 <CAN1_Rx+0x280>
 800857e:	4a1f      	ldr	r2, [pc, #124]	; (80085fc <CAN1_Rx+0x2a4>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d829      	bhi.n	80085d8 <CAN1_Rx+0x280>
 8008584:	4a23      	ldr	r2, [pc, #140]	; (8008614 <CAN1_Rx+0x2bc>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d326      	bcc.n	80085d8 <CAN1_Rx+0x280>
 800858a:	4a23      	ldr	r2, [pc, #140]	; (8008618 <CAN1_Rx+0x2c0>)
 800858c:	441a      	add	r2, r3
 800858e:	2a04      	cmp	r2, #4
 8008590:	d822      	bhi.n	80085d8 <CAN1_Rx+0x280>
 8008592:	a301      	add	r3, pc, #4	; (adr r3, 8008598 <CAN1_Rx+0x240>)
 8008594:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8008598:	080085ad 	.word	0x080085ad
 800859c:	080085b3 	.word	0x080085b3
 80085a0:	080085b9 	.word	0x080085b9
 80085a4:	080085bf 	.word	0x080085bf
 80085a8:	080085c5 	.word	0x080085c5
//		   case CAN_IMD_ID:
//			    IMD_read();
//			    break;

		   case MAIN_CONT_SEQ:
			    CAN_MAIN_SEQ();
 80085ac:	f000 f840 	bl	8008630 <CAN_MAIN_SEQ>
			    break;
 80085b0:	e013      	b.n	80085da <CAN1_Rx+0x282>

		   case SLOW_CHR_SEQ:
			    CAN_SLOW_CHR_SEQ();
 80085b2:	f000 f857 	bl	8008664 <CAN_SLOW_CHR_SEQ>
			    break;
 80085b6:	e010      	b.n	80085da <CAN1_Rx+0x282>

		   case FAST_CHR_SEQ:
			    CAN_FAST_CHR_SEQ();
 80085b8:	f000 f86e 	bl	8008698 <CAN_FAST_CHR_SEQ>
			    break;
 80085bc:	e00d      	b.n	80085da <CAN1_Rx+0x282>

		   case HVAC_ENABLE:
			    CAN_HVAC_ENABLE();
 80085be:	f000 f885 	bl	80086cc <CAN_HVAC_ENABLE>
			    break;
 80085c2:	e00a      	b.n	80085da <CAN1_Rx+0x282>

		   case CAN_CHR_BIT:
			    CAN_CHR_BIT_SET();
 80085c4:	f000 fd7e 	bl	80090c4 <CAN_CHR_BIT_SET>
			    break;
 80085c8:	e007      	b.n	80085da <CAN1_Rx+0x282>

		   case CAN_CHG_BMS_MSG:
			    CAN_Rev_CHG_MSG();
 80085ca:	f000 fd8b 	bl	80090e4 <CAN_Rev_CHG_MSG>
			    break;
 80085ce:	e004      	b.n	80085da <CAN1_Rx+0x282>
				break;
 80085d0:	bf00      	nop
 80085d2:	e002      	b.n	80085da <CAN1_Rx+0x282>
//				   T_read();
//			   if(VRX >= Max_Min_CV_S1 && VRX <= Max_Min_CV_S2)
//				   MaxMin_Voltage_read();
			   break;
		}
	}
 80085d4:	bf00      	nop
 80085d6:	e000      	b.n	80085da <CAN1_Rx+0x282>
			   break;
 80085d8:	bf00      	nop

}
 80085da:	bf00      	nop
 80085dc:	3720      	adds	r7, #32
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20001920 	.word	0x20001920
 80085e8:	2000012c 	.word	0x2000012c
 80085ec:	2000192c 	.word	0x2000192c
 80085f0:	20001930 	.word	0x20001930
 80085f4:	20001928 	.word	0x20001928
 80085f8:	19090500 	.word	0x19090500
 80085fc:	19090406 	.word	0x19090406
 8008600:	1806e5f4 	.word	0x1806e5f4
 8008604:	19090340 	.word	0x19090340
 8008608:	19090301 	.word	0x19090301
 800860c:	e6f6fcff 	.word	0xe6f6fcff
 8008610:	18ff50e5 	.word	0x18ff50e5
 8008614:	19090402 	.word	0x19090402
 8008618:	e6f6fbfe 	.word	0xe6f6fbfe

0800861c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
//	HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
	CAN1_Rx();
 8008624:	f7ff fe98 	bl	8008358 <CAN1_Rx>
//	CAN_Request = 1;
}
 8008628:	bf00      	nop
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <CAN_MAIN_SEQ>:

void CAN_MAIN_SEQ(void)
{
 8008630:	b480      	push	{r7}
 8008632:	af00      	add	r7, sp, #0
	if(DataRx[0] == 1)
 8008634:	4b09      	ldr	r3, [pc, #36]	; (800865c <CAN_MAIN_SEQ+0x2c>)
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d103      	bne.n	8008644 <CAN_MAIN_SEQ+0x14>
		Req_MainSeq = 1;
 800863c:	4b08      	ldr	r3, [pc, #32]	; (8008660 <CAN_MAIN_SEQ+0x30>)
 800863e:	2201      	movs	r2, #1
 8008640:	701a      	strb	r2, [r3, #0]
	else if(DataRx[0] == 0)
		Req_MainSeq = 0;
//	Req_ContDisable = 0;
//	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, &Data, &TxMailBox);
}
 8008642:	e006      	b.n	8008652 <CAN_MAIN_SEQ+0x22>
	else if(DataRx[0] == 0)
 8008644:	4b05      	ldr	r3, [pc, #20]	; (800865c <CAN_MAIN_SEQ+0x2c>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d102      	bne.n	8008652 <CAN_MAIN_SEQ+0x22>
		Req_MainSeq = 0;
 800864c:	4b04      	ldr	r3, [pc, #16]	; (8008660 <CAN_MAIN_SEQ+0x30>)
 800864e:	2200      	movs	r2, #0
 8008650:	701a      	strb	r2, [r3, #0]
}
 8008652:	bf00      	nop
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	20001920 	.word	0x20001920
 8008660:	20001950 	.word	0x20001950

08008664 <CAN_SLOW_CHR_SEQ>:

void CAN_SLOW_CHR_SEQ(void)
{
 8008664:	b480      	push	{r7}
 8008666:	af00      	add	r7, sp, #0
	if(DataRx[0] == 1)
 8008668:	4b09      	ldr	r3, [pc, #36]	; (8008690 <CAN_SLOW_CHR_SEQ+0x2c>)
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d103      	bne.n	8008678 <CAN_SLOW_CHR_SEQ+0x14>
		Req_SlowChrSeq = 1;
 8008670:	4b08      	ldr	r3, [pc, #32]	; (8008694 <CAN_SLOW_CHR_SEQ+0x30>)
 8008672:	2201      	movs	r2, #1
 8008674:	701a      	strb	r2, [r3, #0]

	else if(DataRx[0] == 0)
		Req_SlowChrSeq = 0;
}
 8008676:	e006      	b.n	8008686 <CAN_SLOW_CHR_SEQ+0x22>
	else if(DataRx[0] == 0)
 8008678:	4b05      	ldr	r3, [pc, #20]	; (8008690 <CAN_SLOW_CHR_SEQ+0x2c>)
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d102      	bne.n	8008686 <CAN_SLOW_CHR_SEQ+0x22>
		Req_SlowChrSeq = 0;
 8008680:	4b04      	ldr	r3, [pc, #16]	; (8008694 <CAN_SLOW_CHR_SEQ+0x30>)
 8008682:	2200      	movs	r2, #0
 8008684:	701a      	strb	r2, [r3, #0]
}
 8008686:	bf00      	nop
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	20001920 	.word	0x20001920
 8008694:	20001951 	.word	0x20001951

08008698 <CAN_FAST_CHR_SEQ>:

void CAN_FAST_CHR_SEQ(void)
{
 8008698:	b480      	push	{r7}
 800869a:	af00      	add	r7, sp, #0
	if(DataRx[0] == 1)
 800869c:	4b09      	ldr	r3, [pc, #36]	; (80086c4 <CAN_FAST_CHR_SEQ+0x2c>)
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d103      	bne.n	80086ac <CAN_FAST_CHR_SEQ+0x14>
		Req_FastChrSeq = 1;
 80086a4:	4b08      	ldr	r3, [pc, #32]	; (80086c8 <CAN_FAST_CHR_SEQ+0x30>)
 80086a6:	2201      	movs	r2, #1
 80086a8:	701a      	strb	r2, [r3, #0]

	else if(DataRx[0] == 0)
		Req_FastChrSeq = 0;
}
 80086aa:	e006      	b.n	80086ba <CAN_FAST_CHR_SEQ+0x22>
	else if(DataRx[0] == 0)
 80086ac:	4b05      	ldr	r3, [pc, #20]	; (80086c4 <CAN_FAST_CHR_SEQ+0x2c>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d102      	bne.n	80086ba <CAN_FAST_CHR_SEQ+0x22>
		Req_FastChrSeq = 0;
 80086b4:	4b04      	ldr	r3, [pc, #16]	; (80086c8 <CAN_FAST_CHR_SEQ+0x30>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	701a      	strb	r2, [r3, #0]
}
 80086ba:	bf00      	nop
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	20001920 	.word	0x20001920
 80086c8:	20001952 	.word	0x20001952

080086cc <CAN_HVAC_ENABLE>:

void CAN_HVAC_ENABLE(void)
{
 80086cc:	b480      	push	{r7}
 80086ce:	af00      	add	r7, sp, #0
	if(DataRx[0] == 1)
 80086d0:	4b09      	ldr	r3, [pc, #36]	; (80086f8 <CAN_HVAC_ENABLE+0x2c>)
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d103      	bne.n	80086e0 <CAN_HVAC_ENABLE+0x14>
		Req_HVACSeq = 1;
 80086d8:	4b08      	ldr	r3, [pc, #32]	; (80086fc <CAN_HVAC_ENABLE+0x30>)
 80086da:	2201      	movs	r2, #1
 80086dc:	701a      	strb	r2, [r3, #0]

	else if(DataRx[0] == 0)
		Req_HVACSeq = 0;
}
 80086de:	e006      	b.n	80086ee <CAN_HVAC_ENABLE+0x22>
	else if(DataRx[0] == 0)
 80086e0:	4b05      	ldr	r3, [pc, #20]	; (80086f8 <CAN_HVAC_ENABLE+0x2c>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d102      	bne.n	80086ee <CAN_HVAC_ENABLE+0x22>
		Req_HVACSeq = 0;
 80086e8:	4b04      	ldr	r3, [pc, #16]	; (80086fc <CAN_HVAC_ENABLE+0x30>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	701a      	strb	r2, [r3, #0]
}
 80086ee:	bf00      	nop
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	20001920 	.word	0x20001920
 80086fc:	20001953 	.word	0x20001953

08008700 <CAN_MAIN_SEQ_CPL>:

void CAN_MAIN_SEQ_CPL(void)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
	uint8_t Data = 1;
 8008706:	2301      	movs	r3, #1
 8008708:	71fb      	strb	r3, [r7, #7]

	can_tx_cfg.DLC = 1;
 800870a:	4b0b      	ldr	r3, [pc, #44]	; (8008738 <CAN_MAIN_SEQ_CPL+0x38>)
 800870c:	2201      	movs	r2, #1
 800870e:	611a      	str	r2, [r3, #16]
	can_tx_cfg.IDE = CAN_ID_EXT;
 8008710:	4b09      	ldr	r3, [pc, #36]	; (8008738 <CAN_MAIN_SEQ_CPL+0x38>)
 8008712:	2204      	movs	r2, #4
 8008714:	609a      	str	r2, [r3, #8]
	can_tx_cfg.RTR = CAN_RTR_DATA;
 8008716:	4b08      	ldr	r3, [pc, #32]	; (8008738 <CAN_MAIN_SEQ_CPL+0x38>)
 8008718:	2200      	movs	r2, #0
 800871a:	60da      	str	r2, [r3, #12]
	can_tx_cfg.ExtId = MAIN_CONT_SEQ;
 800871c:	4b06      	ldr	r3, [pc, #24]	; (8008738 <CAN_MAIN_SEQ_CPL+0x38>)
 800871e:	4a07      	ldr	r2, [pc, #28]	; (800873c <CAN_MAIN_SEQ_CPL+0x3c>)
 8008720:	605a      	str	r2, [r3, #4]

	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, &Data, &TxMailBox);
 8008722:	1dfa      	adds	r2, r7, #7
 8008724:	4b06      	ldr	r3, [pc, #24]	; (8008740 <CAN_MAIN_SEQ_CPL+0x40>)
 8008726:	4904      	ldr	r1, [pc, #16]	; (8008738 <CAN_MAIN_SEQ_CPL+0x38>)
 8008728:	4806      	ldr	r0, [pc, #24]	; (8008744 <CAN_MAIN_SEQ_CPL+0x44>)
 800872a:	f7fa f87a 	bl	8002822 <HAL_CAN_AddTxMessage>
}
 800872e:	bf00      	nop
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	20001938 	.word	0x20001938
 800873c:	19090402 	.word	0x19090402
 8008740:	20001934 	.word	0x20001934
 8008744:	2000012c 	.word	0x2000012c

08008748 <CAN_SLOW_CHR_SEQ_CPL>:

void CAN_SLOW_CHR_SEQ_CPL(void)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
	uint8_t Data = 1;
 800874e:	2301      	movs	r3, #1
 8008750:	71fb      	strb	r3, [r7, #7]

	can_tx_cfg.DLC = 1;
 8008752:	4b0b      	ldr	r3, [pc, #44]	; (8008780 <CAN_SLOW_CHR_SEQ_CPL+0x38>)
 8008754:	2201      	movs	r2, #1
 8008756:	611a      	str	r2, [r3, #16]
	can_tx_cfg.IDE = CAN_ID_EXT;
 8008758:	4b09      	ldr	r3, [pc, #36]	; (8008780 <CAN_SLOW_CHR_SEQ_CPL+0x38>)
 800875a:	2204      	movs	r2, #4
 800875c:	609a      	str	r2, [r3, #8]
	can_tx_cfg.RTR = CAN_RTR_DATA;
 800875e:	4b08      	ldr	r3, [pc, #32]	; (8008780 <CAN_SLOW_CHR_SEQ_CPL+0x38>)
 8008760:	2200      	movs	r2, #0
 8008762:	60da      	str	r2, [r3, #12]
	can_tx_cfg.ExtId = SLOW_CHR_SEQ;
 8008764:	4b06      	ldr	r3, [pc, #24]	; (8008780 <CAN_SLOW_CHR_SEQ_CPL+0x38>)
 8008766:	4a07      	ldr	r2, [pc, #28]	; (8008784 <CAN_SLOW_CHR_SEQ_CPL+0x3c>)
 8008768:	605a      	str	r2, [r3, #4]

	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, &Data, &TxMailBox);
 800876a:	1dfa      	adds	r2, r7, #7
 800876c:	4b06      	ldr	r3, [pc, #24]	; (8008788 <CAN_SLOW_CHR_SEQ_CPL+0x40>)
 800876e:	4904      	ldr	r1, [pc, #16]	; (8008780 <CAN_SLOW_CHR_SEQ_CPL+0x38>)
 8008770:	4806      	ldr	r0, [pc, #24]	; (800878c <CAN_SLOW_CHR_SEQ_CPL+0x44>)
 8008772:	f7fa f856 	bl	8002822 <HAL_CAN_AddTxMessage>
}
 8008776:	bf00      	nop
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20001938 	.word	0x20001938
 8008784:	19090403 	.word	0x19090403
 8008788:	20001934 	.word	0x20001934
 800878c:	2000012c 	.word	0x2000012c

08008790 <CAN_FAST_CHR_SEQ_CPL>:

void CAN_FAST_CHR_SEQ_CPL(void)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0
	uint8_t Data = 1;
 8008796:	2301      	movs	r3, #1
 8008798:	71fb      	strb	r3, [r7, #7]

	can_tx_cfg.DLC = 1;
 800879a:	4b0b      	ldr	r3, [pc, #44]	; (80087c8 <CAN_FAST_CHR_SEQ_CPL+0x38>)
 800879c:	2201      	movs	r2, #1
 800879e:	611a      	str	r2, [r3, #16]
	can_tx_cfg.IDE = CAN_ID_EXT;
 80087a0:	4b09      	ldr	r3, [pc, #36]	; (80087c8 <CAN_FAST_CHR_SEQ_CPL+0x38>)
 80087a2:	2204      	movs	r2, #4
 80087a4:	609a      	str	r2, [r3, #8]
	can_tx_cfg.RTR = CAN_RTR_DATA;
 80087a6:	4b08      	ldr	r3, [pc, #32]	; (80087c8 <CAN_FAST_CHR_SEQ_CPL+0x38>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	60da      	str	r2, [r3, #12]
	can_tx_cfg.ExtId = FAST_CHR_SEQ;
 80087ac:	4b06      	ldr	r3, [pc, #24]	; (80087c8 <CAN_FAST_CHR_SEQ_CPL+0x38>)
 80087ae:	4a07      	ldr	r2, [pc, #28]	; (80087cc <CAN_FAST_CHR_SEQ_CPL+0x3c>)
 80087b0:	605a      	str	r2, [r3, #4]

	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, &Data, &TxMailBox);
 80087b2:	1dfa      	adds	r2, r7, #7
 80087b4:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <CAN_FAST_CHR_SEQ_CPL+0x40>)
 80087b6:	4904      	ldr	r1, [pc, #16]	; (80087c8 <CAN_FAST_CHR_SEQ_CPL+0x38>)
 80087b8:	4806      	ldr	r0, [pc, #24]	; (80087d4 <CAN_FAST_CHR_SEQ_CPL+0x44>)
 80087ba:	f7fa f832 	bl	8002822 <HAL_CAN_AddTxMessage>
}
 80087be:	bf00      	nop
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20001938 	.word	0x20001938
 80087cc:	19090404 	.word	0x19090404
 80087d0:	20001934 	.word	0x20001934
 80087d4:	2000012c 	.word	0x2000012c

080087d8 <CAN_HVAC_SEQ_CPL>:

void CAN_HVAC_SEQ_CPL(void)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
	uint8_t Data = 1;
 80087de:	2301      	movs	r3, #1
 80087e0:	71fb      	strb	r3, [r7, #7]

	can_tx_cfg.DLC = 1;
 80087e2:	4b0b      	ldr	r3, [pc, #44]	; (8008810 <CAN_HVAC_SEQ_CPL+0x38>)
 80087e4:	2201      	movs	r2, #1
 80087e6:	611a      	str	r2, [r3, #16]
	can_tx_cfg.IDE = CAN_ID_EXT;
 80087e8:	4b09      	ldr	r3, [pc, #36]	; (8008810 <CAN_HVAC_SEQ_CPL+0x38>)
 80087ea:	2204      	movs	r2, #4
 80087ec:	609a      	str	r2, [r3, #8]
	can_tx_cfg.RTR = CAN_RTR_DATA;
 80087ee:	4b08      	ldr	r3, [pc, #32]	; (8008810 <CAN_HVAC_SEQ_CPL+0x38>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	60da      	str	r2, [r3, #12]
	can_tx_cfg.ExtId = HVAC_ENABLE;
 80087f4:	4b06      	ldr	r3, [pc, #24]	; (8008810 <CAN_HVAC_SEQ_CPL+0x38>)
 80087f6:	4a07      	ldr	r2, [pc, #28]	; (8008814 <CAN_HVAC_SEQ_CPL+0x3c>)
 80087f8:	605a      	str	r2, [r3, #4]

	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, &Data, &TxMailBox);
 80087fa:	1dfa      	adds	r2, r7, #7
 80087fc:	4b06      	ldr	r3, [pc, #24]	; (8008818 <CAN_HVAC_SEQ_CPL+0x40>)
 80087fe:	4904      	ldr	r1, [pc, #16]	; (8008810 <CAN_HVAC_SEQ_CPL+0x38>)
 8008800:	4806      	ldr	r0, [pc, #24]	; (800881c <CAN_HVAC_SEQ_CPL+0x44>)
 8008802:	f7fa f80e 	bl	8002822 <HAL_CAN_AddTxMessage>
}
 8008806:	bf00      	nop
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20001938 	.word	0x20001938
 8008814:	19090405 	.word	0x19090405
 8008818:	20001934 	.word	0x20001934
 800881c:	2000012c 	.word	0x2000012c

08008820 <CAN_Send_Fault_1>:

void CAN_Send_Fault_1(void)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b088      	sub	sp, #32
 8008824:	af00      	add	r7, sp, #0
	uint32_t TxMailBox;
	CAN_TxHeaderTypeDef	can_tx_cfg;

	can_tx_cfg.DLC = 8;
 8008826:	2308      	movs	r3, #8
 8008828:	617b      	str	r3, [r7, #20]
	can_tx_cfg.IDE = CAN_ID_EXT;
 800882a:	2304      	movs	r3, #4
 800882c:	60fb      	str	r3, [r7, #12]
	can_tx_cfg.ExtId = 0X19090301;
 800882e:	4b0c      	ldr	r3, [pc, #48]	; (8008860 <CAN_Send_Fault_1+0x40>)
 8008830:	60bb      	str	r3, [r7, #8]
	can_tx_cfg.RTR = CAN_RTR_DATA;
 8008832:	2300      	movs	r3, #0
 8008834:	613b      	str	r3, [r7, #16]

	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, FAULT_ARRAY, &TxMailBox);
 8008836:	f107 031c 	add.w	r3, r7, #28
 800883a:	1d39      	adds	r1, r7, #4
 800883c:	4a09      	ldr	r2, [pc, #36]	; (8008864 <CAN_Send_Fault_1+0x44>)
 800883e:	480a      	ldr	r0, [pc, #40]	; (8008868 <CAN_Send_Fault_1+0x48>)
 8008840:	f7f9 ffef 	bl	8002822 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&can_cfg, TxMailBox));
 8008844:	bf00      	nop
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	4619      	mov	r1, r3
 800884a:	4807      	ldr	r0, [pc, #28]	; (8008868 <CAN_Send_Fault_1+0x48>)
 800884c:	f7fa f8b9 	bl	80029c2 <HAL_CAN_IsTxMessagePending>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d1f7      	bne.n	8008846 <CAN_Send_Fault_1+0x26>
}
 8008856:	bf00      	nop
 8008858:	bf00      	nop
 800885a:	3720      	adds	r7, #32
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	19090301 	.word	0x19090301
 8008864:	200019e4 	.word	0x200019e4
 8008868:	2000012c 	.word	0x2000012c

0800886c <CAN_Send_Fault_2>:

void CAN_Send_Fault_2(void)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b088      	sub	sp, #32
 8008870:	af00      	add	r7, sp, #0
	uint32_t TxMailBox;
	CAN_TxHeaderTypeDef	can_tx_cfg;

	can_tx_cfg.DLC = 8;
 8008872:	2308      	movs	r3, #8
 8008874:	617b      	str	r3, [r7, #20]
	can_tx_cfg.IDE = CAN_ID_EXT;
 8008876:	2304      	movs	r3, #4
 8008878:	60fb      	str	r3, [r7, #12]
	can_tx_cfg.ExtId = 0X19090302;
 800887a:	4b0c      	ldr	r3, [pc, #48]	; (80088ac <CAN_Send_Fault_2+0x40>)
 800887c:	60bb      	str	r3, [r7, #8]
	can_tx_cfg.RTR = CAN_RTR_DATA;
 800887e:	2300      	movs	r3, #0
 8008880:	613b      	str	r3, [r7, #16]

	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, &FAULT_ARRAY[8], &TxMailBox);
 8008882:	f107 031c 	add.w	r3, r7, #28
 8008886:	1d39      	adds	r1, r7, #4
 8008888:	4a09      	ldr	r2, [pc, #36]	; (80088b0 <CAN_Send_Fault_2+0x44>)
 800888a:	480a      	ldr	r0, [pc, #40]	; (80088b4 <CAN_Send_Fault_2+0x48>)
 800888c:	f7f9 ffc9 	bl	8002822 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&can_cfg, TxMailBox));
 8008890:	bf00      	nop
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	4619      	mov	r1, r3
 8008896:	4807      	ldr	r0, [pc, #28]	; (80088b4 <CAN_Send_Fault_2+0x48>)
 8008898:	f7fa f893 	bl	80029c2 <HAL_CAN_IsTxMessagePending>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1f7      	bne.n	8008892 <CAN_Send_Fault_2+0x26>
}
 80088a2:	bf00      	nop
 80088a4:	bf00      	nop
 80088a6:	3720      	adds	r7, #32
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	19090302 	.word	0x19090302
 80088b0:	200019ec 	.word	0x200019ec
 80088b4:	2000012c 	.word	0x2000012c

080088b8 <CAN_Send_Warning_1>:

void CAN_Send_Warning_1(void)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b088      	sub	sp, #32
 80088bc:	af00      	add	r7, sp, #0
	uint32_t TxMailBox;
	CAN_TxHeaderTypeDef	can_tx_cfg;

	can_tx_cfg.DLC = 8;
 80088be:	2308      	movs	r3, #8
 80088c0:	617b      	str	r3, [r7, #20]
	can_tx_cfg.IDE = CAN_ID_EXT;
 80088c2:	2304      	movs	r3, #4
 80088c4:	60fb      	str	r3, [r7, #12]
	can_tx_cfg.ExtId = 0X19090303;
 80088c6:	4b0c      	ldr	r3, [pc, #48]	; (80088f8 <CAN_Send_Warning_1+0x40>)
 80088c8:	60bb      	str	r3, [r7, #8]
	can_tx_cfg.RTR = CAN_RTR_DATA;
 80088ca:	2300      	movs	r3, #0
 80088cc:	613b      	str	r3, [r7, #16]

	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, WARNING_ARRAY, &TxMailBox);
 80088ce:	f107 031c 	add.w	r3, r7, #28
 80088d2:	1d39      	adds	r1, r7, #4
 80088d4:	4a09      	ldr	r2, [pc, #36]	; (80088fc <CAN_Send_Warning_1+0x44>)
 80088d6:	480a      	ldr	r0, [pc, #40]	; (8008900 <CAN_Send_Warning_1+0x48>)
 80088d8:	f7f9 ffa3 	bl	8002822 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&can_cfg, TxMailBox));
 80088dc:	bf00      	nop
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	4619      	mov	r1, r3
 80088e2:	4807      	ldr	r0, [pc, #28]	; (8008900 <CAN_Send_Warning_1+0x48>)
 80088e4:	f7fa f86d 	bl	80029c2 <HAL_CAN_IsTxMessagePending>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1f7      	bne.n	80088de <CAN_Send_Warning_1+0x26>
}
 80088ee:	bf00      	nop
 80088f0:	bf00      	nop
 80088f2:	3720      	adds	r7, #32
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	19090303 	.word	0x19090303
 80088fc:	200011ec 	.word	0x200011ec
 8008900:	2000012c 	.word	0x2000012c

08008904 <CAN_Send_Warning_2>:

void CAN_Send_Warning_2(void)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b088      	sub	sp, #32
 8008908:	af00      	add	r7, sp, #0
	uint32_t TxMailBox;
	CAN_TxHeaderTypeDef	can_tx_cfg;

	can_tx_cfg.DLC = 8;
 800890a:	2308      	movs	r3, #8
 800890c:	617b      	str	r3, [r7, #20]
	can_tx_cfg.IDE = CAN_ID_EXT;
 800890e:	2304      	movs	r3, #4
 8008910:	60fb      	str	r3, [r7, #12]
	can_tx_cfg.ExtId = 0X19090304;
 8008912:	4b0c      	ldr	r3, [pc, #48]	; (8008944 <CAN_Send_Warning_2+0x40>)
 8008914:	60bb      	str	r3, [r7, #8]
	can_tx_cfg.RTR = CAN_RTR_DATA;
 8008916:	2300      	movs	r3, #0
 8008918:	613b      	str	r3, [r7, #16]

	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, &WARNING_ARRAY[8], &TxMailBox);
 800891a:	f107 031c 	add.w	r3, r7, #28
 800891e:	1d39      	adds	r1, r7, #4
 8008920:	4a09      	ldr	r2, [pc, #36]	; (8008948 <CAN_Send_Warning_2+0x44>)
 8008922:	480a      	ldr	r0, [pc, #40]	; (800894c <CAN_Send_Warning_2+0x48>)
 8008924:	f7f9 ff7d 	bl	8002822 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&can_cfg, TxMailBox));
 8008928:	bf00      	nop
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	4619      	mov	r1, r3
 800892e:	4807      	ldr	r0, [pc, #28]	; (800894c <CAN_Send_Warning_2+0x48>)
 8008930:	f7fa f847 	bl	80029c2 <HAL_CAN_IsTxMessagePending>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1f7      	bne.n	800892a <CAN_Send_Warning_2+0x26>
}
 800893a:	bf00      	nop
 800893c:	bf00      	nop
 800893e:	3720      	adds	r7, #32
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	19090304 	.word	0x19090304
 8008948:	200011f4 	.word	0x200011f4
 800894c:	2000012c 	.word	0x2000012c

08008950 <CAN_Send_Cont_Status>:

void CAN_Send_Cont_Status(void)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b08c      	sub	sp, #48	; 0x30
 8008954:	af00      	add	r7, sp, #0
	uint8_t Data[8] = {0};
 8008956:	2300      	movs	r3, #0
 8008958:	62bb      	str	r3, [r7, #40]	; 0x28
 800895a:	2300      	movs	r3, #0
 800895c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t TxMailBox;
	CAN_TxHeaderTypeDef	can_tx_cfg;
	DATABASE_CONTACTOR_s	can_database_contactor;

	DATABASE_READ((void*)(&can_database_contactor), DATABASE_CONTACTOR);
 800895e:	463b      	mov	r3, r7
 8008960:	210e      	movs	r1, #14
 8008962:	4618      	mov	r0, r3
 8008964:	f000 ffcc 	bl	8009900 <DATABASE_READ>

	Data[0] = can_database_contactor.CONT_MAIN_PLUS;
 8008968:	79bb      	ldrb	r3, [r7, #6]
 800896a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	Data[1] = can_database_contactor.CONT_MAIN_MINUS;
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	Data[2] = can_database_contactor.CONT_PRECHARGE;
 8008974:	7a3b      	ldrb	r3, [r7, #8]
 8008976:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	can_tx_cfg.DLC = 8;
 800897a:	2308      	movs	r3, #8
 800897c:	61fb      	str	r3, [r7, #28]
	can_tx_cfg.IDE = CAN_ID_EXT;
 800897e:	2304      	movs	r3, #4
 8008980:	617b      	str	r3, [r7, #20]
	can_tx_cfg.ExtId = 0X19090305;
 8008982:	4b08      	ldr	r3, [pc, #32]	; (80089a4 <CAN_Send_Cont_Status+0x54>)
 8008984:	613b      	str	r3, [r7, #16]
	can_tx_cfg.RTR = CAN_RTR_DATA;
 8008986:	2300      	movs	r3, #0
 8008988:	61bb      	str	r3, [r7, #24]

	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, Data, &TxMailBox);
 800898a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800898e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008992:	f107 010c 	add.w	r1, r7, #12
 8008996:	4804      	ldr	r0, [pc, #16]	; (80089a8 <CAN_Send_Cont_Status+0x58>)
 8008998:	f7f9 ff43 	bl	8002822 <HAL_CAN_AddTxMessage>
}
 800899c:	bf00      	nop
 800899e:	3730      	adds	r7, #48	; 0x30
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	19090305 	.word	0x19090305
 80089a8:	2000012c 	.word	0x2000012c

080089ac <CAN_Send_Summary>:

void CAN_Send_Summary(void)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b08e      	sub	sp, #56	; 0x38
 80089b0:	af00      	add	r7, sp, #0
	uint8_t Data[8] = {0};
 80089b2:	2300      	movs	r3, #0
 80089b4:	633b      	str	r3, [r7, #48]	; 0x30
 80089b6:	2300      	movs	r3, #0
 80089b8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TxMailBox;
	CAN_TxHeaderTypeDef	can_tx_cfg;
	DATABASE_BMS_s	can_database_bms;

	DATABASE_READ((void*)(&can_database_bms), DATABASE_BMS);
 80089ba:	1d3b      	adds	r3, r7, #4
 80089bc:	2110      	movs	r1, #16
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 ff9e 	bl	8009900 <DATABASE_READ>

	Data[0] = can_database_bms.afe_state;
 80089c4:	7abb      	ldrb	r3, [r7, #10]
 80089c6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	Data[1] = can_database_bms.bms_state;
 80089ca:	7afb      	ldrb	r3, [r7, #11]
 80089cc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	Data[2] = can_database_bms.cont_state;
 80089d0:	7b3b      	ldrb	r3, [r7, #12]
 80089d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	Data[3] = can_database_bms.afe_error;
 80089d6:	7b7b      	ldrb	r3, [r7, #13]
 80089d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	Data[4] = can_database_bms.bms_error;
 80089dc:	7bbb      	ldrb	r3, [r7, #14]
 80089de:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	Data[5] = can_database_bms.balancing_status;
 80089e2:	7cbb      	ldrb	r3, [r7, #18]
 80089e4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	can_tx_cfg.DLC = 8;
 80089e8:	2308      	movs	r3, #8
 80089ea:	627b      	str	r3, [r7, #36]	; 0x24
	can_tx_cfg.IDE = CAN_ID_EXT;
 80089ec:	2304      	movs	r3, #4
 80089ee:	61fb      	str	r3, [r7, #28]
	can_tx_cfg.ExtId = 0X19090306;
 80089f0:	4b0d      	ldr	r3, [pc, #52]	; (8008a28 <CAN_Send_Summary+0x7c>)
 80089f2:	61bb      	str	r3, [r7, #24]
	can_tx_cfg.RTR = CAN_RTR_DATA;
 80089f4:	2300      	movs	r3, #0
 80089f6:	623b      	str	r3, [r7, #32]

	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, Data, &TxMailBox);
 80089f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80089fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008a00:	f107 0114 	add.w	r1, r7, #20
 8008a04:	4809      	ldr	r0, [pc, #36]	; (8008a2c <CAN_Send_Summary+0x80>)
 8008a06:	f7f9 ff0c 	bl	8002822 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&can_cfg, TxMailBox));
 8008a0a:	bf00      	nop
 8008a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a0e:	4619      	mov	r1, r3
 8008a10:	4806      	ldr	r0, [pc, #24]	; (8008a2c <CAN_Send_Summary+0x80>)
 8008a12:	f7f9 ffd6 	bl	80029c2 <HAL_CAN_IsTxMessagePending>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1f7      	bne.n	8008a0c <CAN_Send_Summary+0x60>
}
 8008a1c:	bf00      	nop
 8008a1e:	bf00      	nop
 8008a20:	3738      	adds	r7, #56	; 0x38
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	19090306 	.word	0x19090306
 8008a2c:	2000012c 	.word	0x2000012c

08008a30 <CAN_Send_MinMax_VOLTAGE>:

void CAN_Send_MinMax_VOLTAGE(void)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b0f0      	sub	sp, #448	; 0x1c0
 8008a34:	af00      	add	r7, sp, #0
	uint8_t Data[8] = {0};
 8008a36:	2300      	movs	r3, #0
 8008a38:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

	uint32_t TxMailBox;
	CAN_TxHeaderTypeDef	can_tx_cfg;
	DATABASE_EEPROM_s can_database_eeprom;

	DATABASE_READ((void*)(&can_database_eeprom), DATABASE_EEPROM);
 8008a42:	1d3b      	adds	r3, r7, #4
 8008a44:	210d      	movs	r1, #13
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 ff5a 	bl	8009900 <DATABASE_READ>

	can_tx_cfg.DLC = 8;
 8008a4c:	2308      	movs	r3, #8
 8008a4e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	can_tx_cfg.IDE = CAN_ID_EXT;
 8008a52:	2304      	movs	r3, #4
 8008a54:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	can_tx_cfg.ExtId = 0X19090307;
 8008a58:	4b2b      	ldr	r3, [pc, #172]	; (8008b08 <CAN_Send_MinMax_VOLTAGE+0xd8>)
 8008a5a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	can_tx_cfg.RTR = CAN_RTR_DATA;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	Data[0] = (uint8_t)((can_database_eeprom.max_voltage & 0XFF00) >> 8);
 8008a64:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008a68:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008a6c:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 8008a70:	0a1b      	lsrs	r3, r3, #8
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	f887 31b8 	strb.w	r3, [r7, #440]	; 0x1b8
	Data[1] = (uint8_t)(can_database_eeprom.max_voltage & 0X00FF);
 8008a7a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008a7e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008a82:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	f887 31b9 	strb.w	r3, [r7, #441]	; 0x1b9
	Data[2] = can_database_eeprom.max_voltage_index;
 8008a8c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008a90:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008a94:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 8008a98:	f887 31ba 	strb.w	r3, [r7, #442]	; 0x1ba
	Data[3] = (uint8_t)((can_database_eeprom.min_voltage & 0XFF00) >> 8);
 8008a9c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008aa0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008aa4:	f8b3 318a 	ldrh.w	r3, [r3, #394]	; 0x18a
 8008aa8:	0a1b      	lsrs	r3, r3, #8
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb
	Data[4] = (uint8_t)(can_database_eeprom.min_voltage & 0X00FF);
 8008ab2:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008ab6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008aba:	f8b3 318a 	ldrh.w	r3, [r3, #394]	; 0x18a
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	f887 31bc 	strb.w	r3, [r7, #444]	; 0x1bc
	Data[5] = can_database_eeprom.min_voltage_index;
 8008ac4:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008ac8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008acc:	f893 318c 	ldrb.w	r3, [r3, #396]	; 0x18c
 8008ad0:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd

	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, Data, &TxMailBox);
 8008ad4:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8008ad8:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8008adc:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8008ae0:	480a      	ldr	r0, [pc, #40]	; (8008b0c <CAN_Send_MinMax_VOLTAGE+0xdc>)
 8008ae2:	f7f9 fe9e 	bl	8002822 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&can_cfg, TxMailBox));
 8008ae6:	bf00      	nop
 8008ae8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008aec:	4619      	mov	r1, r3
 8008aee:	4807      	ldr	r0, [pc, #28]	; (8008b0c <CAN_Send_MinMax_VOLTAGE+0xdc>)
 8008af0:	f7f9 ff67 	bl	80029c2 <HAL_CAN_IsTxMessagePending>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1f6      	bne.n	8008ae8 <CAN_Send_MinMax_VOLTAGE+0xb8>
}
 8008afa:	bf00      	nop
 8008afc:	bf00      	nop
 8008afe:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
 8008b06:	bf00      	nop
 8008b08:	19090307 	.word	0x19090307
 8008b0c:	2000012c 	.word	0x2000012c

08008b10 <CAN_Send_MinMax_TEMP>:

void CAN_Send_MinMax_TEMP(void)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b0f0      	sub	sp, #448	; 0x1c0
 8008b14:	af00      	add	r7, sp, #0
	uint8_t Data[8] = {0};
 8008b16:	2300      	movs	r3, #0
 8008b18:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

	uint32_t TxMailBox;
	CAN_TxHeaderTypeDef	can_tx_cfg;
	DATABASE_EEPROM_s can_database_eeprom;

	DATABASE_READ((void*)(&can_database_eeprom), DATABASE_EEPROM);
 8008b22:	1d3b      	adds	r3, r7, #4
 8008b24:	210d      	movs	r1, #13
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 feea 	bl	8009900 <DATABASE_READ>

	can_tx_cfg.DLC = 8;
 8008b2c:	2308      	movs	r3, #8
 8008b2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	can_tx_cfg.IDE = CAN_ID_EXT;
 8008b32:	2304      	movs	r3, #4
 8008b34:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	can_tx_cfg.ExtId = 0X19090308;
 8008b38:	4b2a      	ldr	r3, [pc, #168]	; (8008be4 <CAN_Send_MinMax_TEMP+0xd4>)
 8008b3a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	can_tx_cfg.RTR = CAN_RTR_DATA;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	Data[0] = (uint8_t)((can_database_eeprom.max_temperature & 0XFF00) >> 8);
 8008b44:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008b48:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008b4c:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	; 0x18e
 8008b50:	121b      	asrs	r3, r3, #8
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	f887 31b8 	strb.w	r3, [r7, #440]	; 0x1b8
	Data[1] = (uint8_t)(can_database_eeprom.max_temperature & 0X00FF);
 8008b58:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008b5c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008b60:	f9b3 318e 	ldrsh.w	r3, [r3, #398]	; 0x18e
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	f887 31b9 	strb.w	r3, [r7, #441]	; 0x1b9
	Data[2] = can_database_eeprom.max_temperature_index;
 8008b6a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008b6e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008b72:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8008b76:	f887 31ba 	strb.w	r3, [r7, #442]	; 0x1ba
	Data[3] = (uint8_t)((can_database_eeprom.min_temperature & 0XFF00) >> 8);
 8008b7a:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008b7e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008b82:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 8008b86:	121b      	asrs	r3, r3, #8
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb
	Data[4] = (uint8_t)(can_database_eeprom.min_temperature & 0X00FF);
 8008b8e:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008b92:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008b96:	f9b3 3192 	ldrsh.w	r3, [r3, #402]	; 0x192
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	f887 31bc 	strb.w	r3, [r7, #444]	; 0x1bc
	Data[5] = can_database_eeprom.min_temperature_index;
 8008ba0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008ba4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008ba8:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8008bac:	f887 31bd 	strb.w	r3, [r7, #445]	; 0x1bd

	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, Data, &TxMailBox);
 8008bb0:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8008bb4:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8008bb8:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8008bbc:	480a      	ldr	r0, [pc, #40]	; (8008be8 <CAN_Send_MinMax_TEMP+0xd8>)
 8008bbe:	f7f9 fe30 	bl	8002822 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&can_cfg, TxMailBox));
 8008bc2:	bf00      	nop
 8008bc4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4807      	ldr	r0, [pc, #28]	; (8008be8 <CAN_Send_MinMax_TEMP+0xd8>)
 8008bcc:	f7f9 fef9 	bl	80029c2 <HAL_CAN_IsTxMessagePending>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1f6      	bne.n	8008bc4 <CAN_Send_MinMax_TEMP+0xb4>
}
 8008bd6:	bf00      	nop
 8008bd8:	bf00      	nop
 8008bda:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	19090308 	.word	0x19090308
 8008be8:	2000012c 	.word	0x2000012c

08008bec <CAN_Send_PackSummary_VOLTAGE>:

void CAN_Send_PackSummary_VOLTAGE(void)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b0f0      	sub	sp, #448	; 0x1c0
 8008bf0:	af00      	add	r7, sp, #0
	uint8_t Data[8] = {0};
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	uint32_t TxMailBox;
	CAN_TxHeaderTypeDef	can_tx_cfg;
	DATABASE_EEPROM_s can_database_eeprom;

	DATABASE_READ((void*)(&can_database_eeprom), DATABASE_EEPROM);
 8008bfe:	1d3b      	adds	r3, r7, #4
 8008c00:	210d      	movs	r1, #13
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 fe7c 	bl	8009900 <DATABASE_READ>

	can_tx_cfg.DLC = 8;
 8008c08:	2308      	movs	r3, #8
 8008c0a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	can_tx_cfg.IDE = CAN_ID_EXT;
 8008c0e:	2304      	movs	r3, #4
 8008c10:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	can_tx_cfg.ExtId = 0X19090309;
 8008c14:	4b22      	ldr	r3, [pc, #136]	; (8008ca0 <CAN_Send_PackSummary_VOLTAGE+0xb4>)
 8008c16:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	can_tx_cfg.RTR = CAN_RTR_DATA;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	Data[0] = (uint8_t)((can_database_eeprom.pack_voltage & 0XFF000000) >> 24);
 8008c20:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008c24:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008c28:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8008c2c:	0e1b      	lsrs	r3, r3, #24
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	f887 31b8 	strb.w	r3, [r7, #440]	; 0x1b8
	Data[1] = (uint8_t)((can_database_eeprom.pack_voltage & 0X00FF0000) >> 16);
 8008c34:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008c38:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008c3c:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8008c40:	0c1b      	lsrs	r3, r3, #16
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	f887 31b9 	strb.w	r3, [r7, #441]	; 0x1b9
	Data[2] = (uint8_t)((can_database_eeprom.pack_voltage & 0X0000FF00) >> 8);
 8008c48:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008c4c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008c50:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8008c54:	0a1b      	lsrs	r3, r3, #8
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	f887 31ba 	strb.w	r3, [r7, #442]	; 0x1ba
	Data[3] = (uint8_t)((can_database_eeprom.pack_voltage & 0X000000FF));
 8008c5c:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008c60:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008c64:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb

	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, Data, &TxMailBox);
 8008c6e:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8008c72:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8008c76:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8008c7a:	480a      	ldr	r0, [pc, #40]	; (8008ca4 <CAN_Send_PackSummary_VOLTAGE+0xb8>)
 8008c7c:	f7f9 fdd1 	bl	8002822 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&can_cfg, TxMailBox));
 8008c80:	bf00      	nop
 8008c82:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008c86:	4619      	mov	r1, r3
 8008c88:	4806      	ldr	r0, [pc, #24]	; (8008ca4 <CAN_Send_PackSummary_VOLTAGE+0xb8>)
 8008c8a:	f7f9 fe9a 	bl	80029c2 <HAL_CAN_IsTxMessagePending>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1f6      	bne.n	8008c82 <CAN_Send_PackSummary_VOLTAGE+0x96>
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop
 8008c98:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	19090309 	.word	0x19090309
 8008ca4:	2000012c 	.word	0x2000012c

08008ca8 <CAN_Send_PackSummary_CURRENT>:

void CAN_Send_PackSummary_CURRENT(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b0f0      	sub	sp, #448	; 0x1c0
 8008cac:	af00      	add	r7, sp, #0
	uint8_t Data[8] = {0};
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	uint32_t TxMailBox;
	CAN_TxHeaderTypeDef	can_tx_cfg;
	DATABASE_EEPROM_s can_database_eeprom;

	DATABASE_READ((void*)(&can_database_eeprom), DATABASE_EEPROM);
 8008cba:	1d3b      	adds	r3, r7, #4
 8008cbc:	210d      	movs	r1, #13
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 fe1e 	bl	8009900 <DATABASE_READ>

	can_tx_cfg.DLC = 8;
 8008cc4:	2308      	movs	r3, #8
 8008cc6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	can_tx_cfg.IDE = CAN_ID_EXT;
 8008cca:	2304      	movs	r3, #4
 8008ccc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	can_tx_cfg.ExtId = 0X19090310;
 8008cd0:	4b22      	ldr	r3, [pc, #136]	; (8008d5c <CAN_Send_PackSummary_CURRENT+0xb4>)
 8008cd2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	can_tx_cfg.RTR = CAN_RTR_DATA;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	Data[0] = (uint8_t)((can_database_eeprom.current & 0XFF000000) >> 24);
 8008cdc:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008ce0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008ce4:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008ce8:	0e1b      	lsrs	r3, r3, #24
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	f887 31b8 	strb.w	r3, [r7, #440]	; 0x1b8
	Data[1] = (uint8_t)((can_database_eeprom.current & 0X00FF0000) >> 16);
 8008cf0:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008cf4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008cf8:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008cfc:	141b      	asrs	r3, r3, #16
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	f887 31b9 	strb.w	r3, [r7, #441]	; 0x1b9
	Data[2] = (uint8_t)((can_database_eeprom.current & 0X0000FF00) >> 8);
 8008d04:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008d08:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008d0c:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008d10:	121b      	asrs	r3, r3, #8
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	f887 31ba 	strb.w	r3, [r7, #442]	; 0x1ba
	Data[3] = (uint8_t)((can_database_eeprom.current & 0X000000FF));
 8008d18:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008d1c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008d20:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb

	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, Data, &TxMailBox);
 8008d2a:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8008d2e:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8008d32:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8008d36:	480a      	ldr	r0, [pc, #40]	; (8008d60 <CAN_Send_PackSummary_CURRENT+0xb8>)
 8008d38:	f7f9 fd73 	bl	8002822 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&can_cfg, TxMailBox));
 8008d3c:	bf00      	nop
 8008d3e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008d42:	4619      	mov	r1, r3
 8008d44:	4806      	ldr	r0, [pc, #24]	; (8008d60 <CAN_Send_PackSummary_CURRENT+0xb8>)
 8008d46:	f7f9 fe3c 	bl	80029c2 <HAL_CAN_IsTxMessagePending>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1f6      	bne.n	8008d3e <CAN_Send_PackSummary_CURRENT+0x96>
}
 8008d50:	bf00      	nop
 8008d52:	bf00      	nop
 8008d54:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	19090310 	.word	0x19090310
 8008d60:	2000012c 	.word	0x2000012c

08008d64 <CAN_Send_PackSummary_SOX>:

void CAN_Send_PackSummary_SOX(void)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b0f0      	sub	sp, #448	; 0x1c0
 8008d68:	af00      	add	r7, sp, #0
	uint8_t Data[8] = {0};
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8008d70:	2300      	movs	r3, #0
 8008d72:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	uint32_t TxMailBox;
	CAN_TxHeaderTypeDef	can_tx_cfg;
	DATABASE_EEPROM_s can_database_eeprom;

	DATABASE_READ((void*)(&can_database_eeprom), DATABASE_EEPROM);
 8008d76:	1d3b      	adds	r3, r7, #4
 8008d78:	210d      	movs	r1, #13
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 fdc0 	bl	8009900 <DATABASE_READ>

	can_tx_cfg.DLC = 8;
 8008d80:	2308      	movs	r3, #8
 8008d82:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	can_tx_cfg.IDE = CAN_ID_EXT;
 8008d86:	2304      	movs	r3, #4
 8008d88:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	can_tx_cfg.ExtId = 0X19090311;
 8008d8c:	4b21      	ldr	r3, [pc, #132]	; (8008e14 <CAN_Send_PackSummary_SOX+0xb0>)
 8008d8e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
	can_tx_cfg.RTR = CAN_RTR_DATA;
 8008d92:	2300      	movs	r3, #0
 8008d94:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

	Data[0] = can_database_eeprom.soc;
 8008d98:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008d9c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008da0:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
 8008da4:	f887 31b8 	strb.w	r3, [r7, #440]	; 0x1b8
	Data[1] = can_database_eeprom.soh;
 8008da8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008dac:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008db0:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
 8008db4:	f887 31b9 	strb.w	r3, [r7, #441]	; 0x1b9
	Data[2] = (uint8_t)((can_database_eeprom.cycle_count & 0XFF00) >> 8);
 8008db8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008dbc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008dc0:	f8b3 3184 	ldrh.w	r3, [r3, #388]	; 0x184
 8008dc4:	0a1b      	lsrs	r3, r3, #8
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	f887 31ba 	strb.w	r3, [r7, #442]	; 0x1ba
	Data[3] = (uint8_t)(can_database_eeprom.cycle_count & 0X00FF);
 8008dce:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008dd2:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008dd6:	f8b3 3184 	ldrh.w	r3, [r3, #388]	; 0x184
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb

	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, Data, &TxMailBox);
 8008de0:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8008de4:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8008de8:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8008dec:	480a      	ldr	r0, [pc, #40]	; (8008e18 <CAN_Send_PackSummary_SOX+0xb4>)
 8008dee:	f7f9 fd18 	bl	8002822 <HAL_CAN_AddTxMessage>
	while(HAL_CAN_IsTxMessagePending(&can_cfg, TxMailBox));
 8008df2:	bf00      	nop
 8008df4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008df8:	4619      	mov	r1, r3
 8008dfa:	4807      	ldr	r0, [pc, #28]	; (8008e18 <CAN_Send_PackSummary_SOX+0xb4>)
 8008dfc:	f7f9 fde1 	bl	80029c2 <HAL_CAN_IsTxMessagePending>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1f6      	bne.n	8008df4 <CAN_Send_PackSummary_SOX+0x90>
}
 8008e06:	bf00      	nop
 8008e08:	bf00      	nop
 8008e0a:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	19090311 	.word	0x19090311
 8008e18:	2000012c 	.word	0x2000012c

08008e1c <CAN_Send_MASTER_PACK>:

void CAN_Send_MASTER_PACK(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8008e22:	af00      	add	r7, sp, #0
	uint8_t Data[32] = {0};
 8008e24:	2300      	movs	r3, #0
 8008e26:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008e2a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8008e2e:	2200      	movs	r2, #0
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	605a      	str	r2, [r3, #4]
 8008e34:	609a      	str	r2, [r3, #8]
 8008e36:	60da      	str	r2, [r3, #12]
 8008e38:	611a      	str	r2, [r3, #16]
 8008e3a:	615a      	str	r2, [r3, #20]
 8008e3c:	619a      	str	r2, [r3, #24]
	uint32_t TxMailBox;
	CAN_TxHeaderTypeDef	can_tx_cfg;
	DATABASE_VOLTAGE_s can_database_voltage;

	DATABASE_READ((void*)(&can_database_voltage), DATABASE_VOLTAGE);
 8008e3e:	463b      	mov	r3, r7
 8008e40:	2101      	movs	r1, #1
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 fd5c 	bl	8009900 <DATABASE_READ>

	can_tx_cfg.DLC = 8;
 8008e48:	2308      	movs	r3, #8
 8008e4a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	can_tx_cfg.IDE = CAN_ID_EXT;
 8008e4e:	2304      	movs	r3, #4
 8008e50:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	can_tx_cfg.RTR = CAN_RTR_DATA;
 8008e54:	2300      	movs	r3, #0
 8008e56:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

	Unsigned_Data16toData8(Data, can_database_voltage.cell_voltage, 16);
 8008e5a:	463b      	mov	r3, r7
 8008e5c:	1d99      	adds	r1, r3, #6
 8008e5e:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8008e62:	2210      	movs	r2, #16
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 f967 	bl	8009138 <Unsigned_Data16toData8>
	for(uint8_t i = 0 ; i<4 ; i++)
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
 8008e70:	e041      	b.n	8008ef6 <CAN_Send_MASTER_PACK+0xda>
	{
		can_tx_cfg.ExtId = 0X19090312 + i;
 8008e72:	f897 2207 	ldrb.w	r2, [r7, #519]	; 0x207
 8008e76:	4b25      	ldr	r3, [pc, #148]	; (8008f0c <CAN_Send_MASTER_PACK+0xf0>)
 8008e78:	4413      	add	r3, r2
 8008e7a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

		if(i==0)
 8008e7e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d109      	bne.n	8008e9a <CAN_Send_MASTER_PACK+0x7e>
			HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, Data, &TxMailBox);
 8008e86:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008e8a:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 8008e8e:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8008e92:	481f      	ldr	r0, [pc, #124]	; (8008f10 <CAN_Send_MASTER_PACK+0xf4>)
 8008e94:	f7f9 fcc5 	bl	8002822 <HAL_CAN_AddTxMessage>
 8008e98:	e028      	b.n	8008eec <CAN_Send_MASTER_PACK+0xd0>
		else if(i==3)
 8008e9a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d117      	bne.n	8008ed2 <CAN_Send_MASTER_PACK+0xb6>
		{
			while(HAL_CAN_IsTxMessagePending(&can_cfg, TxMailBox));
 8008ea2:	bf00      	nop
 8008ea4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4819      	ldr	r0, [pc, #100]	; (8008f10 <CAN_Send_MASTER_PACK+0xf4>)
 8008eac:	f7f9 fd89 	bl	80029c2 <HAL_CAN_IsTxMessagePending>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1f6      	bne.n	8008ea4 <CAN_Send_MASTER_PACK+0x88>
			HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, &Data[4*i], &TxMailBox);
 8008eb6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008eba:	009b      	lsls	r3, r3, #2
 8008ebc:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 8008ec0:	441a      	add	r2, r3
 8008ec2:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008ec6:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8008eca:	4811      	ldr	r0, [pc, #68]	; (8008f10 <CAN_Send_MASTER_PACK+0xf4>)
 8008ecc:	f7f9 fca9 	bl	8002822 <HAL_CAN_AddTxMessage>
 8008ed0:	e00c      	b.n	8008eec <CAN_Send_MASTER_PACK+0xd0>
		}
		else
			HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, &Data[4*i], &TxMailBox);
 8008ed2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 8008edc:	441a      	add	r2, r3
 8008ede:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008ee2:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8008ee6:	480a      	ldr	r0, [pc, #40]	; (8008f10 <CAN_Send_MASTER_PACK+0xf4>)
 8008ee8:	f7f9 fc9b 	bl	8002822 <HAL_CAN_AddTxMessage>
	for(uint8_t i = 0 ; i<4 ; i++)
 8008eec:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
 8008ef6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008efa:	2b03      	cmp	r3, #3
 8008efc:	d9b9      	bls.n	8008e72 <CAN_Send_MASTER_PACK+0x56>
	}

}
 8008efe:	bf00      	nop
 8008f00:	bf00      	nop
 8008f02:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	19090312 	.word	0x19090312
 8008f10:	2000012c 	.word	0x2000012c

08008f14 <CAN_Send_Slave_PACK>:

void CAN_Send_Slave_PACK(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8008f1a:	af00      	add	r7, sp, #0
	uint8_t Data[32] = {0};
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008f22:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8008f26:	2200      	movs	r2, #0
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	605a      	str	r2, [r3, #4]
 8008f2c:	609a      	str	r2, [r3, #8]
 8008f2e:	60da      	str	r2, [r3, #12]
 8008f30:	611a      	str	r2, [r3, #16]
 8008f32:	615a      	str	r2, [r3, #20]
 8008f34:	619a      	str	r2, [r3, #24]
	uint32_t TxMailBox;

	CAN_TxHeaderTypeDef	can_tx_cfg;
	DATABASE_VOLTAGE_s can_database_voltage;

	DATABASE_READ((void*)(&can_database_voltage), DATABASE_VOLTAGE);
 8008f36:	463b      	mov	r3, r7
 8008f38:	2101      	movs	r1, #1
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 fce0 	bl	8009900 <DATABASE_READ>
    uint8_t j = ((VRX - CAN_SLAVE_1)/4) + 1;
 8008f40:	4b37      	ldr	r3, [pc, #220]	; (8009020 <CAN_Send_Slave_PACK+0x10c>)
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	4b37      	ldr	r3, [pc, #220]	; (8009024 <CAN_Send_Slave_PACK+0x110>)
 8008f46:	4413      	add	r3, r2
 8008f48:	089b      	lsrs	r3, r3, #2
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206

	can_tx_cfg.DLC = 8;
 8008f52:	2308      	movs	r3, #8
 8008f54:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	can_tx_cfg.IDE = CAN_ID_EXT;
 8008f58:	2304      	movs	r3, #4
 8008f5a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	can_tx_cfg.RTR = CAN_RTR_DATA;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

	for(uint8_t i = 0 ; i<4 ; i++)
 8008f64:	2300      	movs	r3, #0
 8008f66:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
 8008f6a:	e04f      	b.n	800900c <CAN_Send_Slave_PACK+0xf8>
	{
		can_tx_cfg.ExtId = VRX + i;
 8008f6c:	f897 2207 	ldrb.w	r2, [r7, #519]	; 0x207
 8008f70:	4b2b      	ldr	r3, [pc, #172]	; (8009020 <CAN_Send_Slave_PACK+0x10c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4413      	add	r3, r2
 8008f76:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

		if(i==0)
 8008f7a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d116      	bne.n	8008fb0 <CAN_Send_Slave_PACK+0x9c>
		{
			Unsigned_Data16toData8(Data, &can_database_voltage.cell_voltage[16*j], 16);
 8008f82:	f897 3206 	ldrb.w	r3, [r7, #518]	; 0x206
 8008f86:	011b      	lsls	r3, r3, #4
 8008f88:	463a      	mov	r2, r7
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	4413      	add	r3, r2
 8008f8e:	1d99      	adds	r1, r3, #6
 8008f90:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8008f94:	2210      	movs	r2, #16
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 f8ce 	bl	8009138 <Unsigned_Data16toData8>
			HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, Data, &TxMailBox);
 8008f9c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008fa0:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 8008fa4:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8008fa8:	481f      	ldr	r0, [pc, #124]	; (8009028 <CAN_Send_Slave_PACK+0x114>)
 8008faa:	f7f9 fc3a 	bl	8002822 <HAL_CAN_AddTxMessage>
 8008fae:	e028      	b.n	8009002 <CAN_Send_Slave_PACK+0xee>
		}
		else if(i==3)
 8008fb0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008fb4:	2b03      	cmp	r3, #3
 8008fb6:	d117      	bne.n	8008fe8 <CAN_Send_Slave_PACK+0xd4>
		{
			while(HAL_CAN_IsTxMessagePending(&can_cfg, TxMailBox));
 8008fb8:	bf00      	nop
 8008fba:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	4819      	ldr	r0, [pc, #100]	; (8009028 <CAN_Send_Slave_PACK+0x114>)
 8008fc2:	f7f9 fcfe 	bl	80029c2 <HAL_CAN_IsTxMessagePending>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1f6      	bne.n	8008fba <CAN_Send_Slave_PACK+0xa6>
			HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, &Data[4*i], &TxMailBox);
 8008fcc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 8008fd6:	441a      	add	r2, r3
 8008fd8:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008fdc:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8008fe0:	4811      	ldr	r0, [pc, #68]	; (8009028 <CAN_Send_Slave_PACK+0x114>)
 8008fe2:	f7f9 fc1e 	bl	8002822 <HAL_CAN_AddTxMessage>
 8008fe6:	e00c      	b.n	8009002 <CAN_Send_Slave_PACK+0xee>
		}
		else
			HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, &Data[4*i], &TxMailBox);
 8008fe8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	f507 72f2 	add.w	r2, r7, #484	; 0x1e4
 8008ff2:	441a      	add	r2, r3
 8008ff4:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8008ff8:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 8008ffc:	480a      	ldr	r0, [pc, #40]	; (8009028 <CAN_Send_Slave_PACK+0x114>)
 8008ffe:	f7f9 fc10 	bl	8002822 <HAL_CAN_AddTxMessage>
	for(uint8_t i = 0 ; i<4 ; i++)
 8009002:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8009006:	3301      	adds	r3, #1
 8009008:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
 800900c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8009010:	2b03      	cmp	r3, #3
 8009012:	d9ab      	bls.n	8008f6c <CAN_Send_Slave_PACK+0x58>
	}

}
 8009014:	bf00      	nop
 8009016:	bf00      	nop
 8009018:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	2000192c 	.word	0x2000192c
 8009024:	e6f6fcea 	.word	0xe6f6fcea
 8009028:	2000012c 	.word	0x2000012c

0800902c <CAN_Send_CHG_MSG>:

	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, &Data[4*i], &TxMailBox);
}

void CAN_Send_CHG_MSG(void)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b08a      	sub	sp, #40	; 0x28
 8009030:	af00      	add	r7, sp, #0
	uint8_t Data[8] = {0};
 8009032:	2300      	movs	r3, #0
 8009034:	61fb      	str	r3, [r7, #28]
 8009036:	2300      	movs	r3, #0
 8009038:	623b      	str	r3, [r7, #32]
	uint32_t TxMailBox;
	CAN_TxHeaderTypeDef	can_tx_cfg;

	can_tx_cfg.DLC = 8;
 800903a:	2308      	movs	r3, #8
 800903c:	613b      	str	r3, [r7, #16]
	can_tx_cfg.IDE = CAN_ID_EXT;
 800903e:	2304      	movs	r3, #4
 8009040:	60bb      	str	r3, [r7, #8]
	can_tx_cfg.RTR = CAN_RTR_DATA;
 8009042:	2300      	movs	r3, #0
 8009044:	60fb      	str	r3, [r7, #12]
	can_tx_cfg.ExtId = CAN_BMS_CHG_MSG;
 8009046:	4b19      	ldr	r3, [pc, #100]	; (80090ac <CAN_Send_CHG_MSG+0x80>)
 8009048:	607b      	str	r3, [r7, #4]

	uint16_t POV_Limit = POV_MOL/100;
 800904a:	4b19      	ldr	r3, [pc, #100]	; (80090b0 <CAN_Send_CHG_MSG+0x84>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a19      	ldr	r2, [pc, #100]	; (80090b4 <CAN_Send_CHG_MSG+0x88>)
 8009050:	fba2 2303 	umull	r2, r3, r2, r3
 8009054:	095b      	lsrs	r3, r3, #5
 8009056:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t PUV_Limit = PUV_MOL/100;
 8009058:	4b17      	ldr	r3, [pc, #92]	; (80090b8 <CAN_Send_CHG_MSG+0x8c>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a15      	ldr	r2, [pc, #84]	; (80090b4 <CAN_Send_CHG_MSG+0x88>)
 800905e:	fba2 2303 	umull	r2, r3, r2, r3
 8009062:	095b      	lsrs	r3, r3, #5
 8009064:	84bb      	strh	r3, [r7, #36]	; 0x24

	Data[0] =  (uint8_t)((POV_Limit & 0xFF00) >> 8);
 8009066:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009068:	0a1b      	lsrs	r3, r3, #8
 800906a:	b29b      	uxth	r3, r3
 800906c:	b2db      	uxtb	r3, r3
 800906e:	773b      	strb	r3, [r7, #28]
	Data[1] =  (uint8_t)(POV_Limit & 0x00FF);
 8009070:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009072:	b2db      	uxtb	r3, r3
 8009074:	777b      	strb	r3, [r7, #29]
	Data[2] =  (uint8_t)((PUV_Limit & 0xFF00) >> 8);
 8009076:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009078:	0a1b      	lsrs	r3, r3, #8
 800907a:	b29b      	uxth	r3, r3
 800907c:	b2db      	uxtb	r3, r3
 800907e:	77bb      	strb	r3, [r7, #30]
	Data[3] =  (uint8_t)(PUV_Limit & 0x00FF);
 8009080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009082:	b2db      	uxtb	r3, r3
 8009084:	77fb      	strb	r3, [r7, #31]
	Data[4] =  CHR_STATE;
 8009086:	4b0d      	ldr	r3, [pc, #52]	; (80090bc <CAN_Send_CHG_MSG+0x90>)
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	f887 3020 	strb.w	r3, [r7, #32]
	Data[5] =  0x00;
 800908e:	2300      	movs	r3, #0
 8009090:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	HAL_CAN_AddTxMessage(&can_cfg, &can_tx_cfg, Data, &TxMailBox);
 8009094:	f107 0318 	add.w	r3, r7, #24
 8009098:	f107 021c 	add.w	r2, r7, #28
 800909c:	4639      	mov	r1, r7
 800909e:	4808      	ldr	r0, [pc, #32]	; (80090c0 <CAN_Send_CHG_MSG+0x94>)
 80090a0:	f7f9 fbbf 	bl	8002822 <HAL_CAN_AddTxMessage>

}
 80090a4:	bf00      	nop
 80090a6:	3728      	adds	r7, #40	; 0x28
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	1806e5f4 	.word	0x1806e5f4
 80090b0:	2000000c 	.word	0x2000000c
 80090b4:	51eb851f 	.word	0x51eb851f
 80090b8:	20000010 	.word	0x20000010
 80090bc:	20000ab8 	.word	0x20000ab8
 80090c0:	2000012c 	.word	0x2000012c

080090c4 <CAN_CHR_BIT_SET>:

void CAN_CHR_BIT_SET(void)
{
 80090c4:	b480      	push	{r7}
 80090c6:	af00      	add	r7, sp, #0
	CHR_STATE = DataRx[1];
 80090c8:	4b04      	ldr	r3, [pc, #16]	; (80090dc <CAN_CHR_BIT_SET+0x18>)
 80090ca:	785a      	ldrb	r2, [r3, #1]
 80090cc:	4b04      	ldr	r3, [pc, #16]	; (80090e0 <CAN_CHR_BIT_SET+0x1c>)
 80090ce:	701a      	strb	r2, [r3, #0]
}
 80090d0:	bf00      	nop
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	20001920 	.word	0x20001920
 80090e0:	20000ab8 	.word	0x20000ab8

080090e4 <CAN_Rev_CHG_MSG>:

void CAN_Rev_CHG_MSG(void)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
	DATABASE_CHR_s can_database_chr;

	DATABASE_READ((void*)(&can_database_chr), DATABASE_CHR);
 80090ea:	463b      	mov	r3, r7
 80090ec:	2112      	movs	r1, #18
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 fc06 	bl	8009900 <DATABASE_READ>

	can_database_chr.CHR_Voltage = ((DataRx[0] << 8) |  DataRx[1]);
 80090f4:	4b0f      	ldr	r3, [pc, #60]	; (8009134 <CAN_Rev_CHG_MSG+0x50>)
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	021b      	lsls	r3, r3, #8
 80090fa:	b21a      	sxth	r2, r3
 80090fc:	4b0d      	ldr	r3, [pc, #52]	; (8009134 <CAN_Rev_CHG_MSG+0x50>)
 80090fe:	785b      	ldrb	r3, [r3, #1]
 8009100:	b21b      	sxth	r3, r3
 8009102:	4313      	orrs	r3, r2
 8009104:	b21b      	sxth	r3, r3
 8009106:	b29b      	uxth	r3, r3
 8009108:	803b      	strh	r3, [r7, #0]
	can_database_chr.CHR_Current = ((DataRx[2] << 8) |  DataRx[3]);
 800910a:	4b0a      	ldr	r3, [pc, #40]	; (8009134 <CAN_Rev_CHG_MSG+0x50>)
 800910c:	789b      	ldrb	r3, [r3, #2]
 800910e:	021b      	lsls	r3, r3, #8
 8009110:	b21a      	sxth	r2, r3
 8009112:	4b08      	ldr	r3, [pc, #32]	; (8009134 <CAN_Rev_CHG_MSG+0x50>)
 8009114:	78db      	ldrb	r3, [r3, #3]
 8009116:	b21b      	sxth	r3, r3
 8009118:	4313      	orrs	r3, r2
 800911a:	b21b      	sxth	r3, r3
 800911c:	b29b      	uxth	r3, r3
 800911e:	807b      	strh	r3, [r7, #2]
	can_database_chr.CHR_Temp = DataRx[7] + 40;
 8009120:	4b04      	ldr	r3, [pc, #16]	; (8009134 <CAN_Rev_CHG_MSG+0x50>)
 8009122:	79db      	ldrb	r3, [r3, #7]
 8009124:	3328      	adds	r3, #40	; 0x28
 8009126:	b2db      	uxtb	r3, r3
 8009128:	713b      	strb	r3, [r7, #4]

}
 800912a:	bf00      	nop
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	20001920 	.word	0x20001920

08009138 <Unsigned_Data16toData8>:

void Unsigned_Data16toData8(uint8_t *Data8, uint16_t *Data16, uint8_t Data16_Len)
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	4613      	mov	r3, r2
 8009144:	71fb      	strb	r3, [r7, #7]
	uint8_t cnt = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i<Data16_Len; i++)
 800914a:	2300      	movs	r3, #0
 800914c:	75bb      	strb	r3, [r7, #22]
 800914e:	e01e      	b.n	800918e <Unsigned_Data16toData8+0x56>
	{
		Data8[cnt] = (uint8_t)((Data16[i] & 0XFF00) >> 8);
 8009150:	7dbb      	ldrb	r3, [r7, #22]
 8009152:	005b      	lsls	r3, r3, #1
 8009154:	68ba      	ldr	r2, [r7, #8]
 8009156:	4413      	add	r3, r2
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	0a1b      	lsrs	r3, r3, #8
 800915c:	b299      	uxth	r1, r3
 800915e:	7dfb      	ldrb	r3, [r7, #23]
 8009160:	68fa      	ldr	r2, [r7, #12]
 8009162:	4413      	add	r3, r2
 8009164:	b2ca      	uxtb	r2, r1
 8009166:	701a      	strb	r2, [r3, #0]
		cnt++;
 8009168:	7dfb      	ldrb	r3, [r7, #23]
 800916a:	3301      	adds	r3, #1
 800916c:	75fb      	strb	r3, [r7, #23]
		Data8[cnt] = (uint8_t)((Data16[i] & 0X00FF));
 800916e:	7dbb      	ldrb	r3, [r7, #22]
 8009170:	005b      	lsls	r3, r3, #1
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	4413      	add	r3, r2
 8009176:	8819      	ldrh	r1, [r3, #0]
 8009178:	7dfb      	ldrb	r3, [r7, #23]
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	4413      	add	r3, r2
 800917e:	b2ca      	uxtb	r2, r1
 8009180:	701a      	strb	r2, [r3, #0]
		cnt++;
 8009182:	7dfb      	ldrb	r3, [r7, #23]
 8009184:	3301      	adds	r3, #1
 8009186:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i<Data16_Len; i++)
 8009188:	7dbb      	ldrb	r3, [r7, #22]
 800918a:	3301      	adds	r3, #1
 800918c:	75bb      	strb	r3, [r7, #22]
 800918e:	7dba      	ldrb	r2, [r7, #22]
 8009190:	79fb      	ldrb	r3, [r7, #7]
 8009192:	429a      	cmp	r2, r3
 8009194:	d3dc      	bcc.n	8009150 <Unsigned_Data16toData8+0x18>
	}

}
 8009196:	bf00      	nop
 8009198:	bf00      	nop
 800919a:	371c      	adds	r7, #28
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <DMA_Init>:
 * @arguments
 * @retvar
 */

void DMA_Init(void)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA1_CLK_ENABLE();
 80091aa:	4b15      	ldr	r3, [pc, #84]	; (8009200 <DMA_Init+0x5c>)
 80091ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091ae:	4a14      	ldr	r2, [pc, #80]	; (8009200 <DMA_Init+0x5c>)
 80091b0:	f043 0301 	orr.w	r3, r3, #1
 80091b4:	6493      	str	r3, [r2, #72]	; 0x48
 80091b6:	4b12      	ldr	r3, [pc, #72]	; (8009200 <DMA_Init+0x5c>)
 80091b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	603b      	str	r3, [r7, #0]
 80091c0:	683b      	ldr	r3, [r7, #0]

	for(uint8_t i=0; i<dma_cfg_length ; i++)
 80091c2:	2300      	movs	r3, #0
 80091c4:	71fb      	strb	r3, [r7, #7]
 80091c6:	e011      	b.n	80091ec <DMA_Init+0x48>
	{
		if(HAL_DMA_Init(&dma_cfg[i]) != HAL_OK)
 80091c8:	79fa      	ldrb	r2, [r7, #7]
 80091ca:	4613      	mov	r3, r2
 80091cc:	00db      	lsls	r3, r3, #3
 80091ce:	4413      	add	r3, r2
 80091d0:	00db      	lsls	r3, r3, #3
 80091d2:	4a0c      	ldr	r2, [pc, #48]	; (8009204 <DMA_Init+0x60>)
 80091d4:	4413      	add	r3, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fa f8ce 	bl	8003378 <HAL_DMA_Init>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <DMA_Init+0x42>
		{
			Error_Handler();
 80091e2:	f7f8 f91f 	bl	8001424 <Error_Handler>
	for(uint8_t i=0; i<dma_cfg_length ; i++)
 80091e6:	79fb      	ldrb	r3, [r7, #7]
 80091e8:	3301      	adds	r3, #1
 80091ea:	71fb      	strb	r3, [r7, #7]
 80091ec:	4b06      	ldr	r3, [pc, #24]	; (8009208 <DMA_Init+0x64>)
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	79fa      	ldrb	r2, [r7, #7]
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d3e8      	bcc.n	80091c8 <DMA_Init+0x24>
		}
	}
}
 80091f6:	bf00      	nop
 80091f8:	bf00      	nop
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	40021000 	.word	0x40021000
 8009204:	20000214 	.word	0x20000214
 8009208:	2000025c 	.word	0x2000025c

0800920c <GPIO_Init>:
 * @arguments
 * @retvar
 */

void GPIO_Init(const GPIO_InitTypeDef *gpio_cfg)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
	if(gpio_cfg == NULL_PTR)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d100      	bne.n	800921c <GPIO_Init+0x10>
	{
		while(1);
 800921a:	e7fe      	b.n	800921a <GPIO_Init+0xe>
	}

	GPIO_Clock_Enable();
 800921c:	f000 f894 	bl	8009348 <GPIO_Clock_Enable>

	GPIO_InitTypeDef	GPIO_InitStruct;

	for(uint8_t i = 0; i < gpio_cfg_length; i++)
 8009220:	2300      	movs	r3, #0
 8009222:	77fb      	strb	r3, [r7, #31]
 8009224:	e059      	b.n	80092da <GPIO_Init+0xce>
	{
		GPIO_InitStruct.Pin = (uint16_t)(1 << ((gpio_cfg[i].Pin) % NO_OF_PINS_PER_PORT));
 8009226:	7ffa      	ldrb	r2, [r7, #31]
 8009228:	4613      	mov	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	461a      	mov	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4413      	add	r3, r2
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 030f 	and.w	r3, r3, #15
 800923c:	2201      	movs	r2, #1
 800923e:	fa02 f303 	lsl.w	r3, r2, r3
 8009242:	b29b      	uxth	r3, r3
 8009244:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = gpio_cfg[i].Pull;
 8009246:	7ffa      	ldrb	r2, [r7, #31]
 8009248:	4613      	mov	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	461a      	mov	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4413      	add	r3, r2
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = gpio_cfg[i].Speed;
 800925a:	7ffa      	ldrb	r2, [r7, #31]
 800925c:	4613      	mov	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	461a      	mov	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	4413      	add	r3, r2
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = gpio_cfg[i].Mode;
 800926e:	7ffa      	ldrb	r2, [r7, #31]
 8009270:	4613      	mov	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	4413      	add	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	461a      	mov	r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4413      	add	r3, r2
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	60fb      	str	r3, [r7, #12]

		if(gpio_cfg[i].Alternate != GPIO_NO_ALTERNATIVE)
 8009282:	7ffa      	ldrb	r2, [r7, #31]
 8009284:	4613      	mov	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	461a      	mov	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	4413      	add	r3, r2
 8009292:	691b      	ldr	r3, [r3, #16]
 8009294:	2bff      	cmp	r3, #255	; 0xff
 8009296:	d009      	beq.n	80092ac <GPIO_Init+0xa0>
		{
			GPIO_InitStruct.Alternate = gpio_cfg[i].Alternate;
 8009298:	7ffa      	ldrb	r2, [r7, #31]
 800929a:	4613      	mov	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4413      	add	r3, r2
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	461a      	mov	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4413      	add	r3, r2
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	61bb      	str	r3, [r7, #24]
		}

		HAL_GPIO_Init(GPIO_GET_GPIOx((gpio_cfg[i].Pin) / NO_OF_PINS_PER_PORT), &GPIO_InitStruct);
 80092ac:	7ffa      	ldrb	r2, [r7, #31]
 80092ae:	4613      	mov	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	009b      	lsls	r3, r3, #2
 80092b6:	461a      	mov	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4413      	add	r3, r2
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	091b      	lsrs	r3, r3, #4
 80092c0:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 80092c4:	029b      	lsls	r3, r3, #10
 80092c6:	461a      	mov	r2, r3
 80092c8:	f107 0308 	add.w	r3, r7, #8
 80092cc:	4619      	mov	r1, r3
 80092ce:	4610      	mov	r0, r2
 80092d0:	f7fa f9ba 	bl	8003648 <HAL_GPIO_Init>
	for(uint8_t i = 0; i < gpio_cfg_length; i++)
 80092d4:	7ffb      	ldrb	r3, [r7, #31]
 80092d6:	3301      	adds	r3, #1
 80092d8:	77fb      	strb	r3, [r7, #31]
 80092da:	4b05      	ldr	r3, [pc, #20]	; (80092f0 <GPIO_Init+0xe4>)
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	7ffa      	ldrb	r2, [r7, #31]
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d3a0      	bcc.n	8009226 <GPIO_Init+0x1a>
	}
}
 80092e4:	bf00      	nop
 80092e6:	bf00      	nop
 80092e8:	3720      	adds	r7, #32
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	20000594 	.word	0x20000594

080092f4 <BOOT0_Init>:
 * @arguments
 * @retvar
 */

void BOOT0_Init(void)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef	gpio_boot;

	__HAL_RCC_GPIOH_CLK_ENABLE();
 80092fa:	4b11      	ldr	r3, [pc, #68]	; (8009340 <BOOT0_Init+0x4c>)
 80092fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092fe:	4a10      	ldr	r2, [pc, #64]	; (8009340 <BOOT0_Init+0x4c>)
 8009300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009306:	4b0e      	ldr	r3, [pc, #56]	; (8009340 <BOOT0_Init+0x4c>)
 8009308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800930a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800930e:	603b      	str	r3, [r7, #0]
 8009310:	683b      	ldr	r3, [r7, #0]

	gpio_boot.Pin = GPIO_PIN_BOOT0;
 8009312:	2308      	movs	r3, #8
 8009314:	607b      	str	r3, [r7, #4]
	gpio_boot.Mode = GPIO_MODE_OUTPUT_PP;
 8009316:	2301      	movs	r3, #1
 8009318:	60bb      	str	r3, [r7, #8]
	gpio_boot.Pull = GPIO_NOPULL;
 800931a:	2300      	movs	r3, #0
 800931c:	60fb      	str	r3, [r7, #12]
	gpio_boot.Speed = GPIO_SPEED_FREQ_LOW;
 800931e:	2300      	movs	r3, #0
 8009320:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIO_PORT_BOOT0, &gpio_boot);
 8009322:	1d3b      	adds	r3, r7, #4
 8009324:	4619      	mov	r1, r3
 8009326:	4807      	ldr	r0, [pc, #28]	; (8009344 <BOOT0_Init+0x50>)
 8009328:	f7fa f98e 	bl	8003648 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIO_PORT_BOOT0, GPIO_PIN_BOOT0, GPIO_PIN_RESET);
 800932c:	2200      	movs	r2, #0
 800932e:	2108      	movs	r1, #8
 8009330:	4804      	ldr	r0, [pc, #16]	; (8009344 <BOOT0_Init+0x50>)
 8009332:	f7fa fb03 	bl	800393c <HAL_GPIO_WritePin>
}
 8009336:	bf00      	nop
 8009338:	3718      	adds	r7, #24
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	40021000 	.word	0x40021000
 8009344:	48001c00 	.word	0x48001c00

08009348 <GPIO_Clock_Enable>:
 * @arguments
 * @retvar
 */

static void GPIO_Clock_Enable(void)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800934e:	4b1b      	ldr	r3, [pc, #108]	; (80093bc <GPIO_Clock_Enable+0x74>)
 8009350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009352:	4a1a      	ldr	r2, [pc, #104]	; (80093bc <GPIO_Clock_Enable+0x74>)
 8009354:	f043 0301 	orr.w	r3, r3, #1
 8009358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800935a:	4b18      	ldr	r3, [pc, #96]	; (80093bc <GPIO_Clock_Enable+0x74>)
 800935c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009366:	4b15      	ldr	r3, [pc, #84]	; (80093bc <GPIO_Clock_Enable+0x74>)
 8009368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800936a:	4a14      	ldr	r2, [pc, #80]	; (80093bc <GPIO_Clock_Enable+0x74>)
 800936c:	f043 0302 	orr.w	r3, r3, #2
 8009370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009372:	4b12      	ldr	r3, [pc, #72]	; (80093bc <GPIO_Clock_Enable+0x74>)
 8009374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009376:	f003 0302 	and.w	r3, r3, #2
 800937a:	60bb      	str	r3, [r7, #8]
 800937c:	68bb      	ldr	r3, [r7, #8]

#if (AFE_ISL78600 == 1)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800937e:	4b0f      	ldr	r3, [pc, #60]	; (80093bc <GPIO_Clock_Enable+0x74>)
 8009380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009382:	4a0e      	ldr	r2, [pc, #56]	; (80093bc <GPIO_Clock_Enable+0x74>)
 8009384:	f043 0304 	orr.w	r3, r3, #4
 8009388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800938a:	4b0c      	ldr	r3, [pc, #48]	; (80093bc <GPIO_Clock_Enable+0x74>)
 800938c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800938e:	f003 0304 	and.w	r3, r3, #4
 8009392:	607b      	str	r3, [r7, #4]
 8009394:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8009396:	4b09      	ldr	r3, [pc, #36]	; (80093bc <GPIO_Clock_Enable+0x74>)
 8009398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800939a:	4a08      	ldr	r2, [pc, #32]	; (80093bc <GPIO_Clock_Enable+0x74>)
 800939c:	f043 0308 	orr.w	r3, r3, #8
 80093a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80093a2:	4b06      	ldr	r3, [pc, #24]	; (80093bc <GPIO_Clock_Enable+0x74>)
 80093a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093a6:	f003 0308 	and.w	r3, r3, #8
 80093aa:	603b      	str	r3, [r7, #0]
 80093ac:	683b      	ldr	r3, [r7, #0]
#endif

}
 80093ae:	bf00      	nop
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	40021000 	.word	0x40021000

080093c0 <GPIO_WritePin>:
 * @arguments
 * @retvar
 */

void GPIO_WritePin(GPIO_PINs pin, uint8_t value)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	4603      	mov	r3, r0
 80093c8:	460a      	mov	r2, r1
 80093ca:	71fb      	strb	r3, [r7, #7]
 80093cc:	4613      	mov	r3, r2
 80093ce:	71bb      	strb	r3, [r7, #6]
	uint16_t writepin = (uint16_t)(1 << (pin % NO_OF_PINS_PER_PORT));
 80093d0:	79fb      	ldrb	r3, [r7, #7]
 80093d2:	f003 030f 	and.w	r3, r3, #15
 80093d6:	2201      	movs	r2, #1
 80093d8:	fa02 f303 	lsl.w	r3, r2, r3
 80093dc:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIO_GET_GPIOx(pin/NO_OF_PINS_PER_PORT), writepin, value);
 80093de:	79fb      	ldrb	r3, [r7, #7]
 80093e0:	091b      	lsrs	r3, r3, #4
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 80093e8:	029b      	lsls	r3, r3, #10
 80093ea:	4618      	mov	r0, r3
 80093ec:	79ba      	ldrb	r2, [r7, #6]
 80093ee:	89fb      	ldrh	r3, [r7, #14]
 80093f0:	4619      	mov	r1, r3
 80093f2:	f7fa faa3 	bl	800393c <HAL_GPIO_WritePin>
}
 80093f6:	bf00      	nop
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <GPIO_TogglePin>:
 * @arguments
 * @retvar
 */

void GPIO_TogglePin(GPIO_PINs pin)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b084      	sub	sp, #16
 8009402:	af00      	add	r7, sp, #0
 8009404:	4603      	mov	r3, r0
 8009406:	71fb      	strb	r3, [r7, #7]
	uint16_t togglepin = (uint16_t)(1 << (pin % NO_OF_PINS_PER_PORT));
 8009408:	79fb      	ldrb	r3, [r7, #7]
 800940a:	f003 030f 	and.w	r3, r3, #15
 800940e:	2201      	movs	r2, #1
 8009410:	fa02 f303 	lsl.w	r3, r2, r3
 8009414:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_TogglePin(GPIO_GET_GPIOx(pin/NO_OF_PINS_PER_PORT), togglepin);
 8009416:	79fb      	ldrb	r3, [r7, #7]
 8009418:	091b      	lsrs	r3, r3, #4
 800941a:	b2db      	uxtb	r3, r3
 800941c:	f503 1390 	add.w	r3, r3, #1179648	; 0x120000
 8009420:	029b      	lsls	r3, r3, #10
 8009422:	461a      	mov	r2, r3
 8009424:	89fb      	ldrh	r3, [r7, #14]
 8009426:	4619      	mov	r1, r3
 8009428:	4610      	mov	r0, r2
 800942a:	f7fa fa9f 	bl	800396c <HAL_GPIO_TogglePin>
}
 800942e:	bf00      	nop
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
	...

08009438 <I2C_Init>:
 * @arguments
 * @retvar
 */

void I2C_Init(void)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<i2c_cfg_length; i++)
 800943e:	2300      	movs	r3, #0
 8009440:	71fb      	strb	r3, [r7, #7]
 8009442:	e02e      	b.n	80094a2 <I2C_Init+0x6a>
	{
		if(HAL_I2C_Init(&i2c_cfg[i]) != HAL_OK)
 8009444:	79fb      	ldrb	r3, [r7, #7]
 8009446:	2254      	movs	r2, #84	; 0x54
 8009448:	fb02 f303 	mul.w	r3, r2, r3
 800944c:	4a1a      	ldr	r2, [pc, #104]	; (80094b8 <I2C_Init+0x80>)
 800944e:	4413      	add	r3, r2
 8009450:	4618      	mov	r0, r3
 8009452:	f7fa faa5 	bl	80039a0 <HAL_I2C_Init>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <I2C_Init+0x28>
		{
			Error_Handler();
 800945c:	f7f7 ffe2 	bl	8001424 <Error_Handler>
		}

		/* Configure the Analog Filter */

		if (HAL_I2CEx_ConfigAnalogFilter(&i2c_cfg[i], I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009460:	79fb      	ldrb	r3, [r7, #7]
 8009462:	2254      	movs	r2, #84	; 0x54
 8009464:	fb02 f303 	mul.w	r3, r2, r3
 8009468:	4a13      	ldr	r2, [pc, #76]	; (80094b8 <I2C_Init+0x80>)
 800946a:	4413      	add	r3, r2
 800946c:	2100      	movs	r1, #0
 800946e:	4618      	mov	r0, r3
 8009470:	f7fa fe92 	bl	8004198 <HAL_I2CEx_ConfigAnalogFilter>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <I2C_Init+0x46>
		{
			Error_Handler();
 800947a:	f7f7 ffd3 	bl	8001424 <Error_Handler>
		}

		/* Configure the Digital Filter */

		if (HAL_I2CEx_ConfigDigitalFilter(&i2c_cfg[i], 0) != HAL_OK)
 800947e:	79fb      	ldrb	r3, [r7, #7]
 8009480:	2254      	movs	r2, #84	; 0x54
 8009482:	fb02 f303 	mul.w	r3, r2, r3
 8009486:	4a0c      	ldr	r2, [pc, #48]	; (80094b8 <I2C_Init+0x80>)
 8009488:	4413      	add	r3, r2
 800948a:	2100      	movs	r1, #0
 800948c:	4618      	mov	r0, r3
 800948e:	f7fa fece 	bl	800422e <HAL_I2CEx_ConfigDigitalFilter>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <I2C_Init+0x64>
		{
			Error_Handler();
 8009498:	f7f7 ffc4 	bl	8001424 <Error_Handler>
	for(uint8_t i=0; i<i2c_cfg_length; i++)
 800949c:	79fb      	ldrb	r3, [r7, #7]
 800949e:	3301      	adds	r3, #1
 80094a0:	71fb      	strb	r3, [r7, #7]
 80094a2:	4b06      	ldr	r3, [pc, #24]	; (80094bc <I2C_Init+0x84>)
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	79fa      	ldrb	r2, [r7, #7]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d3cb      	bcc.n	8009444 <I2C_Init+0xc>
		}
	}

}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20000598 	.word	0x20000598
 80094bc:	20000640 	.word	0x20000640

080094c0 <NVIC_Init>:
 * @arguments
 * @retvar
 */

void NVIC_Init(void)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<nvic_cfg_length; i++)
 80094c6:	2300      	movs	r3, #0
 80094c8:	71fb      	strb	r3, [r7, #7]
 80094ca:	e02f      	b.n	800952c <NVIC_Init+0x6c>
	{
		if(nvic_cfg[i].priority <= MAX_PRIORITY_VALUE && nvic_cfg[i].IRQ_No < (MAX_NUMBER_OF_NVIC_POSITION + 1))
 80094cc:	79fb      	ldrb	r3, [r7, #7]
 80094ce:	4a1c      	ldr	r2, [pc, #112]	; (8009540 <NVIC_Init+0x80>)
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	785b      	ldrb	r3, [r3, #1]
 80094d6:	2b0f      	cmp	r3, #15
 80094d8:	d817      	bhi.n	800950a <NVIC_Init+0x4a>
 80094da:	79fb      	ldrb	r3, [r7, #7]
 80094dc:	4a18      	ldr	r2, [pc, #96]	; (8009540 <NVIC_Init+0x80>)
 80094de:	f912 3023 	ldrsb.w	r3, [r2, r3, lsl #2]
 80094e2:	2b52      	cmp	r3, #82	; 0x52
 80094e4:	dc11      	bgt.n	800950a <NVIC_Init+0x4a>
		{
			HAL_NVIC_SetPriority(nvic_cfg[i].IRQ_No, nvic_cfg[i].priority, nvic_cfg[i].subpriority);
 80094e6:	79fb      	ldrb	r3, [r7, #7]
 80094e8:	4a15      	ldr	r2, [pc, #84]	; (8009540 <NVIC_Init+0x80>)
 80094ea:	f912 0023 	ldrsb.w	r0, [r2, r3, lsl #2]
 80094ee:	79fb      	ldrb	r3, [r7, #7]
 80094f0:	4a13      	ldr	r2, [pc, #76]	; (8009540 <NVIC_Init+0x80>)
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	785b      	ldrb	r3, [r3, #1]
 80094f8:	4619      	mov	r1, r3
 80094fa:	79fb      	ldrb	r3, [r7, #7]
 80094fc:	4a10      	ldr	r2, [pc, #64]	; (8009540 <NVIC_Init+0x80>)
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	789b      	ldrb	r3, [r3, #2]
 8009504:	461a      	mov	r2, r3
 8009506:	f7f9 fee6 	bl	80032d6 <HAL_NVIC_SetPriority>
		}

		if(nvic_cfg[i].state == NVIC_ENABLE)
 800950a:	79fb      	ldrb	r3, [r7, #7]
 800950c:	4a0c      	ldr	r2, [pc, #48]	; (8009540 <NVIC_Init+0x80>)
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	78db      	ldrb	r3, [r3, #3]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d106      	bne.n	8009526 <NVIC_Init+0x66>
		{
			HAL_NVIC_EnableIRQ(nvic_cfg[i].IRQ_No);
 8009518:	79fb      	ldrb	r3, [r7, #7]
 800951a:	4a09      	ldr	r2, [pc, #36]	; (8009540 <NVIC_Init+0x80>)
 800951c:	f912 3023 	ldrsb.w	r3, [r2, r3, lsl #2]
 8009520:	4618      	mov	r0, r3
 8009522:	f7f9 fef4 	bl	800330e <HAL_NVIC_EnableIRQ>
	for(uint8_t i=0; i<nvic_cfg_length; i++)
 8009526:	79fb      	ldrb	r3, [r7, #7]
 8009528:	3301      	adds	r3, #1
 800952a:	71fb      	strb	r3, [r7, #7]
 800952c:	4b05      	ldr	r3, [pc, #20]	; (8009544 <NVIC_Init+0x84>)
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	79fa      	ldrb	r2, [r7, #7]
 8009532:	429a      	cmp	r2, r3
 8009534:	d3ca      	bcc.n	80094cc <NVIC_Init+0xc>
		}
	}
}
 8009536:	bf00      	nop
 8009538:	bf00      	nop
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	20000644 	.word	0x20000644
 8009544:	20000660 	.word	0x20000660

08009548 <RCC_Init>:
 * @arguments
 * @retvar
 */

void RCC_Init(void)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
	if(HAL_RCC_OscConfig(&OscInitStruct) != HAL_OK)
 800954e:	4810      	ldr	r0, [pc, #64]	; (8009590 <RCC_Init+0x48>)
 8009550:	f7fa fec8 	bl	80042e4 <HAL_RCC_OscConfig>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <RCC_Init+0x16>
	{
		Error_Handler();
 800955a:	f7f7 ff63 	bl	8001424 <Error_Handler>
	}

	if(HAL_RCC_ClockConfig(&ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800955e:	2104      	movs	r1, #4
 8009560:	480c      	ldr	r0, [pc, #48]	; (8009594 <RCC_Init+0x4c>)
 8009562:	f7fb fad3 	bl	8004b0c <HAL_RCC_ClockConfig>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d001      	beq.n	8009570 <RCC_Init+0x28>
	{
		Error_Handler();
 800956c:	f7f7 ff5a 	bl	8001424 <Error_Handler>
	}

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8009570:	4b09      	ldr	r3, [pc, #36]	; (8009598 <RCC_Init+0x50>)
 8009572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009574:	4a08      	ldr	r2, [pc, #32]	; (8009598 <RCC_Init+0x50>)
 8009576:	f043 0301 	orr.w	r3, r3, #1
 800957a:	6613      	str	r3, [r2, #96]	; 0x60
 800957c:	4b06      	ldr	r3, [pc, #24]	; (8009598 <RCC_Init+0x50>)
 800957e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009580:	f003 0301 	and.w	r3, r3, #1
 8009584:	607b      	str	r3, [r7, #4]
 8009586:	687b      	ldr	r3, [r7, #4]
}
 8009588:	bf00      	nop
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}
 8009590:	20000664 	.word	0x20000664
 8009594:	200006a8 	.word	0x200006a8
 8009598:	40021000 	.word	0x40021000

0800959c <RTC_Init>:
 * @arguments
 * @retvar
 */

void RTC_Init(void)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	af00      	add	r7, sp, #0

	if(HAL_RTC_Init(&rtc_cfg) != HAL_OK)
 80095a0:	4804      	ldr	r0, [pc, #16]	; (80095b4 <RTC_Init+0x18>)
 80095a2:	f7fb ffe1 	bl	8005568 <HAL_RTC_Init>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d001      	beq.n	80095b0 <RTC_Init+0x14>
	{
		Error_Handler();
 80095ac:	f7f7 ff3a 	bl	8001424 <Error_Handler>
	if(HAL_RTC_SetDate(&rtc_cfg, &rtc_date_cfg, RTC_FORMAT_BIN) != HAL_OK)
	{
		Error_Handler();
	}
#endif
}
 80095b0:	bf00      	nop
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	200006bc 	.word	0x200006bc

080095b8 <RTC_GetTime>:
{
	HAL_RTC_SetDate(&rtc_cfg, date, RTC_FORMAT_BIN);
}

void RTC_GetTime(RTC_TimeTypeDef *time)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetTime(&rtc_cfg, time, RTC_FORMAT_BIN);
 80095c0:	2200      	movs	r2, #0
 80095c2:	6879      	ldr	r1, [r7, #4]
 80095c4:	4803      	ldr	r0, [pc, #12]	; (80095d4 <RTC_GetTime+0x1c>)
 80095c6:	f7fc f84a 	bl	800565e <HAL_RTC_GetTime>
}
 80095ca:	bf00      	nop
 80095cc:	3708      	adds	r7, #8
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	200006bc 	.word	0x200006bc

080095d8 <RTC_GetDate>:

void RTC_GetDate(RTC_DateTypeDef *date)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
	HAL_RTC_GetDate(&rtc_cfg, date, RTC_FORMAT_BIN);
 80095e0:	2200      	movs	r2, #0
 80095e2:	6879      	ldr	r1, [r7, #4]
 80095e4:	4803      	ldr	r0, [pc, #12]	; (80095f4 <RTC_GetDate+0x1c>)
 80095e6:	f7fc f896 	bl	8005716 <HAL_RTC_GetDate>
}
 80095ea:	bf00      	nop
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	200006bc 	.word	0x200006bc

080095f8 <SPI_Init>:
 * @arguments
 * @retvar
 */

void SPI_Init(void)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<spi_cfg_length; i++)
 80095fe:	2300      	movs	r3, #0
 8009600:	71fb      	strb	r3, [r7, #7]
 8009602:	e010      	b.n	8009626 <SPI_Init+0x2e>
	{
		if(HAL_SPI_Init(&spi_cfg[i]) != HAL_OK)
 8009604:	79fb      	ldrb	r3, [r7, #7]
 8009606:	2264      	movs	r2, #100	; 0x64
 8009608:	fb02 f303 	mul.w	r3, r2, r3
 800960c:	4a0b      	ldr	r2, [pc, #44]	; (800963c <SPI_Init+0x44>)
 800960e:	4413      	add	r3, r2
 8009610:	4618      	mov	r0, r3
 8009612:	f7fc f97f 	bl	8005914 <HAL_SPI_Init>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <SPI_Init+0x28>
		{
			Error_Handler();
 800961c:	f7f7 ff02 	bl	8001424 <Error_Handler>
	for(uint8_t i=0; i<spi_cfg_length; i++)
 8009620:	79fb      	ldrb	r3, [r7, #7]
 8009622:	3301      	adds	r3, #1
 8009624:	71fb      	strb	r3, [r7, #7]
 8009626:	4b06      	ldr	r3, [pc, #24]	; (8009640 <SPI_Init+0x48>)
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	79fa      	ldrb	r2, [r7, #7]
 800962c:	429a      	cmp	r2, r3
 800962e:	d3e9      	bcc.n	8009604 <SPI_Init+0xc>
		}
	}
}
 8009630:	bf00      	nop
 8009632:	bf00      	nop
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	200006e0 	.word	0x200006e0
 8009640:	200007a8 	.word	0x200007a8

08009644 <BASIC_TIMER_Init>:
 * @arguments
 * @retvar
 */

void BASIC_TIMER_Init(void)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	af00      	add	r7, sp, #0
	if(HAL_TIM_Base_Init(&basic_timer_cfg) != HAL_OK)
 8009648:	4814      	ldr	r0, [pc, #80]	; (800969c <BASIC_TIMER_Init+0x58>)
 800964a:	f7fc fa06 	bl	8005a5a <HAL_TIM_Base_Init>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <BASIC_TIMER_Init+0x14>
	{
		Error_Handler();
 8009654:	f7f7 fee6 	bl	8001424 <Error_Handler>
	}

	HAL_TIM_Base_Start(&basic_timer_cfg);
 8009658:	4810      	ldr	r0, [pc, #64]	; (800969c <BASIC_TIMER_Init+0x58>)
 800965a:	f7fc fa55 	bl	8005b08 <HAL_TIM_Base_Start>

	if(HAL_TIM_Base_Init(&delay_timer_cfg) != HAL_OK)
 800965e:	4810      	ldr	r0, [pc, #64]	; (80096a0 <BASIC_TIMER_Init+0x5c>)
 8009660:	f7fc f9fb 	bl	8005a5a <HAL_TIM_Base_Init>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d001      	beq.n	800966e <BASIC_TIMER_Init+0x2a>
	{
		Error_Handler();
 800966a:	f7f7 fedb 	bl	8001424 <Error_Handler>
	}

	if(HAL_TIM_ConfigClockSource(&delay_timer_cfg, &delay_timer_clock_cfg) != HAL_OK)
 800966e:	490d      	ldr	r1, [pc, #52]	; (80096a4 <BASIC_TIMER_Init+0x60>)
 8009670:	480b      	ldr	r0, [pc, #44]	; (80096a0 <BASIC_TIMER_Init+0x5c>)
 8009672:	f7fc fbb4 	bl	8005dde <HAL_TIM_ConfigClockSource>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d001      	beq.n	8009680 <BASIC_TIMER_Init+0x3c>
	{
		Error_Handler();
 800967c:	f7f7 fed2 	bl	8001424 <Error_Handler>
	}

	if(HAL_TIMEx_MasterConfigSynchronization(&delay_timer_cfg, &delay_timer_master_cfg) != HAL_OK)
 8009680:	4909      	ldr	r1, [pc, #36]	; (80096a8 <BASIC_TIMER_Init+0x64>)
 8009682:	4807      	ldr	r0, [pc, #28]	; (80096a0 <BASIC_TIMER_Init+0x5c>)
 8009684:	f7fc fd9a 	bl	80061bc <HAL_TIMEx_MasterConfigSynchronization>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d001      	beq.n	8009692 <BASIC_TIMER_Init+0x4e>
	{
		Error_Handler();
 800968e:	f7f7 fec9 	bl	8001424 <Error_Handler>
	}

	HAL_TIM_Base_Start(&delay_timer_cfg);
 8009692:	4803      	ldr	r0, [pc, #12]	; (80096a0 <BASIC_TIMER_Init+0x5c>)
 8009694:	f7fc fa38 	bl	8005b08 <HAL_TIM_Base_Start>

//	__HAL_RCC_TIM6_CLK_ENABLE();
}
 8009698:	bf00      	nop
 800969a:	bd80      	pop	{r7, pc}
 800969c:	200007ac 	.word	0x200007ac
 80096a0:	200008ac 	.word	0x200008ac
 80096a4:	200008f8 	.word	0x200008f8
 80096a8:	20000908 	.word	0x20000908

080096ac <TIMER_Delay_ms>:
	__HAL_TIM_SET_COUNTER(&delay_timer_cfg,0);
	while(__HAL_TIM_GET_COUNTER(&delay_timer_cfg) < (micros));
}

void TIMER_Delay_ms(uint16_t millis)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	4603      	mov	r3, r0
 80096b4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&delay_timer_cfg,0);
 80096b6:	4b0b      	ldr	r3, [pc, #44]	; (80096e4 <TIMER_Delay_ms+0x38>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2200      	movs	r2, #0
 80096bc:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&delay_timer_cfg) < (millis*1000));
 80096be:	bf00      	nop
 80096c0:	4b08      	ldr	r3, [pc, #32]	; (80096e4 <TIMER_Delay_ms+0x38>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c6:	88fa      	ldrh	r2, [r7, #6]
 80096c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80096cc:	fb01 f202 	mul.w	r2, r1, r2
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d3f5      	bcc.n	80096c0 <TIMER_Delay_ms+0x14>
}
 80096d4:	bf00      	nop
 80096d6:	bf00      	nop
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	200008ac 	.word	0x200008ac

080096e8 <GENERAL_TIMER_Init>:

void GENERAL_TIMER_Init(void)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	af00      	add	r7, sp, #0
	if(HAL_TIM_Base_Init(&gp_timer_cfg) != HAL_OK)
 80096ec:	480f      	ldr	r0, [pc, #60]	; (800972c <GENERAL_TIMER_Init+0x44>)
 80096ee:	f7fc f9b4 	bl	8005a5a <HAL_TIM_Base_Init>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <GENERAL_TIMER_Init+0x14>
	{
		Error_Handler();
 80096f8:	f7f7 fe94 	bl	8001424 <Error_Handler>
	}

	if(HAL_TIM_ConfigClockSource(&gp_timer_cfg, &gp_clock_cfg) != HAL_OK)
 80096fc:	490c      	ldr	r1, [pc, #48]	; (8009730 <GENERAL_TIMER_Init+0x48>)
 80096fe:	480b      	ldr	r0, [pc, #44]	; (800972c <GENERAL_TIMER_Init+0x44>)
 8009700:	f7fc fb6d 	bl	8005dde <HAL_TIM_ConfigClockSource>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d001      	beq.n	800970e <GENERAL_TIMER_Init+0x26>
	{
		Error_Handler();
 800970a:	f7f7 fe8b 	bl	8001424 <Error_Handler>
	}

	if(HAL_TIMEx_MasterConfigSynchronization(&gp_timer_cfg, &gp_master_cfg) != HAL_OK)
 800970e:	4909      	ldr	r1, [pc, #36]	; (8009734 <GENERAL_TIMER_Init+0x4c>)
 8009710:	4806      	ldr	r0, [pc, #24]	; (800972c <GENERAL_TIMER_Init+0x44>)
 8009712:	f7fc fd53 	bl	80061bc <HAL_TIMEx_MasterConfigSynchronization>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <GENERAL_TIMER_Init+0x38>
	{
		Error_Handler();
 800971c:	f7f7 fe82 	bl	8001424 <Error_Handler>
	}

	HAL_TIM_Base_Start(&gp_timer_cfg);
 8009720:	4802      	ldr	r0, [pc, #8]	; (800972c <GENERAL_TIMER_Init+0x44>)
 8009722:	f7fc f9f1 	bl	8005b08 <HAL_TIM_Base_Start>
}
 8009726:	bf00      	nop
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	20000844 	.word	0x20000844
 8009730:	20000890 	.word	0x20000890
 8009734:	200008a0 	.word	0x200008a0

08009738 <TIMER7_Init>:

void TIMER7_Init(void)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	af00      	add	r7, sp, #0
	if(HAL_TIM_Base_Init(&timer7_cfg) != HAL_OK)
 800973c:	4804      	ldr	r0, [pc, #16]	; (8009750 <TIMER7_Init+0x18>)
 800973e:	f7fc f98c 	bl	8005a5a <HAL_TIM_Base_Init>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d001      	beq.n	800974c <TIMER7_Init+0x14>
	{
		Error_Handler();
 8009748:	f7f7 fe6c 	bl	8001424 <Error_Handler>
	}
}
 800974c:	bf00      	nop
 800974e:	bd80      	pop	{r7, pc}
 8009750:	200007f8 	.word	0x200007f8

08009754 <UART_Init>:
 * @arguments
 * @retvar
 */

void UART_Init(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < uart_cfg_length; i++)
 800975a:	2300      	movs	r3, #0
 800975c:	71fb      	strb	r3, [r7, #7]
 800975e:	e00c      	b.n	800977a <UART_Init+0x26>
	{
		HAL_UART_Init(&uart_cfg[i]);
 8009760:	79fa      	ldrb	r2, [r7, #7]
 8009762:	4613      	mov	r3, r2
 8009764:	015b      	lsls	r3, r3, #5
 8009766:	4413      	add	r3, r2
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4a09      	ldr	r2, [pc, #36]	; (8009790 <UART_Init+0x3c>)
 800976c:	4413      	add	r3, r2
 800976e:	4618      	mov	r0, r3
 8009770:	f7fc fda8 	bl	80062c4 <HAL_UART_Init>
	for(uint8_t i = 0; i < uart_cfg_length; i++)
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	3301      	adds	r3, #1
 8009778:	71fb      	strb	r3, [r7, #7]
 800977a:	4b06      	ldr	r3, [pc, #24]	; (8009794 <UART_Init+0x40>)
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	79fa      	ldrb	r2, [r7, #7]
 8009780:	429a      	cmp	r2, r3
 8009782:	d3ed      	bcc.n	8009760 <UART_Init+0xc>
	}
}
 8009784:	bf00      	nop
 8009786:	bf00      	nop
 8009788:	3708      	adds	r7, #8
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	20000914 	.word	0x20000914
 8009794:	20000aa0 	.word	0x20000aa0

08009798 <UART_AFE_Write>:
 * @arguments
 * @retvar
 */

void UART_AFE_Write(uint8_t *data, uint8_t size, uint8_t timeout)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	460b      	mov	r3, r1
 80097a2:	70fb      	strb	r3, [r7, #3]
 80097a4:	4613      	mov	r3, r2
 80097a6:	70bb      	strb	r3, [r7, #2]
	if(size>0)
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d006      	beq.n	80097bc <UART_AFE_Write+0x24>
	{
		HAL_UART_Transmit(&uart_cfg[0], data , size, timeout);
 80097ae:	78fb      	ldrb	r3, [r7, #3]
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	78bb      	ldrb	r3, [r7, #2]
 80097b4:	6879      	ldr	r1, [r7, #4]
 80097b6:	4803      	ldr	r0, [pc, #12]	; (80097c4 <UART_AFE_Write+0x2c>)
 80097b8:	f7fc fdd2 	bl	8006360 <HAL_UART_Transmit>
	}
}
 80097bc:	bf00      	nop
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20000914 	.word	0x20000914

080097c8 <UART_AFE_Read>:
 * @arguments
 * @retvar
 */

void UART_AFE_Read(uint8_t *data, uint8_t size, uint8_t timeout)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af02      	add	r7, sp, #8
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	460b      	mov	r3, r1
 80097d2:	70fb      	strb	r3, [r7, #3]
 80097d4:	4613      	mov	r3, r2
 80097d6:	70bb      	strb	r3, [r7, #2]
	HAL_UART_Receive(&uart_cfg[0], data, size, timeout);
 80097d8:	78fb      	ldrb	r3, [r7, #3]
 80097da:	b29a      	uxth	r2, r3
 80097dc:	78bb      	ldrb	r3, [r7, #2]
 80097de:	6879      	ldr	r1, [r7, #4]
 80097e0:	4815      	ldr	r0, [pc, #84]	; (8009838 <UART_AFE_Read+0x70>)
 80097e2:	f7fc fe51 	bl	8006488 <HAL_UART_Receive>
	if ((data[0]+1)!=(size-3))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	1c5a      	adds	r2, r3, #1
 80097ec:	78fb      	ldrb	r3, [r7, #3]
 80097ee:	3b03      	subs	r3, #3
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d01c      	beq.n	800982e <UART_AFE_Read+0x66>
	{
		AFE_WriteReg(BQ_ADDR, 81, 0X10, 1, FRMWRT_SGL_NR);
 80097f4:	2310      	movs	r3, #16
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	2301      	movs	r3, #1
 80097fa:	9300      	str	r3, [sp, #0]
 80097fc:	f04f 0210 	mov.w	r2, #16
 8009800:	f04f 0300 	mov.w	r3, #0
 8009804:	2151      	movs	r1, #81	; 0x51
 8009806:	2000      	movs	r0, #0
 8009808:	f000 fa3c 	bl	8009c84 <AFE_WriteReg>
		AFE_WriteReg(BQ_ADDR, 81, 0X08, 1, FRMWRT_SGL_NR);
 800980c:	2310      	movs	r3, #16
 800980e:	9301      	str	r3, [sp, #4]
 8009810:	2301      	movs	r3, #1
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	f04f 0208 	mov.w	r2, #8
 8009818:	f04f 0300 	mov.w	r3, #0
 800981c:	2151      	movs	r1, #81	; 0x51
 800981e:	2000      	movs	r0, #0
 8009820:	f000 fa30 	bl	8009c84 <AFE_WriteReg>
		AFE_Wakeup();
 8009824:	f000 f9fc 	bl	8009c20 <AFE_Wakeup>
		HAL_Delay(5);
 8009828:	2005      	movs	r0, #5
 800982a:	f7f7 ff19 	bl	8001660 <HAL_Delay>
	}
}
 800982e:	bf00      	nop
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	20000914 	.word	0x20000914

0800983c <DATABASE_Init>:
 * @retvar
 */


void DATABASE_Init(void)
{
 800983c:	b480      	push	{r7}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
	if(sizeof(database_header_dev) == 0)
	{
		while(1);
	}

	for(uint16_t i=0; i < database_header_dev.no_of_database; i++)
 8009842:	2300      	movs	r3, #0
 8009844:	81fb      	strh	r3, [r7, #14]
 8009846:	e01e      	b.n	8009886 <DATABASE_Init+0x4a>
	{
		uint8_t *database_elementptr = (uint8_t*)(void*)*(uint32_t*)(database_header_dev.database_headerptr + i);
 8009848:	4b15      	ldr	r3, [pc, #84]	; (80098a0 <DATABASE_Init+0x64>)
 800984a:	685a      	ldr	r2, [r3, #4]
 800984c:	89fb      	ldrh	r3, [r7, #14]
 800984e:	00db      	lsls	r3, r3, #3
 8009850:	4413      	add	r3, r2
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	60bb      	str	r3, [r7, #8]

		for(uint16_t j=0; j < (database_header_dev.database_headerptr+i)->database_length; j++)
 8009856:	2300      	movs	r3, #0
 8009858:	80fb      	strh	r3, [r7, #6]
 800985a:	e008      	b.n	800986e <DATABASE_Init+0x32>
		{
			*database_elementptr = 0;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	2200      	movs	r2, #0
 8009860:	701a      	strb	r2, [r3, #0]
			database_elementptr++;
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	3301      	adds	r3, #1
 8009866:	60bb      	str	r3, [r7, #8]
		for(uint16_t j=0; j < (database_header_dev.database_headerptr+i)->database_length; j++)
 8009868:	88fb      	ldrh	r3, [r7, #6]
 800986a:	3301      	adds	r3, #1
 800986c:	80fb      	strh	r3, [r7, #6]
 800986e:	4b0c      	ldr	r3, [pc, #48]	; (80098a0 <DATABASE_Init+0x64>)
 8009870:	685a      	ldr	r2, [r3, #4]
 8009872:	89fb      	ldrh	r3, [r7, #14]
 8009874:	00db      	lsls	r3, r3, #3
 8009876:	4413      	add	r3, r2
 8009878:	889b      	ldrh	r3, [r3, #4]
 800987a:	88fa      	ldrh	r2, [r7, #6]
 800987c:	429a      	cmp	r2, r3
 800987e:	d3ed      	bcc.n	800985c <DATABASE_Init+0x20>
	for(uint16_t i=0; i < database_header_dev.no_of_database; i++)
 8009880:	89fb      	ldrh	r3, [r7, #14]
 8009882:	3301      	adds	r3, #1
 8009884:	81fb      	strh	r3, [r7, #14]
 8009886:	4b06      	ldr	r3, [pc, #24]	; (80098a0 <DATABASE_Init+0x64>)
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	b29b      	uxth	r3, r3
 800988c:	89fa      	ldrh	r2, [r7, #14]
 800988e:	429a      	cmp	r2, r3
 8009890:	d3da      	bcc.n	8009848 <DATABASE_Init+0xc>
		}
	}

}
 8009892:	bf00      	nop
 8009894:	bf00      	nop
 8009896:	3714      	adds	r7, #20
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	0800b648 	.word	0x0800b648

080098a4 <DATABASE_WRITE>:

void DATABASE_WRITE(void *src_database_ptr, DATABASE_e DATABASE_NAME)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b088      	sub	sp, #32
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	460b      	mov	r3, r1
 80098ae:	70fb      	strb	r3, [r7, #3]
	void *srcDataPtr;
	void *dstDataPtr;
	uint32_t dataLength;
	DATABASE_TIMESTAMP_s	timestamp;

	DATABASE_TimeStamp(&timestamp);
 80098b0:	f107 030c 	add.w	r3, r7, #12
 80098b4:	4618      	mov	r0, r3
 80098b6:	f000 f845 	bl	8009944 <DATABASE_TimeStamp>

	srcDataPtr = src_database_ptr;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	61fb      	str	r3, [r7, #28]
	dstDataPtr = (database_header_dev.database_headerptr + DATABASE_NAME)->databaseptr;
 80098be:	4b0f      	ldr	r3, [pc, #60]	; (80098fc <DATABASE_WRITE+0x58>)
 80098c0:	685a      	ldr	r2, [r3, #4]
 80098c2:	78fb      	ldrb	r3, [r7, #3]
 80098c4:	00db      	lsls	r3, r3, #3
 80098c6:	4413      	add	r3, r2
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	61bb      	str	r3, [r7, #24]
	dataLength = (database_header_dev.database_headerptr + DATABASE_NAME)->database_length;
 80098cc:	4b0b      	ldr	r3, [pc, #44]	; (80098fc <DATABASE_WRITE+0x58>)
 80098ce:	685a      	ldr	r2, [r3, #4]
 80098d0:	78fb      	ldrb	r3, [r7, #3]
 80098d2:	00db      	lsls	r3, r3, #3
 80098d4:	4413      	add	r3, r2
 80098d6:	889b      	ldrh	r3, [r3, #4]
 80098d8:	617b      	str	r3, [r7, #20]

	memcpy(dstDataPtr,srcDataPtr,dataLength);
 80098da:	697a      	ldr	r2, [r7, #20]
 80098dc:	69f9      	ldr	r1, [r7, #28]
 80098de:	69b8      	ldr	r0, [r7, #24]
 80098e0:	f001 fc66 	bl	800b1b0 <memcpy>
	memcpy(dstDataPtr,(void*)(&timestamp),6);
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	461a      	mov	r2, r3
 80098e8:	f107 030c 	add.w	r3, r7, #12
 80098ec:	6818      	ldr	r0, [r3, #0]
 80098ee:	6010      	str	r0, [r2, #0]
 80098f0:	889b      	ldrh	r3, [r3, #4]
 80098f2:	8093      	strh	r3, [r2, #4]

}
 80098f4:	bf00      	nop
 80098f6:	3720      	adds	r7, #32
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	0800b648 	.word	0x0800b648

08009900 <DATABASE_READ>:

void DATABASE_READ(void *dst_database_ptr, DATABASE_e	DATABASE_NAME)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	460b      	mov	r3, r1
 800990a:	70fb      	strb	r3, [r7, #3]
	void *srcDataPtr;
	void *dstDataPtr;
	uint32_t dataLength;

	srcDataPtr = (database_header_dev.database_headerptr + DATABASE_NAME)->databaseptr;
 800990c:	4b0c      	ldr	r3, [pc, #48]	; (8009940 <DATABASE_READ+0x40>)
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	78fb      	ldrb	r3, [r7, #3]
 8009912:	00db      	lsls	r3, r3, #3
 8009914:	4413      	add	r3, r2
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	617b      	str	r3, [r7, #20]
	dstDataPtr = dst_database_ptr;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	613b      	str	r3, [r7, #16]
	dataLength = (database_header_dev.database_headerptr + DATABASE_NAME)->database_length;
 800991e:	4b08      	ldr	r3, [pc, #32]	; (8009940 <DATABASE_READ+0x40>)
 8009920:	685a      	ldr	r2, [r3, #4]
 8009922:	78fb      	ldrb	r3, [r7, #3]
 8009924:	00db      	lsls	r3, r3, #3
 8009926:	4413      	add	r3, r2
 8009928:	889b      	ldrh	r3, [r3, #4]
 800992a:	60fb      	str	r3, [r7, #12]

	memcpy(dstDataPtr,srcDataPtr,dataLength);
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	6979      	ldr	r1, [r7, #20]
 8009930:	6938      	ldr	r0, [r7, #16]
 8009932:	f001 fc3d 	bl	800b1b0 <memcpy>
}
 8009936:	bf00      	nop
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	0800b648 	.word	0x0800b648

08009944 <DATABASE_TimeStamp>:

void DATABASE_TimeStamp(DATABASE_TIMESTAMP_s	*timestamp)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b088      	sub	sp, #32
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef	time;
	RTC_DateTypeDef	date;

	RTC_GetTime(&time);
 800994c:	f107 030c 	add.w	r3, r7, #12
 8009950:	4618      	mov	r0, r3
 8009952:	f7ff fe31 	bl	80095b8 <RTC_GetTime>
	RTC_GetDate(&date);
 8009956:	f107 0308 	add.w	r3, r7, #8
 800995a:	4618      	mov	r0, r3
 800995c:	f7ff fe3c 	bl	80095d8 <RTC_GetDate>

	timestamp->hour = time.Hours;
 8009960:	7b3a      	ldrb	r2, [r7, #12]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	701a      	strb	r2, [r3, #0]
	timestamp->minute = time.Minutes;
 8009966:	7b7a      	ldrb	r2, [r7, #13]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	705a      	strb	r2, [r3, #1]
	timestamp->second = time.Seconds;
 800996c:	7bba      	ldrb	r2, [r7, #14]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	709a      	strb	r2, [r3, #2]
	timestamp->day = date.Date;
 8009972:	7aba      	ldrb	r2, [r7, #10]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	70da      	strb	r2, [r3, #3]
	timestamp->month = date.Month;
 8009978:	7a7a      	ldrb	r2, [r7, #9]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	711a      	strb	r2, [r3, #4]
	timestamp->year = date.Year;
 800997e:	7afa      	ldrb	r2, [r7, #11]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	715a      	strb	r2, [r3, #5]
}
 8009984:	bf00      	nop
 8009986:	3720      	adds	r7, #32
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <DATABASE_Length>:

uint16_t DATABASE_Length(DATABASE_e	DATABASE_NAME)
{
 800998c:	b480      	push	{r7}
 800998e:	b085      	sub	sp, #20
 8009990:	af00      	add	r7, sp, #0
 8009992:	4603      	mov	r3, r0
 8009994:	71fb      	strb	r3, [r7, #7]
	uint16_t length;

	length = (database_header_dev.database_headerptr + DATABASE_NAME)->database_length;
 8009996:	4b07      	ldr	r3, [pc, #28]	; (80099b4 <DATABASE_Length+0x28>)
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	79fb      	ldrb	r3, [r7, #7]
 800999c:	00db      	lsls	r3, r3, #3
 800999e:	4413      	add	r3, r2
 80099a0:	889b      	ldrh	r3, [r3, #4]
 80099a2:	81fb      	strh	r3, [r7, #14]

	return length;
 80099a4:	89fb      	ldrh	r3, [r7, #14]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3714      	adds	r7, #20
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	0800b648 	.word	0x0800b648

080099b8 <FAULTMANAGER_SOC>:
		DATABASE_WRITE((void*)(&fm_database_error), DATABASE_ERROR);
	}
}

void FAULTMANAGER_SOC(DATABASE_SOC_s *database)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
	DATABASE_READ((void*)(&fm_database_bms), DATABASE_BMS);
 80099c0:	2110      	movs	r1, #16
 80099c2:	4827      	ldr	r0, [pc, #156]	; (8009a60 <FAULTMANAGER_SOC+0xa8>)
 80099c4:	f7ff ff9c 	bl	8009900 <DATABASE_READ>

	if(fm_database_bms.bms_state != BMS_IDLE)
 80099c8:	4b25      	ldr	r3, [pc, #148]	; (8009a60 <FAULTMANAGER_SOC+0xa8>)
 80099ca:	79db      	ldrb	r3, [r3, #7]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d042      	beq.n	8009a56 <FAULTMANAGER_SOC+0x9e>
	{
		/*---------------------------------------------------------------------------------------------------------------------------------------------------------*/
			DATABASE_READ((void*)(&fm_database_error), DATABASE_ERROR);
 80099d0:	210c      	movs	r1, #12
 80099d2:	4824      	ldr	r0, [pc, #144]	; (8009a64 <FAULTMANAGER_SOC+0xac>)
 80099d4:	f7ff ff94 	bl	8009900 <DATABASE_READ>

			/* SOC High Error */
			if(fm_database_error.error_flag_ROL.soc_high == FAULT)
 80099d8:	4b22      	ldr	r3, [pc, #136]	; (8009a64 <FAULTMANAGER_SOC+0xac>)
 80099da:	7c5b      	ldrb	r3, [r3, #17]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d103      	bne.n	80099e8 <FAULTMANAGER_SOC+0x30>
			{
				FAULTMANAGER_ClearSOCFlag(database);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 f843 	bl	8009a6c <FAULTMANAGER_ClearSOCFlag>
 80099e6:	e003      	b.n	80099f0 <FAULTMANAGER_SOC+0x38>
			}
			else
			{
				fm_database_error.error_release_counter_ROL.soch_release_counter = 0;
 80099e8:	4b1e      	ldr	r3, [pc, #120]	; (8009a64 <FAULTMANAGER_SOC+0xac>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
			}

			if(fm_database_error.error_flag_MOL.soc_high == FAULT)
 80099f0:	4b1c      	ldr	r3, [pc, #112]	; (8009a64 <FAULTMANAGER_SOC+0xac>)
 80099f2:	7f9b      	ldrb	r3, [r3, #30]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d106      	bne.n	8009a06 <FAULTMANAGER_SOC+0x4e>
			{
				FAULT_ARRAY[FAULT_SOC_HIGH] = FAULT;
 80099f8:	4b1b      	ldr	r3, [pc, #108]	; (8009a68 <FAULTMANAGER_SOC+0xb0>)
 80099fa:	2201      	movs	r2, #1
 80099fc:	72da      	strb	r2, [r3, #11]
				FAULTMANAGER_ClearSOCFlag(database);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f834 	bl	8009a6c <FAULTMANAGER_ClearSOCFlag>
 8009a04:	e003      	b.n	8009a0e <FAULTMANAGER_SOC+0x56>
			}
			else
			{
				fm_database_error.error_release_counter_MOL.soch_release_counter = 0;
 8009a06:	4b17      	ldr	r3, [pc, #92]	; (8009a64 <FAULTMANAGER_SOC+0xac>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
			}

			/* SOC Low Error */
			if(fm_database_error.error_flag_ROL.soc_low == FAULT)
 8009a0e:	4b15      	ldr	r3, [pc, #84]	; (8009a64 <FAULTMANAGER_SOC+0xac>)
 8009a10:	7c9b      	ldrb	r3, [r3, #18]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d103      	bne.n	8009a1e <FAULTMANAGER_SOC+0x66>
			{
				FAULTMANAGER_ClearSOCFlag(database);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 f828 	bl	8009a6c <FAULTMANAGER_ClearSOCFlag>
 8009a1c:	e003      	b.n	8009a26 <FAULTMANAGER_SOC+0x6e>
			}
			else
			{
				fm_database_error.error_release_counter_ROL.socl_release_counter = 0;
 8009a1e:	4b11      	ldr	r3, [pc, #68]	; (8009a64 <FAULTMANAGER_SOC+0xac>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}

			if(fm_database_error.error_flag_MOL.soc_low == FAULT || fm_database_error.error_flag_MSL.soc_low == FAULT)
 8009a26:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <FAULTMANAGER_SOC+0xac>)
 8009a28:	7fdb      	ldrb	r3, [r3, #31]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d004      	beq.n	8009a38 <FAULTMANAGER_SOC+0x80>
 8009a2e:	4b0d      	ldr	r3, [pc, #52]	; (8009a64 <FAULTMANAGER_SOC+0xac>)
 8009a30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d106      	bne.n	8009a46 <FAULTMANAGER_SOC+0x8e>
			{
				FAULT_ARRAY[FAULT_SOC_LOW] = FAULT;
 8009a38:	4b0b      	ldr	r3, [pc, #44]	; (8009a68 <FAULTMANAGER_SOC+0xb0>)
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	731a      	strb	r2, [r3, #12]
				FAULTMANAGER_ClearSOCFlag(database);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f814 	bl	8009a6c <FAULTMANAGER_ClearSOCFlag>
 8009a44:	e003      	b.n	8009a4e <FAULTMANAGER_SOC+0x96>
			}
			else
			{
				fm_database_error.error_release_counter_MOL.socl_release_counter = 0;
 8009a46:	4b07      	ldr	r3, [pc, #28]	; (8009a64 <FAULTMANAGER_SOC+0xac>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			}

			DATABASE_WRITE((void*)(&fm_database_error), DATABASE_ERROR);
 8009a4e:	210c      	movs	r1, #12
 8009a50:	4804      	ldr	r0, [pc, #16]	; (8009a64 <FAULTMANAGER_SOC+0xac>)
 8009a52:	f7ff ff27 	bl	80098a4 <DATABASE_WRITE>
	}
}
 8009a56:	bf00      	nop
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	200019d4 	.word	0x200019d4
 8009a64:	20001954 	.word	0x20001954
 8009a68:	200019e4 	.word	0x200019e4

08009a6c <FAULTMANAGER_ClearSOCFlag>:

void FAULTMANAGER_ClearSOCFlag(DATABASE_SOC_s *database)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
	DATABASE_READ((void*)(&fm_database_bms), DATABASE_BMS);
 8009a74:	2110      	movs	r1, #16
 8009a76:	485d      	ldr	r0, [pc, #372]	; (8009bec <FAULTMANAGER_ClearSOCFlag+0x180>)
 8009a78:	f7ff ff42 	bl	8009900 <DATABASE_READ>

	if(fm_database_bms.bms_state != BMS_IDLE)
 8009a7c:	4b5b      	ldr	r3, [pc, #364]	; (8009bec <FAULTMANAGER_ClearSOCFlag+0x180>)
 8009a7e:	79db      	ldrb	r3, [r3, #7]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f000 80ae 	beq.w	8009be2 <FAULTMANAGER_ClearSOCFlag+0x176>
	{
		/*---------------------------------------------------------------------------------------------------------------------------------------------------------*/
		DATABASE_READ((void*)(&fm_database_error), DATABASE_ERROR);
 8009a86:	210c      	movs	r1, #12
 8009a88:	4859      	ldr	r0, [pc, #356]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009a8a:	f7ff ff39 	bl	8009900 <DATABASE_READ>

		if(fm_database_error.error_flag_ROL.soc_high == FAULT)
 8009a8e:	4b58      	ldr	r3, [pc, #352]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009a90:	7c5b      	ldrb	r3, [r3, #17]
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	d14e      	bne.n	8009b34 <FAULTMANAGER_ClearSOCFlag+0xc8>
		{
			if(database->soc < SOCH_ROL_R)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	799a      	ldrb	r2, [r3, #6]
 8009a9a:	4b56      	ldr	r3, [pc, #344]	; (8009bf4 <FAULTMANAGER_ClearSOCFlag+0x188>)
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d21e      	bcs.n	8009ae0 <FAULTMANAGER_ClearSOCFlag+0x74>
			{
				fm_database_error.error_release_counter_ROL.soch_release_counter++;
 8009aa2:	4b53      	ldr	r3, [pc, #332]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009aa4:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	4b50      	ldr	r3, [pc, #320]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009aae:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
				if(fm_database_error.error_release_counter_ROL.soch_release_counter > (SOCH_ROL_R_DELAY/SOC_SAMPLING))
 8009ab2:	4b4f      	ldr	r3, [pc, #316]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009ab4:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	4b4f      	ldr	r3, [pc, #316]	; (8009bf8 <FAULTMANAGER_ClearSOCFlag+0x18c>)
 8009abc:	8819      	ldrh	r1, [r3, #0]
 8009abe:	4b4f      	ldr	r3, [pc, #316]	; (8009bfc <FAULTMANAGER_ClearSOCFlag+0x190>)
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	fbb1 f3f3 	udiv	r3, r1, r3
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d909      	bls.n	8009ae0 <FAULTMANAGER_ClearSOCFlag+0x74>
				{
					if(FAULT_ARRAY[FAULT_SOC_HIGH] == NO_FAULT)
 8009acc:	4b4c      	ldr	r3, [pc, #304]	; (8009c00 <FAULTMANAGER_ClearSOCFlag+0x194>)
 8009ace:	7adb      	ldrb	r3, [r3, #11]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d105      	bne.n	8009ae0 <FAULTMANAGER_ClearSOCFlag+0x74>
					{
						fm_database_error.error_flag_ROL.soc_high = NO_FAULT;
 8009ad4:	4b46      	ldr	r3, [pc, #280]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	745a      	strb	r2, [r3, #17]
						WARNING_ARRAY[FAULT_SOC_HIGH] = NO_FAULT;
 8009ada:	4b4a      	ldr	r3, [pc, #296]	; (8009c04 <FAULTMANAGER_ClearSOCFlag+0x198>)
 8009adc:	2200      	movs	r2, #0
 8009ade:	72da      	strb	r2, [r3, #11]
					}
				}
			}

			if(fm_database_error.error_flag_MOL.soc_high == FAULT)
 8009ae0:	4b43      	ldr	r3, [pc, #268]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009ae2:	7f9b      	ldrb	r3, [r3, #30]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d125      	bne.n	8009b34 <FAULTMANAGER_ClearSOCFlag+0xc8>
			{
				if(database->soc < SOCH_MOL_R)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	799a      	ldrb	r2, [r3, #6]
 8009aec:	4b46      	ldr	r3, [pc, #280]	; (8009c08 <FAULTMANAGER_ClearSOCFlag+0x19c>)
 8009aee:	781b      	ldrb	r3, [r3, #0]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d21b      	bcs.n	8009b2c <FAULTMANAGER_ClearSOCFlag+0xc0>
				{
					fm_database_error.error_release_counter_MOL.soch_release_counter++;
 8009af4:	4b3e      	ldr	r3, [pc, #248]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009af6:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8009afa:	3301      	adds	r3, #1
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	4b3c      	ldr	r3, [pc, #240]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009b00:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
					if(fm_database_error.error_release_counter_MOL.soch_release_counter > (SOCH_MOL_R_DELAY/SOC_SAMPLING))
 8009b04:	4b3a      	ldr	r3, [pc, #232]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009b06:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	4b3f      	ldr	r3, [pc, #252]	; (8009c0c <FAULTMANAGER_ClearSOCFlag+0x1a0>)
 8009b0e:	8819      	ldrh	r1, [r3, #0]
 8009b10:	4b3a      	ldr	r3, [pc, #232]	; (8009bfc <FAULTMANAGER_ClearSOCFlag+0x190>)
 8009b12:	881b      	ldrh	r3, [r3, #0]
 8009b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d90a      	bls.n	8009b34 <FAULTMANAGER_ClearSOCFlag+0xc8>
					{
						fm_database_error.error_flag_MOL.soc_high = NO_FAULT;
 8009b1e:	4b34      	ldr	r3, [pc, #208]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009b20:	2200      	movs	r2, #0
 8009b22:	779a      	strb	r2, [r3, #30]
						FAULT_ARRAY[FAULT_SOC_HIGH] = NO_FAULT;
 8009b24:	4b36      	ldr	r3, [pc, #216]	; (8009c00 <FAULTMANAGER_ClearSOCFlag+0x194>)
 8009b26:	2200      	movs	r2, #0
 8009b28:	72da      	strb	r2, [r3, #11]
 8009b2a:	e003      	b.n	8009b34 <FAULTMANAGER_ClearSOCFlag+0xc8>
					}
				}
				else
				{
					fm_database_error.error_release_counter_MOL.soch_release_counter = 0;
 8009b2c:	4b30      	ldr	r3, [pc, #192]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b

//			CAN_Send_Warning_1();
//			CAN_Send_Warning_2();
		}

		if(fm_database_error.error_flag_ROL.soc_low == FAULT)
 8009b34:	4b2e      	ldr	r3, [pc, #184]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009b36:	7c9b      	ldrb	r3, [r3, #18]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d14e      	bne.n	8009bda <FAULTMANAGER_ClearSOCFlag+0x16e>
		{
			if(database->soc > SOCL_ROL_R)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	799a      	ldrb	r2, [r3, #6]
 8009b40:	4b33      	ldr	r3, [pc, #204]	; (8009c10 <FAULTMANAGER_ClearSOCFlag+0x1a4>)
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d91e      	bls.n	8009b86 <FAULTMANAGER_ClearSOCFlag+0x11a>
			{
				fm_database_error.error_release_counter_ROL.socl_release_counter++;
 8009b48:	4b29      	ldr	r3, [pc, #164]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009b4a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009b4e:	3301      	adds	r3, #1
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	4b27      	ldr	r3, [pc, #156]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				if(fm_database_error.error_release_counter_ROL.socl_release_counter > (SOCL_ROL_R_DELAY/SOC_SAMPLING))
 8009b58:	4b25      	ldr	r3, [pc, #148]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009b5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	4b2c      	ldr	r3, [pc, #176]	; (8009c14 <FAULTMANAGER_ClearSOCFlag+0x1a8>)
 8009b62:	8819      	ldrh	r1, [r3, #0]
 8009b64:	4b25      	ldr	r3, [pc, #148]	; (8009bfc <FAULTMANAGER_ClearSOCFlag+0x190>)
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d909      	bls.n	8009b86 <FAULTMANAGER_ClearSOCFlag+0x11a>
				{
					if(FAULT_ARRAY[FAULT_SOC_LOW] == NO_FAULT)
 8009b72:	4b23      	ldr	r3, [pc, #140]	; (8009c00 <FAULTMANAGER_ClearSOCFlag+0x194>)
 8009b74:	7b1b      	ldrb	r3, [r3, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d105      	bne.n	8009b86 <FAULTMANAGER_ClearSOCFlag+0x11a>
					{
						fm_database_error.error_flag_ROL.soc_low = NO_FAULT;
 8009b7a:	4b1d      	ldr	r3, [pc, #116]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	749a      	strb	r2, [r3, #18]
						WARNING_ARRAY[FAULT_SOC_LOW] = NO_FAULT;
 8009b80:	4b20      	ldr	r3, [pc, #128]	; (8009c04 <FAULTMANAGER_ClearSOCFlag+0x198>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	731a      	strb	r2, [r3, #12]
					}
				}
			}

			if(fm_database_error.error_flag_MOL.soc_low == FAULT)
 8009b86:	4b1a      	ldr	r3, [pc, #104]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009b88:	7fdb      	ldrb	r3, [r3, #31]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d125      	bne.n	8009bda <FAULTMANAGER_ClearSOCFlag+0x16e>
			{
				if(database->soc > SOCL_MOL_R)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	799a      	ldrb	r2, [r3, #6]
 8009b92:	4b21      	ldr	r3, [pc, #132]	; (8009c18 <FAULTMANAGER_ClearSOCFlag+0x1ac>)
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d91b      	bls.n	8009bd2 <FAULTMANAGER_ClearSOCFlag+0x166>
				{
					fm_database_error.error_release_counter_MOL.socl_release_counter++;
 8009b9a:	4b15      	ldr	r3, [pc, #84]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009b9c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	4b12      	ldr	r3, [pc, #72]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009ba6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
					if(fm_database_error.error_release_counter_MOL.socl_release_counter > (SOCL_MOL_R_DELAY/SOC_SAMPLING))
 8009baa:	4b11      	ldr	r3, [pc, #68]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009bac:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	4b1a      	ldr	r3, [pc, #104]	; (8009c1c <FAULTMANAGER_ClearSOCFlag+0x1b0>)
 8009bb4:	8819      	ldrh	r1, [r3, #0]
 8009bb6:	4b11      	ldr	r3, [pc, #68]	; (8009bfc <FAULTMANAGER_ClearSOCFlag+0x190>)
 8009bb8:	881b      	ldrh	r3, [r3, #0]
 8009bba:	fbb1 f3f3 	udiv	r3, r1, r3
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d90a      	bls.n	8009bda <FAULTMANAGER_ClearSOCFlag+0x16e>
					{
						fm_database_error.error_flag_MOL.soc_low = NO_FAULT;
 8009bc4:	4b0a      	ldr	r3, [pc, #40]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	77da      	strb	r2, [r3, #31]
						FAULT_ARRAY[FAULT_SOC_LOW] = NO_FAULT;
 8009bca:	4b0d      	ldr	r3, [pc, #52]	; (8009c00 <FAULTMANAGER_ClearSOCFlag+0x194>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	731a      	strb	r2, [r3, #12]
 8009bd0:	e003      	b.n	8009bda <FAULTMANAGER_ClearSOCFlag+0x16e>
					}
				}
				else
				{
					fm_database_error.error_release_counter_MOL.socl_release_counter = 0;
 8009bd2:	4b07      	ldr	r3, [pc, #28]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
			}

//			CAN_Send_Warning();
		}

		DATABASE_WRITE((void*)(&fm_database_error), DATABASE_ERROR);
 8009bda:	210c      	movs	r1, #12
 8009bdc:	4804      	ldr	r0, [pc, #16]	; (8009bf0 <FAULTMANAGER_ClearSOCFlag+0x184>)
 8009bde:	f7ff fe61 	bl	80098a4 <DATABASE_WRITE>
	}
}
 8009be2:	bf00      	nop
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	200019d4 	.word	0x200019d4
 8009bf0:	20001954 	.word	0x20001954
 8009bf4:	2000001a 	.word	0x2000001a
 8009bf8:	2000001c 	.word	0x2000001c
 8009bfc:	2000000a 	.word	0x2000000a
 8009c00:	200019e4 	.word	0x200019e4
 8009c04:	200011ec 	.word	0x200011ec
 8009c08:	2000001b 	.word	0x2000001b
 8009c0c:	2000001e 	.word	0x2000001e
 8009c10:	20000026 	.word	0x20000026
 8009c14:	20000028 	.word	0x20000028
 8009c18:	20000027 	.word	0x20000027
 8009c1c:	2000002a 	.word	0x2000002a

08009c20 <AFE_Wakeup>:
 * @arguments
 * @retvar
 */

void AFE_Wakeup(void)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af02      	add	r7, sp, #8
	for(uint8_t i=0; i<5; i++)
 8009c26:	2300      	movs	r3, #0
 8009c28:	71fb      	strb	r3, [r7, #7]
 8009c2a:	e008      	b.n	8009c3e <AFE_Wakeup+0x1e>
	{
		GPIO_TogglePin(GPIO_PIN_BMS_WAKEUP_PIN);
 8009c2c:	2023      	movs	r0, #35	; 0x23
 8009c2e:	f7ff fbe6 	bl	80093fe <GPIO_TogglePin>
		HAL_Delay(1);
 8009c32:	2001      	movs	r0, #1
 8009c34:	f7f7 fd14 	bl	8001660 <HAL_Delay>
	for(uint8_t i=0; i<5; i++)
 8009c38:	79fb      	ldrb	r3, [r7, #7]
 8009c3a:	3301      	adds	r3, #1
 8009c3c:	71fb      	strb	r3, [r7, #7]
 8009c3e:	79fb      	ldrb	r3, [r7, #7]
 8009c40:	2b04      	cmp	r3, #4
 8009c42:	d9f3      	bls.n	8009c2c <AFE_Wakeup+0xc>
	}

	for(uint8_t i=1; i<=NO_OF_DAISY_STACK; i++)
 8009c44:	2301      	movs	r3, #1
 8009c46:	71bb      	strb	r3, [r7, #6]
 8009c48:	e011      	b.n	8009c6e <AFE_Wakeup+0x4e>
	{
		AFE_WriteReg(BQ_ADDR, 12, 20, 1, FRMWRT_ALL_NR); //12 - Device control register addr.
 8009c4a:	2370      	movs	r3, #112	; 0x70
 8009c4c:	9301      	str	r3, [sp, #4]
 8009c4e:	2301      	movs	r3, #1
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	f04f 0214 	mov.w	r2, #20
 8009c56:	f04f 0300 	mov.w	r3, #0
 8009c5a:	210c      	movs	r1, #12
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	f000 f811 	bl	8009c84 <AFE_WriteReg>
		HAL_Delay(1);                                    //20 - 0010 0000 - fith bit is STACK_WAKE
 8009c62:	2001      	movs	r0, #1
 8009c64:	f7f7 fcfc 	bl	8001660 <HAL_Delay>
	for(uint8_t i=1; i<=NO_OF_DAISY_STACK; i++)
 8009c68:	79bb      	ldrb	r3, [r7, #6]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	71bb      	strb	r3, [r7, #6]
 8009c6e:	79bb      	ldrb	r3, [r7, #6]
 8009c70:	2b08      	cmp	r3, #8
 8009c72:	d9ea      	bls.n	8009c4a <AFE_Wakeup+0x2a>
	}

	GPIO_WritePin(GPIO_PIN_BMS_WAKEUP_PIN, GPIO_PIN_SET);
 8009c74:	2101      	movs	r1, #1
 8009c76:	2023      	movs	r0, #35	; 0x23
 8009c78:	f7ff fba2 	bl	80093c0 <GPIO_WritePin>
}
 8009c7c:	bf00      	nop
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <AFE_WriteReg>:
 * @arguments
 * @retvar
 */

int  AFE_WriteReg(uint8_t bID, uint16_t wAddr, uint64_t dwData, uint8_t bLen, uint8_t bWriteType)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b088      	sub	sp, #32
 8009c88:	af02      	add	r7, sp, #8
 8009c8a:	e9c7 2300 	strd	r2, r3, [r7]
 8009c8e:	4603      	mov	r3, r0
 8009c90:	73fb      	strb	r3, [r7, #15]
 8009c92:	460b      	mov	r3, r1
 8009c94:	81bb      	strh	r3, [r7, #12]
	int bRes = 0;
 8009c96:	2300      	movs	r3, #0
 8009c98:	617b      	str	r3, [r7, #20]
	uint8_t bBuf[4] = {0, 0, 0, 0};
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	613b      	str	r3, [r7, #16]
	switch(bLen)
 8009c9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	2b07      	cmp	r3, #7
 8009ca6:	f200 81bf 	bhi.w	800a028 <AFE_WriteReg+0x3a4>
 8009caa:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <AFE_WriteReg+0x2c>)
 8009cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb0:	08009cd1 	.word	0x08009cd1
 8009cb4:	08009ced 	.word	0x08009ced
 8009cb8:	08009d21 	.word	0x08009d21
 8009cbc:	08009d6d 	.word	0x08009d6d
 8009cc0:	08009dd1 	.word	0x08009dd1
 8009cc4:	08009e49 	.word	0x08009e49
 8009cc8:	08009ed5 	.word	0x08009ed5
 8009ccc:	08009f75 	.word	0x08009f75
	{
	case 1:
		bBuf[0] =  dwData & 0x00000000000000FF;
 8009cd0:	783b      	ldrb	r3, [r7, #0]
 8009cd2:	743b      	strb	r3, [r7, #16]
		bRes = AFE_WriteFrame(bID, wAddr, bBuf, 1, bWriteType);
 8009cd4:	f107 0210 	add.w	r2, r7, #16
 8009cd8:	89b9      	ldrh	r1, [r7, #12]
 8009cda:	7bf8      	ldrb	r0, [r7, #15]
 8009cdc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	f000 f9a6 	bl	800a034 <AFE_WriteFrame>
 8009ce8:	6178      	str	r0, [r7, #20]
		break;
 8009cea:	e19e      	b.n	800a02a <AFE_WriteReg+0x3a6>
	case 2:
		bBuf[0] = (dwData & 0x000000000000FF00) >> 8;
 8009cec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009cf0:	f04f 0200 	mov.w	r2, #0
 8009cf4:	f04f 0300 	mov.w	r3, #0
 8009cf8:	0a02      	lsrs	r2, r0, #8
 8009cfa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009cfe:	0a0b      	lsrs	r3, r1, #8
 8009d00:	b2d3      	uxtb	r3, r2
 8009d02:	743b      	strb	r3, [r7, #16]
		bBuf[1] =  dwData & 0x00000000000000FF;
 8009d04:	783b      	ldrb	r3, [r7, #0]
 8009d06:	747b      	strb	r3, [r7, #17]
		bRes = AFE_WriteFrame(bID, wAddr, bBuf, 2, bWriteType);
 8009d08:	f107 0210 	add.w	r2, r7, #16
 8009d0c:	89b9      	ldrh	r1, [r7, #12]
 8009d0e:	7bf8      	ldrb	r0, [r7, #15]
 8009d10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	2302      	movs	r3, #2
 8009d18:	f000 f98c 	bl	800a034 <AFE_WriteFrame>
 8009d1c:	6178      	str	r0, [r7, #20]
		break;
 8009d1e:	e184      	b.n	800a02a <AFE_WriteReg+0x3a6>
	case 3:
		bBuf[0] = (dwData & 0x0000000000FF0000) >> 16;
 8009d20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d24:	f04f 0200 	mov.w	r2, #0
 8009d28:	f04f 0300 	mov.w	r3, #0
 8009d2c:	0c02      	lsrs	r2, r0, #16
 8009d2e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009d32:	0c0b      	lsrs	r3, r1, #16
 8009d34:	b2d3      	uxtb	r3, r2
 8009d36:	743b      	strb	r3, [r7, #16]
		bBuf[1] = (dwData & 0x000000000000FF00) >> 8;
 8009d38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d3c:	f04f 0200 	mov.w	r2, #0
 8009d40:	f04f 0300 	mov.w	r3, #0
 8009d44:	0a02      	lsrs	r2, r0, #8
 8009d46:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009d4a:	0a0b      	lsrs	r3, r1, #8
 8009d4c:	b2d3      	uxtb	r3, r2
 8009d4e:	747b      	strb	r3, [r7, #17]
		bBuf[2] =  dwData & 0x00000000000000FF;
 8009d50:	783b      	ldrb	r3, [r7, #0]
 8009d52:	74bb      	strb	r3, [r7, #18]
		bRes = AFE_WriteFrame(bID, wAddr, bBuf, 3, bWriteType);
 8009d54:	f107 0210 	add.w	r2, r7, #16
 8009d58:	89b9      	ldrh	r1, [r7, #12]
 8009d5a:	7bf8      	ldrb	r0, [r7, #15]
 8009d5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	2303      	movs	r3, #3
 8009d64:	f000 f966 	bl	800a034 <AFE_WriteFrame>
 8009d68:	6178      	str	r0, [r7, #20]
		break;
 8009d6a:	e15e      	b.n	800a02a <AFE_WriteReg+0x3a6>
	case 4:
		bBuf[0] = (dwData & 0x00000000FF000000) >> 24;
 8009d6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d70:	f04f 0200 	mov.w	r2, #0
 8009d74:	f04f 0300 	mov.w	r3, #0
 8009d78:	0e02      	lsrs	r2, r0, #24
 8009d7a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009d7e:	0e0b      	lsrs	r3, r1, #24
 8009d80:	b2d3      	uxtb	r3, r2
 8009d82:	743b      	strb	r3, [r7, #16]
		bBuf[1] = (dwData & 0x0000000000FF0000) >> 16;
 8009d84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d88:	f04f 0200 	mov.w	r2, #0
 8009d8c:	f04f 0300 	mov.w	r3, #0
 8009d90:	0c02      	lsrs	r2, r0, #16
 8009d92:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009d96:	0c0b      	lsrs	r3, r1, #16
 8009d98:	b2d3      	uxtb	r3, r2
 8009d9a:	747b      	strb	r3, [r7, #17]
		bBuf[2] = (dwData & 0x000000000000FF00) >> 8;
 8009d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009da0:	f04f 0200 	mov.w	r2, #0
 8009da4:	f04f 0300 	mov.w	r3, #0
 8009da8:	0a02      	lsrs	r2, r0, #8
 8009daa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009dae:	0a0b      	lsrs	r3, r1, #8
 8009db0:	b2d3      	uxtb	r3, r2
 8009db2:	74bb      	strb	r3, [r7, #18]
		bBuf[3] =  dwData & 0x00000000000000FF;
 8009db4:	783b      	ldrb	r3, [r7, #0]
 8009db6:	74fb      	strb	r3, [r7, #19]
		bRes = AFE_WriteFrame(bID, wAddr, bBuf, 4, bWriteType);
 8009db8:	f107 0210 	add.w	r2, r7, #16
 8009dbc:	89b9      	ldrh	r1, [r7, #12]
 8009dbe:	7bf8      	ldrb	r0, [r7, #15]
 8009dc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	2304      	movs	r3, #4
 8009dc8:	f000 f934 	bl	800a034 <AFE_WriteFrame>
 8009dcc:	6178      	str	r0, [r7, #20]
		break;
 8009dce:	e12c      	b.n	800a02a <AFE_WriteReg+0x3a6>
	case 5:
		bBuf[0] = (dwData & 0x000000FF00000000) >> 32;
 8009dd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dd4:	f04f 0200 	mov.w	r2, #0
 8009dd8:	f04f 0300 	mov.w	r3, #0
 8009ddc:	000a      	movs	r2, r1
 8009dde:	2300      	movs	r3, #0
 8009de0:	b2d3      	uxtb	r3, r2
 8009de2:	743b      	strb	r3, [r7, #16]
		bBuf[1] = (dwData & 0x00000000FF000000) >> 24;
 8009de4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009de8:	f04f 0200 	mov.w	r2, #0
 8009dec:	f04f 0300 	mov.w	r3, #0
 8009df0:	0e02      	lsrs	r2, r0, #24
 8009df2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009df6:	0e0b      	lsrs	r3, r1, #24
 8009df8:	b2d3      	uxtb	r3, r2
 8009dfa:	747b      	strb	r3, [r7, #17]
		bBuf[2] = (dwData & 0x0000000000FF0000) >> 16;
 8009dfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e00:	f04f 0200 	mov.w	r2, #0
 8009e04:	f04f 0300 	mov.w	r3, #0
 8009e08:	0c02      	lsrs	r2, r0, #16
 8009e0a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009e0e:	0c0b      	lsrs	r3, r1, #16
 8009e10:	b2d3      	uxtb	r3, r2
 8009e12:	74bb      	strb	r3, [r7, #18]
		bBuf[3] = (dwData & 0x000000000000FF00) >> 8;
 8009e14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e18:	f04f 0200 	mov.w	r2, #0
 8009e1c:	f04f 0300 	mov.w	r3, #0
 8009e20:	0a02      	lsrs	r2, r0, #8
 8009e22:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009e26:	0a0b      	lsrs	r3, r1, #8
 8009e28:	b2d3      	uxtb	r3, r2
 8009e2a:	74fb      	strb	r3, [r7, #19]
		bBuf[4] =  dwData & 0x00000000000000FF;
 8009e2c:	783b      	ldrb	r3, [r7, #0]
 8009e2e:	753b      	strb	r3, [r7, #20]
		bRes = AFE_WriteFrame(bID, wAddr, bBuf, 5, bWriteType);
 8009e30:	f107 0210 	add.w	r2, r7, #16
 8009e34:	89b9      	ldrh	r1, [r7, #12]
 8009e36:	7bf8      	ldrb	r0, [r7, #15]
 8009e38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009e3c:	9300      	str	r3, [sp, #0]
 8009e3e:	2305      	movs	r3, #5
 8009e40:	f000 f8f8 	bl	800a034 <AFE_WriteFrame>
 8009e44:	6178      	str	r0, [r7, #20]
		break;
 8009e46:	e0f0      	b.n	800a02a <AFE_WriteReg+0x3a6>
	case 6:
		bBuf[0] = (dwData & 0x0000FF0000000000) >> 40;
 8009e48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e4c:	f04f 0200 	mov.w	r2, #0
 8009e50:	f04f 0300 	mov.w	r3, #0
 8009e54:	0a0a      	lsrs	r2, r1, #8
 8009e56:	2300      	movs	r3, #0
 8009e58:	b2d3      	uxtb	r3, r2
 8009e5a:	743b      	strb	r3, [r7, #16]
		bBuf[1] = (dwData & 0x000000FF00000000) >> 32;
 8009e5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e60:	f04f 0200 	mov.w	r2, #0
 8009e64:	f04f 0300 	mov.w	r3, #0
 8009e68:	000a      	movs	r2, r1
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	b2d3      	uxtb	r3, r2
 8009e6e:	747b      	strb	r3, [r7, #17]
		bBuf[2] = (dwData & 0x00000000FF000000) >> 24;
 8009e70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e74:	f04f 0200 	mov.w	r2, #0
 8009e78:	f04f 0300 	mov.w	r3, #0
 8009e7c:	0e02      	lsrs	r2, r0, #24
 8009e7e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009e82:	0e0b      	lsrs	r3, r1, #24
 8009e84:	b2d3      	uxtb	r3, r2
 8009e86:	74bb      	strb	r3, [r7, #18]
		bBuf[3] = (dwData & 0x0000000000FF0000) >> 16;
 8009e88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e8c:	f04f 0200 	mov.w	r2, #0
 8009e90:	f04f 0300 	mov.w	r3, #0
 8009e94:	0c02      	lsrs	r2, r0, #16
 8009e96:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009e9a:	0c0b      	lsrs	r3, r1, #16
 8009e9c:	b2d3      	uxtb	r3, r2
 8009e9e:	74fb      	strb	r3, [r7, #19]
		bBuf[4] = (dwData & 0x000000000000FF00) >> 8;
 8009ea0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ea4:	f04f 0200 	mov.w	r2, #0
 8009ea8:	f04f 0300 	mov.w	r3, #0
 8009eac:	0a02      	lsrs	r2, r0, #8
 8009eae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009eb2:	0a0b      	lsrs	r3, r1, #8
 8009eb4:	b2d3      	uxtb	r3, r2
 8009eb6:	753b      	strb	r3, [r7, #20]
		bBuf[5] =  dwData & 0x00000000000000FF;
 8009eb8:	783b      	ldrb	r3, [r7, #0]
 8009eba:	757b      	strb	r3, [r7, #21]
		bRes = AFE_WriteFrame(bID, wAddr, bBuf, 6, bWriteType);
 8009ebc:	f107 0210 	add.w	r2, r7, #16
 8009ec0:	89b9      	ldrh	r1, [r7, #12]
 8009ec2:	7bf8      	ldrb	r0, [r7, #15]
 8009ec4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009ec8:	9300      	str	r3, [sp, #0]
 8009eca:	2306      	movs	r3, #6
 8009ecc:	f000 f8b2 	bl	800a034 <AFE_WriteFrame>
 8009ed0:	6178      	str	r0, [r7, #20]
		break;
 8009ed2:	e0aa      	b.n	800a02a <AFE_WriteReg+0x3a6>
	case 7:
		bBuf[0] = (dwData & 0x00FF000000000000) >> 48;
 8009ed4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ed8:	f04f 0200 	mov.w	r2, #0
 8009edc:	f04f 0300 	mov.w	r3, #0
 8009ee0:	0c0a      	lsrs	r2, r1, #16
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	b2d3      	uxtb	r3, r2
 8009ee6:	743b      	strb	r3, [r7, #16]
		bBuf[1] = (dwData & 0x0000FF0000000000) >> 40;
 8009ee8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009eec:	f04f 0200 	mov.w	r2, #0
 8009ef0:	f04f 0300 	mov.w	r3, #0
 8009ef4:	0a0a      	lsrs	r2, r1, #8
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	b2d3      	uxtb	r3, r2
 8009efa:	747b      	strb	r3, [r7, #17]
		bBuf[2] = (dwData & 0x000000FF00000000) >> 32;
 8009efc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f00:	f04f 0200 	mov.w	r2, #0
 8009f04:	f04f 0300 	mov.w	r3, #0
 8009f08:	000a      	movs	r2, r1
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	b2d3      	uxtb	r3, r2
 8009f0e:	74bb      	strb	r3, [r7, #18]
		bBuf[3] = (dwData & 0x00000000FF000000) >> 24;
 8009f10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f14:	f04f 0200 	mov.w	r2, #0
 8009f18:	f04f 0300 	mov.w	r3, #0
 8009f1c:	0e02      	lsrs	r2, r0, #24
 8009f1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009f22:	0e0b      	lsrs	r3, r1, #24
 8009f24:	b2d3      	uxtb	r3, r2
 8009f26:	74fb      	strb	r3, [r7, #19]
		bBuf[4] = (dwData & 0x0000000000FF0000) >> 16;
 8009f28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f2c:	f04f 0200 	mov.w	r2, #0
 8009f30:	f04f 0300 	mov.w	r3, #0
 8009f34:	0c02      	lsrs	r2, r0, #16
 8009f36:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009f3a:	0c0b      	lsrs	r3, r1, #16
 8009f3c:	b2d3      	uxtb	r3, r2
 8009f3e:	753b      	strb	r3, [r7, #20]
		bBuf[5] = (dwData & 0x000000000000FF00) >> 8;
 8009f40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f44:	f04f 0200 	mov.w	r2, #0
 8009f48:	f04f 0300 	mov.w	r3, #0
 8009f4c:	0a02      	lsrs	r2, r0, #8
 8009f4e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009f52:	0a0b      	lsrs	r3, r1, #8
 8009f54:	b2d3      	uxtb	r3, r2
 8009f56:	757b      	strb	r3, [r7, #21]
		bBuf[6] =  dwData & 0x00000000000000FF;;
 8009f58:	783b      	ldrb	r3, [r7, #0]
 8009f5a:	75bb      	strb	r3, [r7, #22]
		bRes = AFE_WriteFrame(bID, wAddr, bBuf, 7, bWriteType);
 8009f5c:	f107 0210 	add.w	r2, r7, #16
 8009f60:	89b9      	ldrh	r1, [r7, #12]
 8009f62:	7bf8      	ldrb	r0, [r7, #15]
 8009f64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	2307      	movs	r3, #7
 8009f6c:	f000 f862 	bl	800a034 <AFE_WriteFrame>
 8009f70:	6178      	str	r0, [r7, #20]
		break;
 8009f72:	e05a      	b.n	800a02a <AFE_WriteReg+0x3a6>
	case 8:
		bBuf[0] = (dwData & 0xFF00000000000000) >> 56;
 8009f74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f78:	f04f 0200 	mov.w	r2, #0
 8009f7c:	f04f 0300 	mov.w	r3, #0
 8009f80:	0e0a      	lsrs	r2, r1, #24
 8009f82:	2300      	movs	r3, #0
 8009f84:	b2d3      	uxtb	r3, r2
 8009f86:	743b      	strb	r3, [r7, #16]
		bBuf[1] = (dwData & 0x00FF000000000000) >> 48;
 8009f88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f8c:	f04f 0200 	mov.w	r2, #0
 8009f90:	f04f 0300 	mov.w	r3, #0
 8009f94:	0c0a      	lsrs	r2, r1, #16
 8009f96:	2300      	movs	r3, #0
 8009f98:	b2d3      	uxtb	r3, r2
 8009f9a:	747b      	strb	r3, [r7, #17]
		bBuf[2] = (dwData & 0x0000FF0000000000) >> 40;
 8009f9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fa0:	f04f 0200 	mov.w	r2, #0
 8009fa4:	f04f 0300 	mov.w	r3, #0
 8009fa8:	0a0a      	lsrs	r2, r1, #8
 8009faa:	2300      	movs	r3, #0
 8009fac:	b2d3      	uxtb	r3, r2
 8009fae:	74bb      	strb	r3, [r7, #18]
		bBuf[3] = (dwData & 0x000000FF00000000) >> 32;
 8009fb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fb4:	f04f 0200 	mov.w	r2, #0
 8009fb8:	f04f 0300 	mov.w	r3, #0
 8009fbc:	000a      	movs	r2, r1
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	b2d3      	uxtb	r3, r2
 8009fc2:	74fb      	strb	r3, [r7, #19]
		bBuf[4] = (dwData & 0x00000000FF000000) >> 24;
 8009fc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fc8:	f04f 0200 	mov.w	r2, #0
 8009fcc:	f04f 0300 	mov.w	r3, #0
 8009fd0:	0e02      	lsrs	r2, r0, #24
 8009fd2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009fd6:	0e0b      	lsrs	r3, r1, #24
 8009fd8:	b2d3      	uxtb	r3, r2
 8009fda:	753b      	strb	r3, [r7, #20]
		bBuf[5] = (dwData & 0x0000000000FF0000) >> 16;
 8009fdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fe0:	f04f 0200 	mov.w	r2, #0
 8009fe4:	f04f 0300 	mov.w	r3, #0
 8009fe8:	0c02      	lsrs	r2, r0, #16
 8009fea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009fee:	0c0b      	lsrs	r3, r1, #16
 8009ff0:	b2d3      	uxtb	r3, r2
 8009ff2:	757b      	strb	r3, [r7, #21]
		bBuf[6] = (dwData & 0x000000000000FF00) >> 8;
 8009ff4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009ff8:	f04f 0200 	mov.w	r2, #0
 8009ffc:	f04f 0300 	mov.w	r3, #0
 800a000:	0a02      	lsrs	r2, r0, #8
 800a002:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a006:	0a0b      	lsrs	r3, r1, #8
 800a008:	b2d3      	uxtb	r3, r2
 800a00a:	75bb      	strb	r3, [r7, #22]
		bBuf[7] =  dwData & 0x00000000000000FF;
 800a00c:	783b      	ldrb	r3, [r7, #0]
 800a00e:	75fb      	strb	r3, [r7, #23]
		bRes = AFE_WriteFrame(bID, wAddr, bBuf, 8, bWriteType);
 800a010:	f107 0210 	add.w	r2, r7, #16
 800a014:	89b9      	ldrh	r1, [r7, #12]
 800a016:	7bf8      	ldrb	r0, [r7, #15]
 800a018:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	2308      	movs	r3, #8
 800a020:	f000 f808 	bl	800a034 <AFE_WriteFrame>
 800a024:	6178      	str	r0, [r7, #20]
		break;
 800a026:	e000      	b.n	800a02a <AFE_WriteReg+0x3a6>
	default:
		break;
 800a028:	bf00      	nop
	}
	return bRes;
 800a02a:	697b      	ldr	r3, [r7, #20]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3718      	adds	r7, #24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <AFE_WriteFrame>:
 * @arguments
 * @retvar
 */

int  AFE_WriteFrame(uint8_t bID, uint16_t wAddr, uint8_t * pData, uint8_t bLen, uint8_t bWriteType)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b08e      	sub	sp, #56	; 0x38
 800a038:	af00      	add	r7, sp, #0
 800a03a:	603a      	str	r2, [r7, #0]
 800a03c:	461a      	mov	r2, r3
 800a03e:	4603      	mov	r3, r0
 800a040:	71fb      	strb	r3, [r7, #7]
 800a042:	460b      	mov	r3, r1
 800a044:	80bb      	strh	r3, [r7, #4]
 800a046:	4613      	mov	r3, r2
 800a048:	71bb      	strb	r3, [r7, #6]
	int	   bPktLen = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t   pFrame[32];
	uint8_t * pBuf = pFrame;
 800a04e:	f107 030c 	add.w	r3, r7, #12
 800a052:	637b      	str	r3, [r7, #52]	; 0x34
	uint16_t   wCRC;

	if (bLen == 7 || bLen > 8)
 800a054:	79bb      	ldrb	r3, [r7, #6]
 800a056:	2b07      	cmp	r3, #7
 800a058:	d002      	beq.n	800a060 <AFE_WriteFrame+0x2c>
 800a05a:	79bb      	ldrb	r3, [r7, #6]
 800a05c:	2b08      	cmp	r3, #8
 800a05e:	d901      	bls.n	800a064 <AFE_WriteFrame+0x30>
		return 0;
 800a060:	2300      	movs	r3, #0
 800a062:	e097      	b.n	800a194 <AFE_WriteFrame+0x160>

	memset(pFrame, 0x7F, sizeof(pFrame));
 800a064:	f107 030c 	add.w	r3, r7, #12
 800a068:	2220      	movs	r2, #32
 800a06a:	217f      	movs	r1, #127	; 0x7f
 800a06c:	4618      	mov	r0, r3
 800a06e:	f001 f8ad 	bl	800b1cc <memset>
	if (wAddr > 255)	{
 800a072:	88bb      	ldrh	r3, [r7, #4]
 800a074:	2bff      	cmp	r3, #255	; 0xff
 800a076:	d92f      	bls.n	800a0d8 <AFE_WriteFrame+0xa4>
		*pBuf++ = 0x88 | bWriteType | bLen;	// use 16-bit address
 800a078:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800a07c:	79bb      	ldrb	r3, [r7, #6]
 800a07e:	4313      	orrs	r3, r2
 800a080:	b2da      	uxtb	r2, r3
 800a082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a084:	1c59      	adds	r1, r3, #1
 800a086:	6379      	str	r1, [r7, #52]	; 0x34
 800a088:	f062 0277 	orn	r2, r2, #119	; 0x77
 800a08c:	b2d2      	uxtb	r2, r2
 800a08e:	701a      	strb	r2, [r3, #0]
		if (bWriteType == FRMWRT_SGL_R || bWriteType == FRMWRT_SGL_NR || bWriteType == FRMWRT_GRP_R || bWriteType == FRMWRT_GRP_NR)//(bWriteType != FRMWRT_ALL_NR)// || (bWriteType != FRMWRT_ALL_R))
 800a090:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00b      	beq.n	800a0b0 <AFE_WriteFrame+0x7c>
 800a098:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a09c:	2b10      	cmp	r3, #16
 800a09e:	d007      	beq.n	800a0b0 <AFE_WriteFrame+0x7c>
 800a0a0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a0a4:	2b20      	cmp	r3, #32
 800a0a6:	d003      	beq.n	800a0b0 <AFE_WriteFrame+0x7c>
 800a0a8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a0ac:	2b30      	cmp	r3, #48	; 0x30
 800a0ae:	d104      	bne.n	800a0ba <AFE_WriteFrame+0x86>
		{
			*pBuf++ = (bID & 0x00FF);
 800a0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0b2:	1c5a      	adds	r2, r3, #1
 800a0b4:	637a      	str	r2, [r7, #52]	; 0x34
 800a0b6:	79fa      	ldrb	r2, [r7, #7]
 800a0b8:	701a      	strb	r2, [r3, #0]
		}
		*pBuf++ = (wAddr & 0xFF00) >> 8;
 800a0ba:	88bb      	ldrh	r3, [r7, #4]
 800a0bc:	0a1b      	lsrs	r3, r3, #8
 800a0be:	b299      	uxth	r1, r3
 800a0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c2:	1c5a      	adds	r2, r3, #1
 800a0c4:	637a      	str	r2, [r7, #52]	; 0x34
 800a0c6:	b2ca      	uxtb	r2, r1
 800a0c8:	701a      	strb	r2, [r3, #0]
		*pBuf++ =  wAddr & 0x00FF;
 800a0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0cc:	1c5a      	adds	r2, r3, #1
 800a0ce:	637a      	str	r2, [r7, #52]	; 0x34
 800a0d0:	88ba      	ldrh	r2, [r7, #4]
 800a0d2:	b2d2      	uxtb	r2, r2
 800a0d4:	701a      	strb	r2, [r3, #0]
 800a0d6:	e02f      	b.n	800a138 <AFE_WriteFrame+0x104>
	}
	else {
		*pBuf++ = 0x80 | bWriteType | bLen;	// use 8-bit address
 800a0d8:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800a0dc:	79bb      	ldrb	r3, [r7, #6]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0e4:	1c59      	adds	r1, r3, #1
 800a0e6:	6379      	str	r1, [r7, #52]	; 0x34
 800a0e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a0ec:	b2d2      	uxtb	r2, r2
 800a0ee:	701a      	strb	r2, [r3, #0]
		if (bWriteType == FRMWRT_SGL_R || bWriteType == FRMWRT_SGL_NR || bWriteType == FRMWRT_GRP_R || bWriteType == FRMWRT_GRP_NR)
 800a0f0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00b      	beq.n	800a110 <AFE_WriteFrame+0xdc>
 800a0f8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a0fc:	2b10      	cmp	r3, #16
 800a0fe:	d007      	beq.n	800a110 <AFE_WriteFrame+0xdc>
 800a100:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a104:	2b20      	cmp	r3, #32
 800a106:	d003      	beq.n	800a110 <AFE_WriteFrame+0xdc>
 800a108:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a10c:	2b30      	cmp	r3, #48	; 0x30
 800a10e:	d104      	bne.n	800a11a <AFE_WriteFrame+0xe6>
		{
			*pBuf++ = (bID & 0x00FF);
 800a110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a112:	1c5a      	adds	r2, r3, #1
 800a114:	637a      	str	r2, [r7, #52]	; 0x34
 800a116:	79fa      	ldrb	r2, [r7, #7]
 800a118:	701a      	strb	r2, [r3, #0]
		}
		*pBuf++ = wAddr & 0x00FF;
 800a11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a11c:	1c5a      	adds	r2, r3, #1
 800a11e:	637a      	str	r2, [r7, #52]	; 0x34
 800a120:	88ba      	ldrh	r2, [r7, #4]
 800a122:	b2d2      	uxtb	r2, r2
 800a124:	701a      	strb	r2, [r3, #0]
	}

	while(bLen--)
 800a126:	e007      	b.n	800a138 <AFE_WriteFrame+0x104>
		*pBuf++ = *pData++;
 800a128:	683a      	ldr	r2, [r7, #0]
 800a12a:	1c53      	adds	r3, r2, #1
 800a12c:	603b      	str	r3, [r7, #0]
 800a12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a130:	1c59      	adds	r1, r3, #1
 800a132:	6379      	str	r1, [r7, #52]	; 0x34
 800a134:	7812      	ldrb	r2, [r2, #0]
 800a136:	701a      	strb	r2, [r3, #0]
	while(bLen--)
 800a138:	79bb      	ldrb	r3, [r7, #6]
 800a13a:	1e5a      	subs	r2, r3, #1
 800a13c:	71ba      	strb	r2, [r7, #6]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1f2      	bne.n	800a128 <AFE_WriteFrame+0xf4>

	bPktLen = pBuf - pFrame;
 800a142:	f107 030c 	add.w	r3, r7, #12
 800a146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	633b      	str	r3, [r7, #48]	; 0x30

	wCRC = CRC16_Calc(pFrame, bPktLen);
 800a14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	f107 030c 	add.w	r3, r7, #12
 800a154:	4611      	mov	r1, r2
 800a156:	4618      	mov	r0, r3
 800a158:	f000 fdba 	bl	800acd0 <CRC16_Calc>
 800a15c:	4603      	mov	r3, r0
 800a15e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	*pBuf++ = wCRC & 0x00FF;
 800a160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a162:	1c5a      	adds	r2, r3, #1
 800a164:	637a      	str	r2, [r7, #52]	; 0x34
 800a166:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a168:	b2d2      	uxtb	r2, r2
 800a16a:	701a      	strb	r2, [r3, #0]
	*pBuf++ = (wCRC & 0xFF00) >> 8;
 800a16c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a16e:	0a1b      	lsrs	r3, r3, #8
 800a170:	b299      	uxth	r1, r3
 800a172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a174:	1c5a      	adds	r2, r3, #1
 800a176:	637a      	str	r2, [r7, #52]	; 0x34
 800a178:	b2ca      	uxtb	r2, r1
 800a17a:	701a      	strb	r2, [r3, #0]
	bPktLen += 2;
 800a17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17e:	3302      	adds	r3, #2
 800a180:	633b      	str	r3, [r7, #48]	; 0x30

	UART_AFE_Write(pFrame, bPktLen, 100);
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	b2d9      	uxtb	r1, r3
 800a186:	f107 030c 	add.w	r3, r7, #12
 800a18a:	2264      	movs	r2, #100	; 0x64
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7ff fb03 	bl	8009798 <UART_AFE_Write>

	return bPktLen;
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800a194:	4618      	mov	r0, r3
 800a196:	3738      	adds	r7, #56	; 0x38
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <AFE_WaitRespFrame>:
 * @arguments
 * @retvar
 */

int  AFE_WaitRespFrame(uint8_t *pFrame, uint8_t bLen, uint32_t dwTimeOut)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b0a8      	sub	sp, #160	; 0xa0
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	72fb      	strb	r3, [r7, #11]
	uint16_t wCRC = 0, wCRC16;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	uint8_t bBuf[132];
	uint8_t bRxDataLen;

	memset(bBuf, 0, sizeof(bBuf));
 800a1b0:	f107 0314 	add.w	r3, r7, #20
 800a1b4:	2284      	movs	r2, #132	; 0x84
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f001 f807 	bl	800b1cc <memset>

	UART_AFE_Read(bBuf, bLen, 100);
 800a1be:	7af9      	ldrb	r1, [r7, #11]
 800a1c0:	f107 0314 	add.w	r3, r7, #20
 800a1c4:	2264      	movs	r2, #100	; 0x64
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7ff fafe 	bl	80097c8 <UART_AFE_Read>

	bRxDataLen = bBuf[0];
 800a1cc:	7d3b      	ldrb	r3, [r7, #20]
 800a1ce:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

	HAL_Delay(dwTimeOut);
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7f7 fa44 	bl	8001660 <HAL_Delay>

	wCRC = bBuf[bRxDataLen+2];
 800a1d8:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800a1dc:	3302      	adds	r3, #2
 800a1de:	33a0      	adds	r3, #160	; 0xa0
 800a1e0:	443b      	add	r3, r7
 800a1e2:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 800a1e6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	wCRC |= ((uint16_t)bBuf[bRxDataLen+3] << 8);
 800a1ea:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800a1ee:	3303      	adds	r3, #3
 800a1f0:	33a0      	adds	r3, #160	; 0xa0
 800a1f2:	443b      	add	r3, r7
 800a1f4:	f813 3c8c 	ldrb.w	r3, [r3, #-140]
 800a1f8:	021b      	lsls	r3, r3, #8
 800a1fa:	b21a      	sxth	r2, r3
 800a1fc:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 800a200:	4313      	orrs	r3, r2
 800a202:	b21b      	sxth	r3, r3
 800a204:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	wCRC16 = CRC16_Calc(bBuf, bRxDataLen+2);
 800a208:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800a20c:	3302      	adds	r3, #2
 800a20e:	b2da      	uxtb	r2, r3
 800a210:	f107 0314 	add.w	r3, r7, #20
 800a214:	4611      	mov	r1, r2
 800a216:	4618      	mov	r0, r3
 800a218:	f000 fd5a 	bl	800acd0 <CRC16_Calc>
 800a21c:	4603      	mov	r3, r0
 800a21e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	if (wCRC != wCRC16)
 800a222:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800a226:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d002      	beq.n	800a234 <AFE_WaitRespFrame+0x98>
		return -1;
 800a22e:	f04f 33ff 	mov.w	r3, #4294967295
 800a232:	e00c      	b.n	800a24e <AFE_WaitRespFrame+0xb2>

	memcpy(pFrame, bBuf, bRxDataLen + 4);
 800a234:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800a238:	3304      	adds	r3, #4
 800a23a:	461a      	mov	r2, r3
 800a23c:	f107 0314 	add.w	r3, r7, #20
 800a240:	4619      	mov	r1, r3
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f000 ffb4 	bl	800b1b0 <memcpy>

	return bRxDataLen + 1;
 800a248:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800a24c:	3301      	adds	r3, #1
}
 800a24e:	4618      	mov	r0, r3
 800a250:	37a0      	adds	r7, #160	; 0xa0
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
	...

0800a258 <store_char>:
	/* Enable the UART Data Register not empty Interrupt */
	__HAL_UART_ENABLE_IT(&uart_cfg[0], UART_IT_RXNE);
}

void store_char(unsigned char c, ring_buffer *buffer)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	4603      	mov	r3, r0
 800a260:	6039      	str	r1, [r7, #0]
 800a262:	71fb      	strb	r3, [r7, #7]
	int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	7d1b      	ldrb	r3, [r3, #20]
 800a268:	3301      	adds	r3, #1
 800a26a:	4619      	mov	r1, r3
 800a26c:	4b0f      	ldr	r3, [pc, #60]	; (800a2ac <store_char+0x54>)
 800a26e:	fba3 2301 	umull	r2, r3, r3, r1
 800a272:	091a      	lsrs	r2, r3, #4
 800a274:	4613      	mov	r3, r2
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	4413      	add	r3, r2
 800a27a:	009b      	lsls	r3, r3, #2
 800a27c:	1aca      	subs	r2, r1, r3
 800a27e:	60fa      	str	r2, [r7, #12]

	if(i != buffer->tail) {
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	7d5b      	ldrb	r3, [r3, #21]
 800a284:	461a      	mov	r2, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	4293      	cmp	r3, r2
 800a28a:	d009      	beq.n	800a2a0 <store_char+0x48>
		buffer->buffer[buffer->head] = c;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	7d1b      	ldrb	r3, [r3, #20]
 800a290:	4619      	mov	r1, r3
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	79fa      	ldrb	r2, [r7, #7]
 800a296:	545a      	strb	r2, [r3, r1]
		buffer->head = i;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	751a      	strb	r2, [r3, #20]
	}
}
 800a2a0:	bf00      	nop
 800a2a2:	3714      	adds	r7, #20
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr
 800a2ac:	cccccccd 	.word	0xcccccccd

0800a2b0 <Uart_isr>:
{
	return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
}

void Uart_isr (UART_HandleTypeDef *huart)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
//	uint32_t isrflags   = READ_REG(huart->Instance->ISR);
	uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	60fb      	str	r3, [r7, #12]

	/* if DR is not empty and the Rx Int is enabled */
	if (((huart->Instance->ISR & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	f003 0320 	and.w	r3, r3, #32
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d014      	beq.n	800a2f8 <Uart_isr+0x48>
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f003 0320 	and.w	r3, r3, #32
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00f      	beq.n	800a2f8 <Uart_isr+0x48>
		 * @note   TC flag can be also cleared by software sequence: a read operation to
		 *          USART_SR register followed by a write operation to USART_DR register.
		 * @note   TXE flag is cleared only by a write to the USART_DR register.

		 *********************/
		huart->Instance->ISR;                       /* Read status register */
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	69db      	ldr	r3, [r3, #28]
		unsigned char c = huart->Instance->RDR;     /* Read data register */
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	72fb      	strb	r3, [r7, #11]
		store_char (c, _rx_buffer);  // store data in buffer
 800a2e8:	4b22      	ldr	r3, [pc, #136]	; (800a374 <Uart_isr+0xc4>)
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	7afb      	ldrb	r3, [r7, #11]
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7ff ffb1 	bl	800a258 <store_char>
		return;
 800a2f6:	e03a      	b.n	800a36e <Uart_isr+0xbe>
	}

	/*If interrupt is caused due to Transmit Data Register Empty */
	if (((huart->Instance->ISR & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	69db      	ldr	r3, [r3, #28]
 800a2fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a302:	2b00      	cmp	r3, #0
 800a304:	d033      	beq.n	800a36e <Uart_isr+0xbe>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d02e      	beq.n	800a36e <Uart_isr+0xbe>
	{
		if(tx_buffer.head == tx_buffer.tail)
 800a310:	4b19      	ldr	r3, [pc, #100]	; (800a378 <Uart_isr+0xc8>)
 800a312:	7d1a      	ldrb	r2, [r3, #20]
 800a314:	4b18      	ldr	r3, [pc, #96]	; (800a378 <Uart_isr+0xc8>)
 800a316:	7d5b      	ldrb	r3, [r3, #21]
 800a318:	429a      	cmp	r2, r3
 800a31a:	d108      	bne.n	800a32e <Uart_isr+0x7e>
		{
			// Buffer empty, so disable interrupts
			__HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a32a:	601a      	str	r2, [r3, #0]

			huart->Instance->ISR;
			huart->Instance->RDR = c;

		}
		return;
 800a32c:	e01e      	b.n	800a36c <Uart_isr+0xbc>
			unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 800a32e:	4b12      	ldr	r3, [pc, #72]	; (800a378 <Uart_isr+0xc8>)
 800a330:	7d5b      	ldrb	r3, [r3, #21]
 800a332:	461a      	mov	r2, r3
 800a334:	4b10      	ldr	r3, [pc, #64]	; (800a378 <Uart_isr+0xc8>)
 800a336:	5c9b      	ldrb	r3, [r3, r2]
 800a338:	72bb      	strb	r3, [r7, #10]
			tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800a33a:	4b0f      	ldr	r3, [pc, #60]	; (800a378 <Uart_isr+0xc8>)
 800a33c:	7d5b      	ldrb	r3, [r3, #21]
 800a33e:	1c5a      	adds	r2, r3, #1
 800a340:	4b0e      	ldr	r3, [pc, #56]	; (800a37c <Uart_isr+0xcc>)
 800a342:	fb83 1302 	smull	r1, r3, r3, r2
 800a346:	10d9      	asrs	r1, r3, #3
 800a348:	17d3      	asrs	r3, r2, #31
 800a34a:	1ac9      	subs	r1, r1, r3
 800a34c:	460b      	mov	r3, r1
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	440b      	add	r3, r1
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	1ad1      	subs	r1, r2, r3
 800a356:	b2ca      	uxtb	r2, r1
 800a358:	4b07      	ldr	r3, [pc, #28]	; (800a378 <Uart_isr+0xc8>)
 800a35a:	755a      	strb	r2, [r3, #21]
			huart->Instance->ISR;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	69db      	ldr	r3, [r3, #28]
			huart->Instance->RDR = c;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	7aba      	ldrb	r2, [r7, #10]
 800a368:	b292      	uxth	r2, r2
 800a36a:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 800a36c:	bf00      	nop
	}
}
 800a36e:	3710      	adds	r7, #16
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	20001a10 	.word	0x20001a10
 800a378:	200019f8 	.word	0x200019f8
 800a37c:	66666667 	.word	0x66666667

0800a380 <CONT_Init>:
 * @arguments
 * @retvar
 */

void CONT_Init(void)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	af00      	add	r7, sp, #0
	DATABASE_READ((void*)(&cont_database_bms), DATABASE_BMS);
 800a384:	2110      	movs	r1, #16
 800a386:	4834      	ldr	r0, [pc, #208]	; (800a458 <CONT_Init+0xd8>)
 800a388:	f7ff faba 	bl	8009900 <DATABASE_READ>
	DATABASE_READ((void*)(&cont_database_eeprom), DATABASE_EEPROM);
 800a38c:	210d      	movs	r1, #13
 800a38e:	4833      	ldr	r0, [pc, #204]	; (800a45c <CONT_Init+0xdc>)
 800a390:	f7ff fab6 	bl	8009900 <DATABASE_READ>

	if(cont_database_bms.bms_state == BMS_IDLE)
 800a394:	4b30      	ldr	r3, [pc, #192]	; (800a458 <CONT_Init+0xd8>)
 800a396:	79db      	ldrb	r3, [r3, #7]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d15b      	bne.n	800a454 <CONT_Init+0xd4>
	{
		cont_init = 1;
 800a39c:	4b30      	ldr	r3, [pc, #192]	; (800a460 <CONT_Init+0xe0>)
 800a39e:	2201      	movs	r2, #1
 800a3a0:	701a      	strb	r2, [r3, #0]
		CONT_Open(GPIO_PIN_HS_CONTACTOR);
 800a3a2:	2028      	movs	r0, #40	; 0x28
 800a3a4:	f000 fc78 	bl	800ac98 <CONT_Open>
		HAL_Delay(500);
 800a3a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a3ac:	f7f7 f958 	bl	8001660 <HAL_Delay>
		cont_database_contactor.CONT_MAIN_MINUS = CONT_OPEN;
 800a3b0:	4b2c      	ldr	r3, [pc, #176]	; (800a464 <CONT_Init+0xe4>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	71da      	strb	r2, [r3, #7]

		CONT_Open(GPIO_PIN_LS_CONTACTOR);
 800a3b6:	2008      	movs	r0, #8
 800a3b8:	f000 fc6e 	bl	800ac98 <CONT_Open>
		HAL_Delay(500);
 800a3bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a3c0:	f7f7 f94e 	bl	8001660 <HAL_Delay>
		cont_database_contactor.CONT_MAIN_PLUS = CONT_OPEN;
 800a3c4:	4b27      	ldr	r3, [pc, #156]	; (800a464 <CONT_Init+0xe4>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	719a      	strb	r2, [r3, #6]

		CONT_Open(GPIO_PIN_PCHG_CONTACTOR);
 800a3ca:	2029      	movs	r0, #41	; 0x29
 800a3cc:	f000 fc64 	bl	800ac98 <CONT_Open>
		HAL_Delay(500);
 800a3d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a3d4:	f7f7 f944 	bl	8001660 <HAL_Delay>
		cont_database_contactor.CONT_PRECHARGE = CONT_OPEN;
 800a3d8:	4b22      	ldr	r3, [pc, #136]	; (800a464 <CONT_Init+0xe4>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	721a      	strb	r2, [r3, #8]

		CONT_Open(GPIO_PIN_DCDC_CONTACTOR);
 800a3de:	200b      	movs	r0, #11
 800a3e0:	f000 fc5a 	bl	800ac98 <CONT_Open>
		HAL_Delay(500);
 800a3e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a3e8:	f7f7 f93a 	bl	8001660 <HAL_Delay>
		cont_database_contactor.CONT_DCDC = CONT_OPEN;
 800a3ec:	4b1d      	ldr	r3, [pc, #116]	; (800a464 <CONT_Init+0xe4>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	725a      	strb	r2, [r3, #9]

		CONT_Open(GPIO_PIN_THERM_CONTACTOR);
 800a3f2:	200c      	movs	r0, #12
 800a3f4:	f000 fc50 	bl	800ac98 <CONT_Open>
		HAL_Delay(500);
 800a3f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a3fc:	f7f7 f930 	bl	8001660 <HAL_Delay>
		cont_database_contactor.CONT_THERM = CONT_OPEN;
 800a400:	4b18      	ldr	r3, [pc, #96]	; (800a464 <CONT_Init+0xe4>)
 800a402:	2200      	movs	r2, #0
 800a404:	729a      	strb	r2, [r3, #10]

		CONT_Open(GPIO_PIN_EXT_CONTACTOR);
 800a406:	200f      	movs	r0, #15
 800a408:	f000 fc46 	bl	800ac98 <CONT_Open>
		HAL_Delay(500);
 800a40c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a410:	f7f7 f926 	bl	8001660 <HAL_Delay>
		cont_database_contactor.CONT_EXT = CONT_OPEN;
 800a414:	4b13      	ldr	r3, [pc, #76]	; (800a464 <CONT_Init+0xe4>)
 800a416:	2200      	movs	r2, #0
 800a418:	72da      	strb	r2, [r3, #11]

		DATABASE_WRITE((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800a41a:	210e      	movs	r1, #14
 800a41c:	4811      	ldr	r0, [pc, #68]	; (800a464 <CONT_Init+0xe4>)
 800a41e:	f7ff fa41 	bl	80098a4 <DATABASE_WRITE>

		cont_database_bms.cont_state = CONT_STANDBY;
 800a422:	4b0d      	ldr	r3, [pc, #52]	; (800a458 <CONT_Init+0xd8>)
 800a424:	2200      	movs	r2, #0
 800a426:	721a      	strb	r2, [r3, #8]
		DATABASE_WRITE((void*)(&cont_database_bms), DATABASE_BMS);
 800a428:	2110      	movs	r1, #16
 800a42a:	480b      	ldr	r0, [pc, #44]	; (800a458 <CONT_Init+0xd8>)
 800a42c:	f7ff fa3a 	bl	80098a4 <DATABASE_WRITE>
        check = 0;
 800a430:	4b0d      	ldr	r3, [pc, #52]	; (800a468 <CONT_Init+0xe8>)
 800a432:	2200      	movs	r2, #0
 800a434:	701a      	strb	r2, [r3, #0]

		cont_database_eeprom.charge_mos = CONT_OPEN;
 800a436:	4b09      	ldr	r3, [pc, #36]	; (800a45c <CONT_Init+0xdc>)
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
		cont_database_eeprom.discharge_mos = CONT_OPEN;
 800a43e:	4b07      	ldr	r3, [pc, #28]	; (800a45c <CONT_Init+0xdc>)
 800a440:	2200      	movs	r2, #0
 800a442:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
		DATABASE_WRITE((void*)(&cont_database_eeprom), DATABASE_EEPROM);
 800a446:	210d      	movs	r1, #13
 800a448:	4804      	ldr	r0, [pc, #16]	; (800a45c <CONT_Init+0xdc>)
 800a44a:	f7ff fa2b 	bl	80098a4 <DATABASE_WRITE>
		cont_int = 1;
 800a44e:	4b07      	ldr	r3, [pc, #28]	; (800a46c <CONT_Init+0xec>)
 800a450:	2201      	movs	r2, #1
 800a452:	701a      	strb	r2, [r3, #0]
	}
}
 800a454:	bf00      	nop
 800a456:	bd80      	pop	{r7, pc}
 800a458:	20001a14 	.word	0x20001a14
 800a45c:	20001a30 	.word	0x20001a30
 800a460:	20001bcc 	.word	0x20001bcc
 800a464:	20001a24 	.word	0x20001a24
 800a468:	200019f4 	.word	0x200019f4
 800a46c:	20001bca 	.word	0x20001bca

0800a470 <CONT_StateRequest>:

void CONT_StateRequest(CONTACTOR_STATE_e state)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	4603      	mov	r3, r0
 800a478:	71fb      	strb	r3, [r7, #7]
	DATABASE_READ((void*)(&cont_database_bms), DATABASE_BMS);
 800a47a:	2110      	movs	r1, #16
 800a47c:	4894      	ldr	r0, [pc, #592]	; (800a6d0 <CONT_StateRequest+0x260>)
 800a47e:	f7ff fa3f 	bl	8009900 <DATABASE_READ>
	DATABASE_READ((void*)(&cont_database_eeprom), DATABASE_EEPROM);
 800a482:	210d      	movs	r1, #13
 800a484:	4893      	ldr	r0, [pc, #588]	; (800a6d4 <CONT_StateRequest+0x264>)
 800a486:	f7ff fa3b 	bl	8009900 <DATABASE_READ>
	DATABASE_READ((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800a48a:	210e      	movs	r1, #14
 800a48c:	4892      	ldr	r0, [pc, #584]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a48e:	f7ff fa37 	bl	8009900 <DATABASE_READ>
	if(state == CONT_NORMAL)
 800a492:	79fb      	ldrb	r3, [r7, #7]
 800a494:	2b01      	cmp	r3, #1
 800a496:	d145      	bne.n	800a524 <CONT_StateRequest+0xb4>
	{
		if(cont_database_bms.bms_state != BMS_ERROR )//&& cont_startreq == 1)
 800a498:	4b8d      	ldr	r3, [pc, #564]	; (800a6d0 <CONT_StateRequest+0x260>)
 800a49a:	79db      	ldrb	r3, [r3, #7]
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	f000 80ef 	beq.w	800a680 <CONT_StateRequest+0x210>
		{
			CONT_Close(GPIO_PIN_LS_CONTACTOR);
 800a4a2:	2008      	movs	r0, #8
 800a4a4:	f000 fc06 	bl	800acb4 <CONT_Close>
			TIMER_Delay_ms(100);
 800a4a8:	2064      	movs	r0, #100	; 0x64
 800a4aa:	f7ff f8ff 	bl	80096ac <TIMER_Delay_ms>
			cont_database_contactor.CONT_MAIN_MINUS= CONT_CLOSE;
 800a4ae:	4b8a      	ldr	r3, [pc, #552]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	71da      	strb	r2, [r3, #7]

			CONT_Close(GPIO_PIN_PCHG_CONTACTOR);
 800a4b4:	2029      	movs	r0, #41	; 0x29
 800a4b6:	f000 fbfd 	bl	800acb4 <CONT_Close>
			TIMER_Delay_ms(3000);
 800a4ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a4be:	f7ff f8f5 	bl	80096ac <TIMER_Delay_ms>
			cont_database_contactor.CONT_PRECHARGE = CONT_CLOSE;
 800a4c2:	4b85      	ldr	r3, [pc, #532]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	721a      	strb	r2, [r3, #8]

//			ISO_VOLTAGE_Read();

			CONT_Close(GPIO_PIN_HS_CONTACTOR);
 800a4c8:	2028      	movs	r0, #40	; 0x28
 800a4ca:	f000 fbf3 	bl	800acb4 <CONT_Close>
			TIMER_Delay_ms(1000);
 800a4ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a4d2:	f7ff f8eb 	bl	80096ac <TIMER_Delay_ms>
			cont_database_contactor.CONT_MAIN_PLUS = CONT_CLOSE;
 800a4d6:	4b80      	ldr	r3, [pc, #512]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a4d8:	2201      	movs	r2, #1
 800a4da:	719a      	strb	r2, [r3, #6]

			CONT_Open(GPIO_PIN_PCHG_CONTACTOR);
 800a4dc:	2029      	movs	r0, #41	; 0x29
 800a4de:	f000 fbdb 	bl	800ac98 <CONT_Open>
//			HAL_Delay(500);
			cont_database_contactor.CONT_PRECHARGE = CONT_OPEN;
 800a4e2:	4b7d      	ldr	r3, [pc, #500]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	721a      	strb	r2, [r3, #8]
			error_req = 0;
 800a4e8:	4b7c      	ldr	r3, [pc, #496]	; (800a6dc <CONT_StateRequest+0x26c>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	701a      	strb	r2, [r3, #0]

			DATABASE_WRITE((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800a4ee:	210e      	movs	r1, #14
 800a4f0:	4879      	ldr	r0, [pc, #484]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a4f2:	f7ff f9d7 	bl	80098a4 <DATABASE_WRITE>

			cont_database_bms.cont_state = CONT_NORMAL;
 800a4f6:	4b76      	ldr	r3, [pc, #472]	; (800a6d0 <CONT_StateRequest+0x260>)
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	721a      	strb	r2, [r3, #8]
			DATABASE_WRITE((void*)(&cont_database_bms), DATABASE_BMS);
 800a4fc:	2110      	movs	r1, #16
 800a4fe:	4874      	ldr	r0, [pc, #464]	; (800a6d0 <CONT_StateRequest+0x260>)
 800a500:	f7ff f9d0 	bl	80098a4 <DATABASE_WRITE>

			cont_database_eeprom.charge_mos = CONT_CLOSE;
 800a504:	4b73      	ldr	r3, [pc, #460]	; (800a6d4 <CONT_StateRequest+0x264>)
 800a506:	2201      	movs	r2, #1
 800a508:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
			cont_database_eeprom.discharge_mos = CONT_CLOSE;
 800a50c:	4b71      	ldr	r3, [pc, #452]	; (800a6d4 <CONT_StateRequest+0x264>)
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
			DATABASE_WRITE((void*)(&cont_database_eeprom), DATABASE_EEPROM);
 800a514:	210d      	movs	r1, #13
 800a516:	486f      	ldr	r0, [pc, #444]	; (800a6d4 <CONT_StateRequest+0x264>)
 800a518:	f7ff f9c4 	bl	80098a4 <DATABASE_WRITE>
			EMGcheck = 1;
 800a51c:	4b70      	ldr	r3, [pc, #448]	; (800a6e0 <CONT_StateRequest+0x270>)
 800a51e:	2201      	movs	r2, #1
 800a520:	701a      	strb	r2, [r3, #0]
 800a522:	e0ad      	b.n	800a680 <CONT_StateRequest+0x210>
		}

	}
	else if(state == CONT_ERROR)
 800a524:	79fb      	ldrb	r3, [r7, #7]
 800a526:	2b02      	cmp	r3, #2
 800a528:	f040 80aa 	bne.w	800a680 <CONT_StateRequest+0x210>
	{
		if(cont_database_bms.bms_state != BMS_DISCHARGE)
 800a52c:	4b68      	ldr	r3, [pc, #416]	; (800a6d0 <CONT_StateRequest+0x260>)
 800a52e:	79db      	ldrb	r3, [r3, #7]
 800a530:	2b03      	cmp	r3, #3
 800a532:	d051      	beq.n	800a5d8 <CONT_StateRequest+0x168>
		{
			if(cont_database_contactor.CONT_PRECHARGE == CONT_CLOSE)
 800a534:	4b68      	ldr	r3, [pc, #416]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a536:	7a1b      	ldrb	r3, [r3, #8]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d109      	bne.n	800a550 <CONT_StateRequest+0xe0>
			{
				CONT_Open(GPIO_PIN_PCHG_CONTACTOR);
 800a53c:	2029      	movs	r0, #41	; 0x29
 800a53e:	f000 fbab 	bl	800ac98 <CONT_Open>
				HAL_Delay(500);
 800a542:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a546:	f7f7 f88b 	bl	8001660 <HAL_Delay>
				cont_database_contactor.CONT_PRECHARGE = CONT_OPEN;
 800a54a:	4b63      	ldr	r3, [pc, #396]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	721a      	strb	r2, [r3, #8]
			}

			CONT_Open(GPIO_PIN_HS_CONTACTOR);
 800a550:	2028      	movs	r0, #40	; 0x28
 800a552:	f000 fba1 	bl	800ac98 <CONT_Open>
			ERROR_Dealy();
 800a556:	f000 fb8b 	bl	800ac70 <ERROR_Dealy>
			cont_database_contactor.CONT_MAIN_PLUS = CONT_OPEN;
 800a55a:	4b5f      	ldr	r3, [pc, #380]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	719a      	strb	r2, [r3, #6]

			if(cont_database_contactor.CONT_DCDC == CONT_CLOSE)
 800a560:	4b5d      	ldr	r3, [pc, #372]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a562:	7a5b      	ldrb	r3, [r3, #9]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d108      	bne.n	800a57a <CONT_StateRequest+0x10a>
			{
				CONT_Open(GPIO_PIN_DCDC_CONTACTOR);
 800a568:	200b      	movs	r0, #11
 800a56a:	f000 fb95 	bl	800ac98 <CONT_Open>
				HAL_Delay(100);
 800a56e:	2064      	movs	r0, #100	; 0x64
 800a570:	f7f7 f876 	bl	8001660 <HAL_Delay>
				cont_database_contactor.CONT_DCDC = CONT_OPEN;
 800a574:	4b58      	ldr	r3, [pc, #352]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a576:	2200      	movs	r2, #0
 800a578:	725a      	strb	r2, [r3, #9]
			}

			if(cont_database_contactor.CONT_EXT == CONT_CLOSE)
 800a57a:	4b57      	ldr	r3, [pc, #348]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a57c:	7adb      	ldrb	r3, [r3, #11]
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d108      	bne.n	800a594 <CONT_StateRequest+0x124>
			{
				CONT_Open(GPIO_PIN_EXT_CONTACTOR);
 800a582:	200f      	movs	r0, #15
 800a584:	f000 fb88 	bl	800ac98 <CONT_Open>
				HAL_Delay(100);
 800a588:	2064      	movs	r0, #100	; 0x64
 800a58a:	f7f7 f869 	bl	8001660 <HAL_Delay>
				cont_database_contactor.CONT_EXT = CONT_OPEN;
 800a58e:	4b52      	ldr	r3, [pc, #328]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a590:	2200      	movs	r2, #0
 800a592:	72da      	strb	r2, [r3, #11]
			}

			CONT_Open(GPIO_PIN_LS_CONTACTOR);
 800a594:	2008      	movs	r0, #8
 800a596:	f000 fb7f 	bl	800ac98 <CONT_Open>
			ERROR_Dealy();
 800a59a:	f000 fb69 	bl	800ac70 <ERROR_Dealy>
			cont_database_contactor.CONT_MAIN_MINUS = CONT_OPEN;
 800a59e:	4b4e      	ldr	r3, [pc, #312]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	71da      	strb	r2, [r3, #7]

			cont_database_bms.cont_state = CONT_ERROR;
 800a5a4:	4b4a      	ldr	r3, [pc, #296]	; (800a6d0 <CONT_StateRequest+0x260>)
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	721a      	strb	r2, [r3, #8]
			Delay_req = 0;
 800a5aa:	4b4e      	ldr	r3, [pc, #312]	; (800a6e4 <CONT_StateRequest+0x274>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	701a      	strb	r2, [r3, #0]
//			cont_errorFlag = 1;

			DATABASE_WRITE((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800a5b0:	210e      	movs	r1, #14
 800a5b2:	4849      	ldr	r0, [pc, #292]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a5b4:	f7ff f976 	bl	80098a4 <DATABASE_WRITE>
			DATABASE_WRITE((void*)(&cont_database_bms), DATABASE_BMS);
 800a5b8:	2110      	movs	r1, #16
 800a5ba:	4845      	ldr	r0, [pc, #276]	; (800a6d0 <CONT_StateRequest+0x260>)
 800a5bc:	f7ff f972 	bl	80098a4 <DATABASE_WRITE>

			cont_database_eeprom.charge_mos = CONT_OPEN;
 800a5c0:	4b44      	ldr	r3, [pc, #272]	; (800a6d4 <CONT_StateRequest+0x264>)
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
			cont_database_eeprom.discharge_mos = CONT_OPEN;
 800a5c8:	4b42      	ldr	r3, [pc, #264]	; (800a6d4 <CONT_StateRequest+0x264>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
			DATABASE_WRITE((void*)(&cont_database_eeprom), DATABASE_EEPROM);
 800a5d0:	210d      	movs	r1, #13
 800a5d2:	4840      	ldr	r0, [pc, #256]	; (800a6d4 <CONT_StateRequest+0x264>)
 800a5d4:	f7ff f966 	bl	80098a4 <DATABASE_WRITE>
		}

		if(cont_database_bms.bms_state != BMS_CHARGE)
 800a5d8:	4b3d      	ldr	r3, [pc, #244]	; (800a6d0 <CONT_StateRequest+0x260>)
 800a5da:	79db      	ldrb	r3, [r3, #7]
 800a5dc:	2b02      	cmp	r3, #2
 800a5de:	d037      	beq.n	800a650 <CONT_StateRequest+0x1e0>
		{
			if(cont_database_contactor.CONT_PRECHARGE == CONT_CLOSE)
 800a5e0:	4b3d      	ldr	r3, [pc, #244]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a5e2:	7a1b      	ldrb	r3, [r3, #8]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d109      	bne.n	800a5fc <CONT_StateRequest+0x18c>
			{
				CONT_Open(GPIO_PIN_PCHG_CONTACTOR);
 800a5e8:	2029      	movs	r0, #41	; 0x29
 800a5ea:	f000 fb55 	bl	800ac98 <CONT_Open>
				HAL_Delay(500);
 800a5ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a5f2:	f7f7 f835 	bl	8001660 <HAL_Delay>
				cont_database_contactor.CONT_PRECHARGE = CONT_OPEN;
 800a5f6:	4b38      	ldr	r3, [pc, #224]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	721a      	strb	r2, [r3, #8]
			}

			CONT_Open(GPIO_PIN_HS_CONTACTOR);
 800a5fc:	2028      	movs	r0, #40	; 0x28
 800a5fe:	f000 fb4b 	bl	800ac98 <CONT_Open>
			ERROR_Dealy();
 800a602:	f000 fb35 	bl	800ac70 <ERROR_Dealy>
			cont_database_contactor.CONT_MAIN_PLUS = CONT_OPEN;
 800a606:	4b34      	ldr	r3, [pc, #208]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a608:	2200      	movs	r2, #0
 800a60a:	719a      	strb	r2, [r3, #6]

			CONT_Open(GPIO_PIN_LS_CONTACTOR);
 800a60c:	2008      	movs	r0, #8
 800a60e:	f000 fb43 	bl	800ac98 <CONT_Open>
			ERROR_Dealy();
 800a612:	f000 fb2d 	bl	800ac70 <ERROR_Dealy>
			cont_database_contactor.CONT_MAIN_MINUS = CONT_OPEN;
 800a616:	4b30      	ldr	r3, [pc, #192]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a618:	2200      	movs	r2, #0
 800a61a:	71da      	strb	r2, [r3, #7]

			cont_database_bms.cont_state = CONT_ERROR;
 800a61c:	4b2c      	ldr	r3, [pc, #176]	; (800a6d0 <CONT_StateRequest+0x260>)
 800a61e:	2202      	movs	r2, #2
 800a620:	721a      	strb	r2, [r3, #8]
			Delay_req = 0;
 800a622:	4b30      	ldr	r3, [pc, #192]	; (800a6e4 <CONT_StateRequest+0x274>)
 800a624:	2200      	movs	r2, #0
 800a626:	701a      	strb	r2, [r3, #0]
//			cont_errorFlag = 1;

			DATABASE_WRITE((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800a628:	210e      	movs	r1, #14
 800a62a:	482b      	ldr	r0, [pc, #172]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a62c:	f7ff f93a 	bl	80098a4 <DATABASE_WRITE>
			DATABASE_WRITE((void*)(&cont_database_bms), DATABASE_BMS);
 800a630:	2110      	movs	r1, #16
 800a632:	4827      	ldr	r0, [pc, #156]	; (800a6d0 <CONT_StateRequest+0x260>)
 800a634:	f7ff f936 	bl	80098a4 <DATABASE_WRITE>

			cont_database_eeprom.charge_mos = CONT_OPEN;
 800a638:	4b26      	ldr	r3, [pc, #152]	; (800a6d4 <CONT_StateRequest+0x264>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
			cont_database_eeprom.discharge_mos = CONT_OPEN;
 800a640:	4b24      	ldr	r3, [pc, #144]	; (800a6d4 <CONT_StateRequest+0x264>)
 800a642:	2200      	movs	r2, #0
 800a644:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
			DATABASE_WRITE((void*)(&cont_database_eeprom), DATABASE_EEPROM);
 800a648:	210d      	movs	r1, #13
 800a64a:	4822      	ldr	r0, [pc, #136]	; (800a6d4 <CONT_StateRequest+0x264>)
 800a64c:	f7ff f92a 	bl	80098a4 <DATABASE_WRITE>
		}
		Req_MainSeq = 0;    MainSeqCheck = 0;
 800a650:	4b25      	ldr	r3, [pc, #148]	; (800a6e8 <CONT_StateRequest+0x278>)
 800a652:	2200      	movs	r2, #0
 800a654:	701a      	strb	r2, [r3, #0]
 800a656:	4b25      	ldr	r3, [pc, #148]	; (800a6ec <CONT_StateRequest+0x27c>)
 800a658:	2200      	movs	r2, #0
 800a65a:	701a      	strb	r2, [r3, #0]
		Req_SlowChrSeq = 0; SlowChrCheck = 0;
 800a65c:	4b24      	ldr	r3, [pc, #144]	; (800a6f0 <CONT_StateRequest+0x280>)
 800a65e:	2200      	movs	r2, #0
 800a660:	701a      	strb	r2, [r3, #0]
 800a662:	4b24      	ldr	r3, [pc, #144]	; (800a6f4 <CONT_StateRequest+0x284>)
 800a664:	2200      	movs	r2, #0
 800a666:	701a      	strb	r2, [r3, #0]
		Req_FastChrSeq = 0; FastChrCheck = 0;
 800a668:	4b23      	ldr	r3, [pc, #140]	; (800a6f8 <CONT_StateRequest+0x288>)
 800a66a:	2200      	movs	r2, #0
 800a66c:	701a      	strb	r2, [r3, #0]
 800a66e:	4b23      	ldr	r3, [pc, #140]	; (800a6fc <CONT_StateRequest+0x28c>)
 800a670:	2200      	movs	r2, #0
 800a672:	701a      	strb	r2, [r3, #0]
		Req_HVACSeq = 0;    HVACSeqCheck = 0;
 800a674:	4b22      	ldr	r3, [pc, #136]	; (800a700 <CONT_StateRequest+0x290>)
 800a676:	2200      	movs	r2, #0
 800a678:	701a      	strb	r2, [r3, #0]
 800a67a:	4b22      	ldr	r3, [pc, #136]	; (800a704 <CONT_StateRequest+0x294>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	701a      	strb	r2, [r3, #0]
	}

	if(state == CONT_STANDBY)
 800a680:	79fb      	ldrb	r3, [r7, #7]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d120      	bne.n	800a6c8 <CONT_StateRequest+0x258>
	{
		    CONT_Open(GPIO_PIN_LS_CONTACTOR);
 800a686:	2008      	movs	r0, #8
 800a688:	f000 fb06 	bl	800ac98 <CONT_Open>
			HAL_Delay(1000);
 800a68c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a690:	f7f6 ffe6 	bl	8001660 <HAL_Delay>
			cont_database_contactor.CONT_MAIN_MINUS= CONT_OPEN;
 800a694:	4b10      	ldr	r3, [pc, #64]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a696:	2200      	movs	r2, #0
 800a698:	71da      	strb	r2, [r3, #7]

			CONT_Open(GPIO_PIN_PCHG_CONTACTOR);
 800a69a:	2029      	movs	r0, #41	; 0x29
 800a69c:	f000 fafc 	bl	800ac98 <CONT_Open>
			HAL_Delay(5000);
 800a6a0:	f241 3088 	movw	r0, #5000	; 0x1388
 800a6a4:	f7f6 ffdc 	bl	8001660 <HAL_Delay>
			cont_database_contactor.CONT_PRECHARGE = CONT_OPEN;
 800a6a8:	4b0b      	ldr	r3, [pc, #44]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	721a      	strb	r2, [r3, #8]


			CONT_Open(GPIO_PIN_LS_CONTACTOR);
 800a6ae:	2008      	movs	r0, #8
 800a6b0:	f000 faf2 	bl	800ac98 <CONT_Open>
			cont_database_contactor.CONT_MAIN_MINUS= CONT_OPEN;
 800a6b4:	4b08      	ldr	r3, [pc, #32]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	71da      	strb	r2, [r3, #7]
			Delay_req = 0;
 800a6ba:	4b0a      	ldr	r3, [pc, #40]	; (800a6e4 <CONT_StateRequest+0x274>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	701a      	strb	r2, [r3, #0]
			DATABASE_WRITE((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800a6c0:	210e      	movs	r1, #14
 800a6c2:	4805      	ldr	r0, [pc, #20]	; (800a6d8 <CONT_StateRequest+0x268>)
 800a6c4:	f7ff f8ee 	bl	80098a4 <DATABASE_WRITE>
	}
}
 800a6c8:	bf00      	nop
 800a6ca:	3708      	adds	r7, #8
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	20001a14 	.word	0x20001a14
 800a6d4:	20001a30 	.word	0x20001a30
 800a6d8:	20001a24 	.word	0x20001a24
 800a6dc:	20001bc9 	.word	0x20001bc9
 800a6e0:	20001bd1 	.word	0x20001bd1
 800a6e4:	20001bc8 	.word	0x20001bc8
 800a6e8:	20001950 	.word	0x20001950
 800a6ec:	20001bcd 	.word	0x20001bcd
 800a6f0:	20001951 	.word	0x20001951
 800a6f4:	20001bce 	.word	0x20001bce
 800a6f8:	20001952 	.word	0x20001952
 800a6fc:	20001bcf 	.word	0x20001bcf
 800a700:	20001953 	.word	0x20001953
 800a704:	20001bd0 	.word	0x20001bd0

0800a708 <Seq_Check>:
		cont_database_contactor.CONT_DCDC = CONT_OPEN;
	}
	DATABASE_WRITE((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
}
void Seq_Check(void)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	af00      	add	r7, sp, #0
	if(Req_MainSeq == 1 && MainSeqCheck == 0 && SlowChrCheck == 0 && FastChrCheck == 0)
 800a70c:	4b56      	ldr	r3, [pc, #344]	; (800a868 <Seq_Check+0x160>)
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d01a      	beq.n	800a74a <Seq_Check+0x42>
 800a714:	4b55      	ldr	r3, [pc, #340]	; (800a86c <Seq_Check+0x164>)
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	f083 0301 	eor.w	r3, r3, #1
 800a71c:	b2db      	uxtb	r3, r3
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d013      	beq.n	800a74a <Seq_Check+0x42>
 800a722:	4b53      	ldr	r3, [pc, #332]	; (800a870 <Seq_Check+0x168>)
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	f083 0301 	eor.w	r3, r3, #1
 800a72a:	b2db      	uxtb	r3, r3
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00c      	beq.n	800a74a <Seq_Check+0x42>
 800a730:	4b50      	ldr	r3, [pc, #320]	; (800a874 <Seq_Check+0x16c>)
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	f083 0301 	eor.w	r3, r3, #1
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d005      	beq.n	800a74a <Seq_Check+0x42>
	{
		CONT_MainSequence();
 800a73e:	f000 f8a3 	bl	800a888 <CONT_MainSequence>
		MainSeqCheck = 1;
 800a742:	4b4a      	ldr	r3, [pc, #296]	; (800a86c <Seq_Check+0x164>)
 800a744:	2201      	movs	r2, #1
 800a746:	701a      	strb	r2, [r3, #0]
 800a748:	e00f      	b.n	800a76a <Seq_Check+0x62>
	}
	else if(Req_MainSeq == 0 && MainSeqCheck == 1)
 800a74a:	4b47      	ldr	r3, [pc, #284]	; (800a868 <Seq_Check+0x160>)
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	f083 0301 	eor.w	r3, r3, #1
 800a752:	b2db      	uxtb	r3, r3
 800a754:	2b00      	cmp	r3, #0
 800a756:	d008      	beq.n	800a76a <Seq_Check+0x62>
 800a758:	4b44      	ldr	r3, [pc, #272]	; (800a86c <Seq_Check+0x164>)
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d004      	beq.n	800a76a <Seq_Check+0x62>
	{
		CONT_StopSequence();
 800a760:	f000 f8ea 	bl	800a938 <CONT_StopSequence>
		MainSeqCheck = 0;
 800a764:	4b41      	ldr	r3, [pc, #260]	; (800a86c <Seq_Check+0x164>)
 800a766:	2200      	movs	r2, #0
 800a768:	701a      	strb	r2, [r3, #0]
	}

	if(Req_SlowChrSeq == 1 && SlowChrCheck == 0 && Req_FastChrSeq == 0)
 800a76a:	4b43      	ldr	r3, [pc, #268]	; (800a878 <Seq_Check+0x170>)
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d016      	beq.n	800a7a0 <Seq_Check+0x98>
 800a772:	4b3f      	ldr	r3, [pc, #252]	; (800a870 <Seq_Check+0x168>)
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	f083 0301 	eor.w	r3, r3, #1
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00f      	beq.n	800a7a0 <Seq_Check+0x98>
 800a780:	4b3e      	ldr	r3, [pc, #248]	; (800a87c <Seq_Check+0x174>)
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	f083 0301 	eor.w	r3, r3, #1
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d008      	beq.n	800a7a0 <Seq_Check+0x98>
	{
		CONT_Slow_CHR_Seq();
 800a78e:	f000 f917 	bl	800a9c0 <CONT_Slow_CHR_Seq>
		Req_FastChrSeq = 0;
 800a792:	4b3a      	ldr	r3, [pc, #232]	; (800a87c <Seq_Check+0x174>)
 800a794:	2200      	movs	r2, #0
 800a796:	701a      	strb	r2, [r3, #0]
		SlowChrCheck = 1;
 800a798:	4b35      	ldr	r3, [pc, #212]	; (800a870 <Seq_Check+0x168>)
 800a79a:	2201      	movs	r2, #1
 800a79c:	701a      	strb	r2, [r3, #0]
 800a79e:	e012      	b.n	800a7c6 <Seq_Check+0xbe>
	}
	else if(Req_SlowChrSeq == 0 && SlowChrCheck == 1)
 800a7a0:	4b35      	ldr	r3, [pc, #212]	; (800a878 <Seq_Check+0x170>)
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	f083 0301 	eor.w	r3, r3, #1
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00b      	beq.n	800a7c6 <Seq_Check+0xbe>
 800a7ae:	4b30      	ldr	r3, [pc, #192]	; (800a870 <Seq_Check+0x168>)
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d007      	beq.n	800a7c6 <Seq_Check+0xbe>
	{
		CONT_SlowChr_Disable();
 800a7b6:	f000 f94d 	bl	800aa54 <CONT_SlowChr_Disable>
		Req_FastChrSeq = 0;
 800a7ba:	4b30      	ldr	r3, [pc, #192]	; (800a87c <Seq_Check+0x174>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	701a      	strb	r2, [r3, #0]
		SlowChrCheck = 0;
 800a7c0:	4b2b      	ldr	r3, [pc, #172]	; (800a870 <Seq_Check+0x168>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	701a      	strb	r2, [r3, #0]
	}

	if(Req_FastChrSeq == 1 && FastChrCheck == 0 && SlowChrCheck == 0)
 800a7c6:	4b2d      	ldr	r3, [pc, #180]	; (800a87c <Seq_Check+0x174>)
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d016      	beq.n	800a7fc <Seq_Check+0xf4>
 800a7ce:	4b29      	ldr	r3, [pc, #164]	; (800a874 <Seq_Check+0x16c>)
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	f083 0301 	eor.w	r3, r3, #1
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00f      	beq.n	800a7fc <Seq_Check+0xf4>
 800a7dc:	4b24      	ldr	r3, [pc, #144]	; (800a870 <Seq_Check+0x168>)
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	f083 0301 	eor.w	r3, r3, #1
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d008      	beq.n	800a7fc <Seq_Check+0xf4>
	{
		CONT_Fast_CHR_Seq();
 800a7ea:	f000 f957 	bl	800aa9c <CONT_Fast_CHR_Seq>
		Req_SlowChrSeq = 0;
 800a7ee:	4b22      	ldr	r3, [pc, #136]	; (800a878 <Seq_Check+0x170>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	701a      	strb	r2, [r3, #0]
		FastChrCheck = 1;
 800a7f4:	4b1f      	ldr	r3, [pc, #124]	; (800a874 <Seq_Check+0x16c>)
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	701a      	strb	r2, [r3, #0]
 800a7fa:	e012      	b.n	800a822 <Seq_Check+0x11a>
	}
	else if(Req_FastChrSeq == 0 && FastChrCheck == 1)
 800a7fc:	4b1f      	ldr	r3, [pc, #124]	; (800a87c <Seq_Check+0x174>)
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	f083 0301 	eor.w	r3, r3, #1
 800a804:	b2db      	uxtb	r3, r3
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00b      	beq.n	800a822 <Seq_Check+0x11a>
 800a80a:	4b1a      	ldr	r3, [pc, #104]	; (800a874 <Seq_Check+0x16c>)
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d007      	beq.n	800a822 <Seq_Check+0x11a>
	{
		CONT_FastChr_Disable();
 800a812:	f000 f99d 	bl	800ab50 <CONT_FastChr_Disable>
		Req_SlowChrSeq = 0;
 800a816:	4b18      	ldr	r3, [pc, #96]	; (800a878 <Seq_Check+0x170>)
 800a818:	2200      	movs	r2, #0
 800a81a:	701a      	strb	r2, [r3, #0]
		FastChrCheck = 0;
 800a81c:	4b15      	ldr	r3, [pc, #84]	; (800a874 <Seq_Check+0x16c>)
 800a81e:	2200      	movs	r2, #0
 800a820:	701a      	strb	r2, [r3, #0]
	}

	if(Req_HVACSeq == 1 && HVACSeqCheck == 0)
 800a822:	4b17      	ldr	r3, [pc, #92]	; (800a880 <Seq_Check+0x178>)
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00c      	beq.n	800a844 <Seq_Check+0x13c>
 800a82a:	4b16      	ldr	r3, [pc, #88]	; (800a884 <Seq_Check+0x17c>)
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	f083 0301 	eor.w	r3, r3, #1
 800a832:	b2db      	uxtb	r3, r3
 800a834:	2b00      	cmp	r3, #0
 800a836:	d005      	beq.n	800a844 <Seq_Check+0x13c>
	{
		CONT_HVAC_Seq();
 800a838:	f000 f9be 	bl	800abb8 <CONT_HVAC_Seq>
		HVACSeqCheck = 1;
 800a83c:	4b11      	ldr	r3, [pc, #68]	; (800a884 <Seq_Check+0x17c>)
 800a83e:	2201      	movs	r2, #1
 800a840:	701a      	strb	r2, [r3, #0]
	{
		CONT_HVAC_Disable();
		HVACSeqCheck = 0;
	}

}
 800a842:	e00f      	b.n	800a864 <Seq_Check+0x15c>
	else if(Req_HVACSeq == 0 && HVACSeqCheck == 1)
 800a844:	4b0e      	ldr	r3, [pc, #56]	; (800a880 <Seq_Check+0x178>)
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	f083 0301 	eor.w	r3, r3, #1
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d008      	beq.n	800a864 <Seq_Check+0x15c>
 800a852:	4b0c      	ldr	r3, [pc, #48]	; (800a884 <Seq_Check+0x17c>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d004      	beq.n	800a864 <Seq_Check+0x15c>
		CONT_HVAC_Disable();
 800a85a:	f000 f9e1 	bl	800ac20 <CONT_HVAC_Disable>
		HVACSeqCheck = 0;
 800a85e:	4b09      	ldr	r3, [pc, #36]	; (800a884 <Seq_Check+0x17c>)
 800a860:	2200      	movs	r2, #0
 800a862:	701a      	strb	r2, [r3, #0]
}
 800a864:	bf00      	nop
 800a866:	bd80      	pop	{r7, pc}
 800a868:	20001950 	.word	0x20001950
 800a86c:	20001bcd 	.word	0x20001bcd
 800a870:	20001bce 	.word	0x20001bce
 800a874:	20001bcf 	.word	0x20001bcf
 800a878:	20001951 	.word	0x20001951
 800a87c:	20001952 	.word	0x20001952
 800a880:	20001953 	.word	0x20001953
 800a884:	20001bd0 	.word	0x20001bd0

0800a888 <CONT_MainSequence>:

void CONT_MainSequence(void)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	af00      	add	r7, sp, #0
	DATABASE_READ((void*)(&cont_database_bms), DATABASE_BMS);
 800a88c:	2110      	movs	r1, #16
 800a88e:	4825      	ldr	r0, [pc, #148]	; (800a924 <CONT_MainSequence+0x9c>)
 800a890:	f7ff f836 	bl	8009900 <DATABASE_READ>
	DATABASE_READ((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800a894:	210e      	movs	r1, #14
 800a896:	4824      	ldr	r0, [pc, #144]	; (800a928 <CONT_MainSequence+0xa0>)
 800a898:	f7ff f832 	bl	8009900 <DATABASE_READ>

//		if(cont_database_bms.bms_state != BMS_ERROR )
		{
			CONT_Close(GPIO_PIN_LS_CONTACTOR);
 800a89c:	2008      	movs	r0, #8
 800a89e:	f000 fa09 	bl	800acb4 <CONT_Close>
			HAL_Delay(100);
 800a8a2:	2064      	movs	r0, #100	; 0x64
 800a8a4:	f7f6 fedc 	bl	8001660 <HAL_Delay>
			cont_database_contactor.CONT_MAIN_MINUS= CONT_CLOSE;
 800a8a8:	4b1f      	ldr	r3, [pc, #124]	; (800a928 <CONT_MainSequence+0xa0>)
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	71da      	strb	r2, [r3, #7]

			CONT_Close(GPIO_PIN_PCHG_CONTACTOR);
 800a8ae:	2029      	movs	r0, #41	; 0x29
 800a8b0:	f000 fa00 	bl	800acb4 <CONT_Close>
			HAL_Delay(3000);
 800a8b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a8b8:	f7f6 fed2 	bl	8001660 <HAL_Delay>
			cont_database_contactor.CONT_PRECHARGE = CONT_CLOSE;
 800a8bc:	4b1a      	ldr	r3, [pc, #104]	; (800a928 <CONT_MainSequence+0xa0>)
 800a8be:	2201      	movs	r2, #1
 800a8c0:	721a      	strb	r2, [r3, #8]

			CONT_Close(GPIO_PIN_HS_CONTACTOR);
 800a8c2:	2028      	movs	r0, #40	; 0x28
 800a8c4:	f000 f9f6 	bl	800acb4 <CONT_Close>
			HAL_Delay(50);
 800a8c8:	2032      	movs	r0, #50	; 0x32
 800a8ca:	f7f6 fec9 	bl	8001660 <HAL_Delay>
			cont_database_contactor.CONT_MAIN_PLUS = CONT_CLOSE;
 800a8ce:	4b16      	ldr	r3, [pc, #88]	; (800a928 <CONT_MainSequence+0xa0>)
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	719a      	strb	r2, [r3, #6]

			CONT_Open(GPIO_PIN_PCHG_CONTACTOR);
 800a8d4:	2029      	movs	r0, #41	; 0x29
 800a8d6:	f000 f9df 	bl	800ac98 <CONT_Open>
			cont_database_contactor.CONT_PRECHARGE = CONT_OPEN;
 800a8da:	4b13      	ldr	r3, [pc, #76]	; (800a928 <CONT_MainSequence+0xa0>)
 800a8dc:	2200      	movs	r2, #0
 800a8de:	721a      	strb	r2, [r3, #8]
			error_req = 0;
 800a8e0:	4b12      	ldr	r3, [pc, #72]	; (800a92c <CONT_MainSequence+0xa4>)
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	701a      	strb	r2, [r3, #0]

			CONT_Close(GPIO_PIN_EXT_CONTACTOR);
 800a8e6:	200f      	movs	r0, #15
 800a8e8:	f000 f9e4 	bl	800acb4 <CONT_Close>
			HAL_Delay(100);
 800a8ec:	2064      	movs	r0, #100	; 0x64
 800a8ee:	f7f6 feb7 	bl	8001660 <HAL_Delay>
			cont_database_contactor.CONT_EXT = CONT_CLOSE;
 800a8f2:	4b0d      	ldr	r3, [pc, #52]	; (800a928 <CONT_MainSequence+0xa0>)
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	72da      	strb	r2, [r3, #11]

			DATABASE_WRITE((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800a8f8:	210e      	movs	r1, #14
 800a8fa:	480b      	ldr	r0, [pc, #44]	; (800a928 <CONT_MainSequence+0xa0>)
 800a8fc:	f7fe ffd2 	bl	80098a4 <DATABASE_WRITE>

			cont_database_bms.cont_state = CONT_NORMAL;
 800a900:	4b08      	ldr	r3, [pc, #32]	; (800a924 <CONT_MainSequence+0x9c>)
 800a902:	2201      	movs	r2, #1
 800a904:	721a      	strb	r2, [r3, #8]
			DATABASE_WRITE((void*)(&cont_database_bms), DATABASE_BMS);
 800a906:	2110      	movs	r1, #16
 800a908:	4806      	ldr	r0, [pc, #24]	; (800a924 <CONT_MainSequence+0x9c>)
 800a90a:	f7fe ffcb 	bl	80098a4 <DATABASE_WRITE>

			CAN_MAIN_SEQ_CPL();
 800a90e:	f7fd fef7 	bl	8008700 <CAN_MAIN_SEQ_CPL>
			cont_int = 0;
 800a912:	4b07      	ldr	r3, [pc, #28]	; (800a930 <CONT_MainSequence+0xa8>)
 800a914:	2200      	movs	r2, #0
 800a916:	701a      	strb	r2, [r3, #0]
			cont_startreq = 1;
 800a918:	4b06      	ldr	r3, [pc, #24]	; (800a934 <CONT_MainSequence+0xac>)
 800a91a:	2201      	movs	r2, #1
 800a91c:	701a      	strb	r2, [r3, #0]
		}
//		else
//		{
//			Req_MainSeq = 0;
//		}
}
 800a91e:	bf00      	nop
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20001a14 	.word	0x20001a14
 800a928:	20001a24 	.word	0x20001a24
 800a92c:	20001bc9 	.word	0x20001bc9
 800a930:	20001bca 	.word	0x20001bca
 800a934:	20001bcb 	.word	0x20001bcb

0800a938 <CONT_StopSequence>:

void CONT_StopSequence(void)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	af00      	add	r7, sp, #0
	DATABASE_READ((void*)(&cont_database_bms), DATABASE_BMS);
 800a93c:	2110      	movs	r1, #16
 800a93e:	481e      	ldr	r0, [pc, #120]	; (800a9b8 <CONT_StopSequence+0x80>)
 800a940:	f7fe ffde 	bl	8009900 <DATABASE_READ>
	DATABASE_READ((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800a944:	210e      	movs	r1, #14
 800a946:	481d      	ldr	r0, [pc, #116]	; (800a9bc <CONT_StopSequence+0x84>)
 800a948:	f7fe ffda 	bl	8009900 <DATABASE_READ>

	if(cont_database_contactor.CONT_PRECHARGE == CONT_CLOSE)
 800a94c:	4b1b      	ldr	r3, [pc, #108]	; (800a9bc <CONT_StopSequence+0x84>)
 800a94e:	7a1b      	ldrb	r3, [r3, #8]
 800a950:	2b01      	cmp	r3, #1
 800a952:	d108      	bne.n	800a966 <CONT_StopSequence+0x2e>
	{
		CONT_Open(GPIO_PIN_PCHG_CONTACTOR);
 800a954:	2029      	movs	r0, #41	; 0x29
 800a956:	f000 f99f 	bl	800ac98 <CONT_Open>
		HAL_Delay(100);
 800a95a:	2064      	movs	r0, #100	; 0x64
 800a95c:	f7f6 fe80 	bl	8001660 <HAL_Delay>
		cont_database_contactor.CONT_PRECHARGE = CONT_OPEN;
 800a960:	4b16      	ldr	r3, [pc, #88]	; (800a9bc <CONT_StopSequence+0x84>)
 800a962:	2200      	movs	r2, #0
 800a964:	721a      	strb	r2, [r3, #8]
	}

	CONT_Open(GPIO_PIN_EXT_CONTACTOR);
 800a966:	200f      	movs	r0, #15
 800a968:	f000 f996 	bl	800ac98 <CONT_Open>
	HAL_Delay(100);
 800a96c:	2064      	movs	r0, #100	; 0x64
 800a96e:	f7f6 fe77 	bl	8001660 <HAL_Delay>
	cont_database_contactor.CONT_EXT = CONT_OPEN;
 800a972:	4b12      	ldr	r3, [pc, #72]	; (800a9bc <CONT_StopSequence+0x84>)
 800a974:	2200      	movs	r2, #0
 800a976:	72da      	strb	r2, [r3, #11]

	CONT_Open(GPIO_PIN_HS_CONTACTOR);
 800a978:	2028      	movs	r0, #40	; 0x28
 800a97a:	f000 f98d 	bl	800ac98 <CONT_Open>
	HAL_Delay(3000);
 800a97e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a982:	f7f6 fe6d 	bl	8001660 <HAL_Delay>
	cont_database_contactor.CONT_MAIN_PLUS = CONT_OPEN;
 800a986:	4b0d      	ldr	r3, [pc, #52]	; (800a9bc <CONT_StopSequence+0x84>)
 800a988:	2200      	movs	r2, #0
 800a98a:	719a      	strb	r2, [r3, #6]

	CONT_Open(GPIO_PIN_LS_CONTACTOR);
 800a98c:	2008      	movs	r0, #8
 800a98e:	f000 f983 	bl	800ac98 <CONT_Open>
	HAL_Delay(100);
 800a992:	2064      	movs	r0, #100	; 0x64
 800a994:	f7f6 fe64 	bl	8001660 <HAL_Delay>
	cont_database_contactor.CONT_MAIN_MINUS= CONT_OPEN;
 800a998:	4b08      	ldr	r3, [pc, #32]	; (800a9bc <CONT_StopSequence+0x84>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	71da      	strb	r2, [r3, #7]

	DATABASE_WRITE((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800a99e:	210e      	movs	r1, #14
 800a9a0:	4806      	ldr	r0, [pc, #24]	; (800a9bc <CONT_StopSequence+0x84>)
 800a9a2:	f7fe ff7f 	bl	80098a4 <DATABASE_WRITE>

	cont_database_bms.cont_state = CONT_STANDBY;
 800a9a6:	4b04      	ldr	r3, [pc, #16]	; (800a9b8 <CONT_StopSequence+0x80>)
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	721a      	strb	r2, [r3, #8]
	DATABASE_WRITE((void*)(&cont_database_bms), DATABASE_BMS);
 800a9ac:	2110      	movs	r1, #16
 800a9ae:	4802      	ldr	r0, [pc, #8]	; (800a9b8 <CONT_StopSequence+0x80>)
 800a9b0:	f7fe ff78 	bl	80098a4 <DATABASE_WRITE>
}
 800a9b4:	bf00      	nop
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	20001a14 	.word	0x20001a14
 800a9bc:	20001a24 	.word	0x20001a24

0800a9c0 <CONT_Slow_CHR_Seq>:

void CONT_Slow_CHR_Seq(void)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	af00      	add	r7, sp, #0
	DATABASE_READ((void*)(&cont_database_bms), DATABASE_BMS);
 800a9c4:	2110      	movs	r1, #16
 800a9c6:	4820      	ldr	r0, [pc, #128]	; (800aa48 <CONT_Slow_CHR_Seq+0x88>)
 800a9c8:	f7fe ff9a 	bl	8009900 <DATABASE_READ>
	DATABASE_READ((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800a9cc:	210e      	movs	r1, #14
 800a9ce:	481f      	ldr	r0, [pc, #124]	; (800aa4c <CONT_Slow_CHR_Seq+0x8c>)
 800a9d0:	f7fe ff96 	bl	8009900 <DATABASE_READ>

		if(cont_database_bms.bms_state != BMS_ERROR )
 800a9d4:	4b1c      	ldr	r3, [pc, #112]	; (800aa48 <CONT_Slow_CHR_Seq+0x88>)
 800a9d6:	79db      	ldrb	r3, [r3, #7]
 800a9d8:	2b04      	cmp	r3, #4
 800a9da:	d030      	beq.n	800aa3e <CONT_Slow_CHR_Seq+0x7e>
//				CONT_Open(GPIO_PIN_HS_CONTACTOR);
//				HAL_Delay(50);
//				cont_database_contactor.CONT_MAIN_PLUS = CONT_OPEN;
//			}

			if(cont_database_contactor.CONT_PRECHARGE == CONT_CLOSE)
 800a9dc:	4b1b      	ldr	r3, [pc, #108]	; (800aa4c <CONT_Slow_CHR_Seq+0x8c>)
 800a9de:	7a1b      	ldrb	r3, [r3, #8]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d108      	bne.n	800a9f6 <CONT_Slow_CHR_Seq+0x36>
			{
				CONT_Open(GPIO_PIN_PCHG_CONTACTOR);
 800a9e4:	2029      	movs	r0, #41	; 0x29
 800a9e6:	f000 f957 	bl	800ac98 <CONT_Open>
				HAL_Delay(50);
 800a9ea:	2032      	movs	r0, #50	; 0x32
 800a9ec:	f7f6 fe38 	bl	8001660 <HAL_Delay>
				cont_database_contactor.CONT_PRECHARGE = CONT_OPEN;
 800a9f0:	4b16      	ldr	r3, [pc, #88]	; (800aa4c <CONT_Slow_CHR_Seq+0x8c>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	721a      	strb	r2, [r3, #8]
			}

			if(cont_database_contactor.CONT_MAIN_MINUS == CONT_OPEN)
 800a9f6:	4b15      	ldr	r3, [pc, #84]	; (800aa4c <CONT_Slow_CHR_Seq+0x8c>)
 800a9f8:	79db      	ldrb	r3, [r3, #7]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d108      	bne.n	800aa10 <CONT_Slow_CHR_Seq+0x50>
			{
				CONT_Close(GPIO_PIN_LS_CONTACTOR);
 800a9fe:	2008      	movs	r0, #8
 800aa00:	f000 f958 	bl	800acb4 <CONT_Close>
				HAL_Delay(100);
 800aa04:	2064      	movs	r0, #100	; 0x64
 800aa06:	f7f6 fe2b 	bl	8001660 <HAL_Delay>
				cont_database_contactor.CONT_MAIN_MINUS= CONT_CLOSE;
 800aa0a:	4b10      	ldr	r3, [pc, #64]	; (800aa4c <CONT_Slow_CHR_Seq+0x8c>)
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	71da      	strb	r2, [r3, #7]
			}

			CONT_Close(GPIO_PIN_EXT_CONTACTOR);
 800aa10:	200f      	movs	r0, #15
 800aa12:	f000 f94f 	bl	800acb4 <CONT_Close>
			HAL_Delay(100);
 800aa16:	2064      	movs	r0, #100	; 0x64
 800aa18:	f7f6 fe22 	bl	8001660 <HAL_Delay>
			cont_database_contactor.CONT_EXT = CONT_CLOSE;
 800aa1c:	4b0b      	ldr	r3, [pc, #44]	; (800aa4c <CONT_Slow_CHR_Seq+0x8c>)
 800aa1e:	2201      	movs	r2, #1
 800aa20:	72da      	strb	r2, [r3, #11]


			DATABASE_WRITE((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800aa22:	210e      	movs	r1, #14
 800aa24:	4809      	ldr	r0, [pc, #36]	; (800aa4c <CONT_Slow_CHR_Seq+0x8c>)
 800aa26:	f7fe ff3d 	bl	80098a4 <DATABASE_WRITE>

			cont_database_bms.cont_state = CONT_NORMAL;
 800aa2a:	4b07      	ldr	r3, [pc, #28]	; (800aa48 <CONT_Slow_CHR_Seq+0x88>)
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	721a      	strb	r2, [r3, #8]
			DATABASE_WRITE((void*)(&cont_database_bms), DATABASE_BMS);
 800aa30:	2110      	movs	r1, #16
 800aa32:	4805      	ldr	r0, [pc, #20]	; (800aa48 <CONT_Slow_CHR_Seq+0x88>)
 800aa34:	f7fe ff36 	bl	80098a4 <DATABASE_WRITE>
			CAN_SLOW_CHR_SEQ_CPL();
 800aa38:	f7fd fe86 	bl	8008748 <CAN_SLOW_CHR_SEQ_CPL>
		}
		else
		{
			Req_SlowChrSeq = 0;
		}
}
 800aa3c:	e002      	b.n	800aa44 <CONT_Slow_CHR_Seq+0x84>
			Req_SlowChrSeq = 0;
 800aa3e:	4b04      	ldr	r3, [pc, #16]	; (800aa50 <CONT_Slow_CHR_Seq+0x90>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	701a      	strb	r2, [r3, #0]
}
 800aa44:	bf00      	nop
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	20001a14 	.word	0x20001a14
 800aa4c:	20001a24 	.word	0x20001a24
 800aa50:	20001951 	.word	0x20001951

0800aa54 <CONT_SlowChr_Disable>:

void CONT_SlowChr_Disable(void)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	af00      	add	r7, sp, #0
	DATABASE_READ((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800aa58:	210e      	movs	r1, #14
 800aa5a:	480f      	ldr	r0, [pc, #60]	; (800aa98 <CONT_SlowChr_Disable+0x44>)
 800aa5c:	f7fe ff50 	bl	8009900 <DATABASE_READ>

			if(cont_database_contactor.CONT_PRECHARGE == CONT_CLOSE)
 800aa60:	4b0d      	ldr	r3, [pc, #52]	; (800aa98 <CONT_SlowChr_Disable+0x44>)
 800aa62:	7a1b      	ldrb	r3, [r3, #8]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d108      	bne.n	800aa7a <CONT_SlowChr_Disable+0x26>
			{
				CONT_Open(GPIO_PIN_PCHG_CONTACTOR);
 800aa68:	2029      	movs	r0, #41	; 0x29
 800aa6a:	f000 f915 	bl	800ac98 <CONT_Open>
				HAL_Delay(100);
 800aa6e:	2064      	movs	r0, #100	; 0x64
 800aa70:	f7f6 fdf6 	bl	8001660 <HAL_Delay>
				cont_database_contactor.CONT_PRECHARGE = CONT_OPEN;
 800aa74:	4b08      	ldr	r3, [pc, #32]	; (800aa98 <CONT_SlowChr_Disable+0x44>)
 800aa76:	2200      	movs	r2, #0
 800aa78:	721a      	strb	r2, [r3, #8]

//			CONT_Open(GPIO_PIN_HS_CONTACTOR);
//			HAL_Delay(100);
//			cont_database_contactor.CONT_MAIN_PLUS = CONT_OPEN;

			CONT_Open(GPIO_PIN_EXT_CONTACTOR);
 800aa7a:	200f      	movs	r0, #15
 800aa7c:	f000 f90c 	bl	800ac98 <CONT_Open>
			HAL_Delay(100);
 800aa80:	2064      	movs	r0, #100	; 0x64
 800aa82:	f7f6 fded 	bl	8001660 <HAL_Delay>
			cont_database_contactor.CONT_EXT= CONT_OPEN;
 800aa86:	4b04      	ldr	r3, [pc, #16]	; (800aa98 <CONT_SlowChr_Disable+0x44>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	72da      	strb	r2, [r3, #11]

			DATABASE_WRITE((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800aa8c:	210e      	movs	r1, #14
 800aa8e:	4802      	ldr	r0, [pc, #8]	; (800aa98 <CONT_SlowChr_Disable+0x44>)
 800aa90:	f7fe ff08 	bl	80098a4 <DATABASE_WRITE>
}
 800aa94:	bf00      	nop
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	20001a24 	.word	0x20001a24

0800aa9c <CONT_Fast_CHR_Seq>:

void CONT_Fast_CHR_Seq(void)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	af00      	add	r7, sp, #0
	DATABASE_READ((void*)(&cont_database_bms), DATABASE_BMS);
 800aaa0:	2110      	movs	r1, #16
 800aaa2:	4828      	ldr	r0, [pc, #160]	; (800ab44 <CONT_Fast_CHR_Seq+0xa8>)
 800aaa4:	f7fe ff2c 	bl	8009900 <DATABASE_READ>
	DATABASE_READ((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800aaa8:	210e      	movs	r1, #14
 800aaaa:	4827      	ldr	r0, [pc, #156]	; (800ab48 <CONT_Fast_CHR_Seq+0xac>)
 800aaac:	f7fe ff28 	bl	8009900 <DATABASE_READ>

		if(cont_database_bms.bms_state != BMS_ERROR )
 800aab0:	4b24      	ldr	r3, [pc, #144]	; (800ab44 <CONT_Fast_CHR_Seq+0xa8>)
 800aab2:	79db      	ldrb	r3, [r3, #7]
 800aab4:	2b04      	cmp	r3, #4
 800aab6:	d040      	beq.n	800ab3a <CONT_Fast_CHR_Seq+0x9e>
		{
			if(cont_database_contactor.CONT_PRECHARGE == CONT_CLOSE)
 800aab8:	4b23      	ldr	r3, [pc, #140]	; (800ab48 <CONT_Fast_CHR_Seq+0xac>)
 800aaba:	7a1b      	ldrb	r3, [r3, #8]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d108      	bne.n	800aad2 <CONT_Fast_CHR_Seq+0x36>
			{
				CONT_Open(GPIO_PIN_PCHG_CONTACTOR);
 800aac0:	2029      	movs	r0, #41	; 0x29
 800aac2:	f000 f8e9 	bl	800ac98 <CONT_Open>
				HAL_Delay(50);
 800aac6:	2032      	movs	r0, #50	; 0x32
 800aac8:	f7f6 fdca 	bl	8001660 <HAL_Delay>
				cont_database_contactor.CONT_PRECHARGE = CONT_OPEN;
 800aacc:	4b1e      	ldr	r3, [pc, #120]	; (800ab48 <CONT_Fast_CHR_Seq+0xac>)
 800aace:	2200      	movs	r2, #0
 800aad0:	721a      	strb	r2, [r3, #8]
			}

			if(cont_database_contactor.CONT_MAIN_PLUS == CONT_CLOSE)
 800aad2:	4b1d      	ldr	r3, [pc, #116]	; (800ab48 <CONT_Fast_CHR_Seq+0xac>)
 800aad4:	799b      	ldrb	r3, [r3, #6]
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d108      	bne.n	800aaec <CONT_Fast_CHR_Seq+0x50>
			{
				CONT_Open(GPIO_PIN_HS_CONTACTOR);
 800aada:	2028      	movs	r0, #40	; 0x28
 800aadc:	f000 f8dc 	bl	800ac98 <CONT_Open>
				HAL_Delay(50);
 800aae0:	2032      	movs	r0, #50	; 0x32
 800aae2:	f7f6 fdbd 	bl	8001660 <HAL_Delay>
				cont_database_contactor.CONT_MAIN_PLUS = CONT_OPEN;
 800aae6:	4b18      	ldr	r3, [pc, #96]	; (800ab48 <CONT_Fast_CHR_Seq+0xac>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	719a      	strb	r2, [r3, #6]
			}

			if(cont_database_contactor.CONT_MAIN_MINUS == CONT_OPEN)
 800aaec:	4b16      	ldr	r3, [pc, #88]	; (800ab48 <CONT_Fast_CHR_Seq+0xac>)
 800aaee:	79db      	ldrb	r3, [r3, #7]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d108      	bne.n	800ab06 <CONT_Fast_CHR_Seq+0x6a>
			{
				CONT_Close(GPIO_PIN_LS_CONTACTOR);
 800aaf4:	2008      	movs	r0, #8
 800aaf6:	f000 f8dd 	bl	800acb4 <CONT_Close>
				HAL_Delay(100);
 800aafa:	2064      	movs	r0, #100	; 0x64
 800aafc:	f7f6 fdb0 	bl	8001660 <HAL_Delay>
				cont_database_contactor.CONT_MAIN_MINUS= CONT_CLOSE;
 800ab00:	4b11      	ldr	r3, [pc, #68]	; (800ab48 <CONT_Fast_CHR_Seq+0xac>)
 800ab02:	2201      	movs	r2, #1
 800ab04:	71da      	strb	r2, [r3, #7]
			}

			CONT_Close(GPIO_PIN_DCDC_CONTACTOR);
 800ab06:	200b      	movs	r0, #11
 800ab08:	f000 f8d4 	bl	800acb4 <CONT_Close>
			HAL_Delay(300);
 800ab0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ab10:	f7f6 fda6 	bl	8001660 <HAL_Delay>
			cont_database_contactor.CONT_DCDC = CONT_CLOSE;
 800ab14:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <CONT_Fast_CHR_Seq+0xac>)
 800ab16:	2201      	movs	r2, #1
 800ab18:	725a      	strb	r2, [r3, #9]

			CONT_Close(GPIO_PIN_EXT_CONTACTOR);
 800ab1a:	200f      	movs	r0, #15
 800ab1c:	f000 f8ca 	bl	800acb4 <CONT_Close>
			HAL_Delay(100);
 800ab20:	2064      	movs	r0, #100	; 0x64
 800ab22:	f7f6 fd9d 	bl	8001660 <HAL_Delay>
			cont_database_contactor.CONT_EXT = CONT_CLOSE;
 800ab26:	4b08      	ldr	r3, [pc, #32]	; (800ab48 <CONT_Fast_CHR_Seq+0xac>)
 800ab28:	2201      	movs	r2, #1
 800ab2a:	72da      	strb	r2, [r3, #11]

			DATABASE_WRITE((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800ab2c:	210e      	movs	r1, #14
 800ab2e:	4806      	ldr	r0, [pc, #24]	; (800ab48 <CONT_Fast_CHR_Seq+0xac>)
 800ab30:	f7fe feb8 	bl	80098a4 <DATABASE_WRITE>
			CAN_FAST_CHR_SEQ_CPL();
 800ab34:	f7fd fe2c 	bl	8008790 <CAN_FAST_CHR_SEQ_CPL>
		}
		else
		{
			Req_FastChrSeq = 0;
		}
}
 800ab38:	e002      	b.n	800ab40 <CONT_Fast_CHR_Seq+0xa4>
			Req_FastChrSeq = 0;
 800ab3a:	4b04      	ldr	r3, [pc, #16]	; (800ab4c <CONT_Fast_CHR_Seq+0xb0>)
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	701a      	strb	r2, [r3, #0]
}
 800ab40:	bf00      	nop
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	20001a14 	.word	0x20001a14
 800ab48:	20001a24 	.word	0x20001a24
 800ab4c:	20001952 	.word	0x20001952

0800ab50 <CONT_FastChr_Disable>:

void CONT_FastChr_Disable(void)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	af00      	add	r7, sp, #0
	DATABASE_READ((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800ab54:	210e      	movs	r1, #14
 800ab56:	4817      	ldr	r0, [pc, #92]	; (800abb4 <CONT_FastChr_Disable+0x64>)
 800ab58:	f7fe fed2 	bl	8009900 <DATABASE_READ>

	if(cont_database_contactor.CONT_PRECHARGE == CONT_CLOSE)
 800ab5c:	4b15      	ldr	r3, [pc, #84]	; (800abb4 <CONT_FastChr_Disable+0x64>)
 800ab5e:	7a1b      	ldrb	r3, [r3, #8]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d108      	bne.n	800ab76 <CONT_FastChr_Disable+0x26>
	{
		CONT_Open(GPIO_PIN_PCHG_CONTACTOR);
 800ab64:	2029      	movs	r0, #41	; 0x29
 800ab66:	f000 f897 	bl	800ac98 <CONT_Open>
		HAL_Delay(100);
 800ab6a:	2064      	movs	r0, #100	; 0x64
 800ab6c:	f7f6 fd78 	bl	8001660 <HAL_Delay>
		cont_database_contactor.CONT_PRECHARGE = CONT_OPEN;
 800ab70:	4b10      	ldr	r3, [pc, #64]	; (800abb4 <CONT_FastChr_Disable+0x64>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	721a      	strb	r2, [r3, #8]
	}

	CONT_Open(GPIO_PIN_EXT_CONTACTOR);
 800ab76:	200f      	movs	r0, #15
 800ab78:	f000 f88e 	bl	800ac98 <CONT_Open>
	HAL_Delay(100);
 800ab7c:	2064      	movs	r0, #100	; 0x64
 800ab7e:	f7f6 fd6f 	bl	8001660 <HAL_Delay>
	cont_database_contactor.CONT_EXT = CONT_OPEN;
 800ab82:	4b0c      	ldr	r3, [pc, #48]	; (800abb4 <CONT_FastChr_Disable+0x64>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	72da      	strb	r2, [r3, #11]

	CONT_Open(GPIO_PIN_HS_CONTACTOR);
 800ab88:	2028      	movs	r0, #40	; 0x28
 800ab8a:	f000 f885 	bl	800ac98 <CONT_Open>
	HAL_Delay(100);
 800ab8e:	2064      	movs	r0, #100	; 0x64
 800ab90:	f7f6 fd66 	bl	8001660 <HAL_Delay>
	cont_database_contactor.CONT_MAIN_PLUS = CONT_OPEN;
 800ab94:	4b07      	ldr	r3, [pc, #28]	; (800abb4 <CONT_FastChr_Disable+0x64>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	719a      	strb	r2, [r3, #6]

	CONT_Open(GPIO_PIN_DCDC_CONTACTOR);
 800ab9a:	200b      	movs	r0, #11
 800ab9c:	f000 f87c 	bl	800ac98 <CONT_Open>
	cont_database_contactor.CONT_DCDC= CONT_OPEN;
 800aba0:	4b04      	ldr	r3, [pc, #16]	; (800abb4 <CONT_FastChr_Disable+0x64>)
 800aba2:	2200      	movs	r2, #0
 800aba4:	725a      	strb	r2, [r3, #9]

	DATABASE_WRITE((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800aba6:	210e      	movs	r1, #14
 800aba8:	4802      	ldr	r0, [pc, #8]	; (800abb4 <CONT_FastChr_Disable+0x64>)
 800abaa:	f7fe fe7b 	bl	80098a4 <DATABASE_WRITE>
}
 800abae:	bf00      	nop
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	20001a24 	.word	0x20001a24

0800abb8 <CONT_HVAC_Seq>:

void CONT_HVAC_Seq(void)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	af00      	add	r7, sp, #0
	DATABASE_READ((void*)(&cont_database_bms), DATABASE_BMS);
 800abbc:	2110      	movs	r1, #16
 800abbe:	4815      	ldr	r0, [pc, #84]	; (800ac14 <CONT_HVAC_Seq+0x5c>)
 800abc0:	f7fe fe9e 	bl	8009900 <DATABASE_READ>
	DATABASE_READ((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800abc4:	210e      	movs	r1, #14
 800abc6:	4814      	ldr	r0, [pc, #80]	; (800ac18 <CONT_HVAC_Seq+0x60>)
 800abc8:	f7fe fe9a 	bl	8009900 <DATABASE_READ>

		if(cont_database_bms.bms_error != BMS_SHORT_CIRCUIT )
 800abcc:	4b11      	ldr	r3, [pc, #68]	; (800ac14 <CONT_HVAC_Seq+0x5c>)
 800abce:	7a9b      	ldrb	r3, [r3, #10]
 800abd0:	2b0e      	cmp	r3, #14
 800abd2:	d019      	beq.n	800ac08 <CONT_HVAC_Seq+0x50>
		{
			if(cont_database_contactor.CONT_MAIN_MINUS == CONT_OPEN)
 800abd4:	4b10      	ldr	r3, [pc, #64]	; (800ac18 <CONT_HVAC_Seq+0x60>)
 800abd6:	79db      	ldrb	r3, [r3, #7]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d108      	bne.n	800abee <CONT_HVAC_Seq+0x36>
			{
				CONT_Close(GPIO_PIN_LS_CONTACTOR);
 800abdc:	2008      	movs	r0, #8
 800abde:	f000 f869 	bl	800acb4 <CONT_Close>
				HAL_Delay(100);
 800abe2:	2064      	movs	r0, #100	; 0x64
 800abe4:	f7f6 fd3c 	bl	8001660 <HAL_Delay>
				cont_database_contactor.CONT_MAIN_MINUS= CONT_CLOSE;
 800abe8:	4b0b      	ldr	r3, [pc, #44]	; (800ac18 <CONT_HVAC_Seq+0x60>)
 800abea:	2201      	movs	r2, #1
 800abec:	71da      	strb	r2, [r3, #7]
			}

			CONT_Close(GPIO_PIN_THERM_CONTACTOR);
 800abee:	200c      	movs	r0, #12
 800abf0:	f000 f860 	bl	800acb4 <CONT_Close>
			cont_database_contactor.CONT_THERM = CONT_CLOSE;
 800abf4:	4b08      	ldr	r3, [pc, #32]	; (800ac18 <CONT_HVAC_Seq+0x60>)
 800abf6:	2201      	movs	r2, #1
 800abf8:	729a      	strb	r2, [r3, #10]

			DATABASE_WRITE((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800abfa:	210e      	movs	r1, #14
 800abfc:	4806      	ldr	r0, [pc, #24]	; (800ac18 <CONT_HVAC_Seq+0x60>)
 800abfe:	f7fe fe51 	bl	80098a4 <DATABASE_WRITE>
			CAN_HVAC_SEQ_CPL();
 800ac02:	f7fd fde9 	bl	80087d8 <CAN_HVAC_SEQ_CPL>
		}
		else
		{
			Req_HVACSeq = 0;
		}
}
 800ac06:	e002      	b.n	800ac0e <CONT_HVAC_Seq+0x56>
			Req_HVACSeq = 0;
 800ac08:	4b04      	ldr	r3, [pc, #16]	; (800ac1c <CONT_HVAC_Seq+0x64>)
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	701a      	strb	r2, [r3, #0]
}
 800ac0e:	bf00      	nop
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20001a14 	.word	0x20001a14
 800ac18:	20001a24 	.word	0x20001a24
 800ac1c:	20001953 	.word	0x20001953

0800ac20 <CONT_HVAC_Disable>:

void CONT_HVAC_Disable(void)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	af00      	add	r7, sp, #0
	DATABASE_READ((void*)(&cont_database_bms), DATABASE_BMS);
 800ac24:	2110      	movs	r1, #16
 800ac26:	4810      	ldr	r0, [pc, #64]	; (800ac68 <CONT_HVAC_Disable+0x48>)
 800ac28:	f7fe fe6a 	bl	8009900 <DATABASE_READ>
	DATABASE_READ((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800ac2c:	210e      	movs	r1, #14
 800ac2e:	480f      	ldr	r0, [pc, #60]	; (800ac6c <CONT_HVAC_Disable+0x4c>)
 800ac30:	f7fe fe66 	bl	8009900 <DATABASE_READ>

	if(cont_database_bms.bms_state == BMS_ERROR)
 800ac34:	4b0c      	ldr	r3, [pc, #48]	; (800ac68 <CONT_HVAC_Disable+0x48>)
 800ac36:	79db      	ldrb	r3, [r3, #7]
 800ac38:	2b04      	cmp	r3, #4
 800ac3a:	d108      	bne.n	800ac4e <CONT_HVAC_Disable+0x2e>
	{
		CONT_Open(GPIO_PIN_LS_CONTACTOR);
 800ac3c:	2008      	movs	r0, #8
 800ac3e:	f000 f82b 	bl	800ac98 <CONT_Open>
		HAL_Delay(100);
 800ac42:	2064      	movs	r0, #100	; 0x64
 800ac44:	f7f6 fd0c 	bl	8001660 <HAL_Delay>
		cont_database_contactor.CONT_MAIN_MINUS= CONT_OPEN;
 800ac48:	4b08      	ldr	r3, [pc, #32]	; (800ac6c <CONT_HVAC_Disable+0x4c>)
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	71da      	strb	r2, [r3, #7]
	}
	CONT_Open(GPIO_PIN_THERM_CONTACTOR);
 800ac4e:	200c      	movs	r0, #12
 800ac50:	f000 f822 	bl	800ac98 <CONT_Open>
	cont_database_contactor.CONT_THERM = CONT_OPEN;
 800ac54:	4b05      	ldr	r3, [pc, #20]	; (800ac6c <CONT_HVAC_Disable+0x4c>)
 800ac56:	2200      	movs	r2, #0
 800ac58:	729a      	strb	r2, [r3, #10]

	DATABASE_WRITE((void*)(&cont_database_contactor), DATABASE_CONTACTOR);
 800ac5a:	210e      	movs	r1, #14
 800ac5c:	4803      	ldr	r0, [pc, #12]	; (800ac6c <CONT_HVAC_Disable+0x4c>)
 800ac5e:	f7fe fe21 	bl	80098a4 <DATABASE_WRITE>
}
 800ac62:	bf00      	nop
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	20001a14 	.word	0x20001a14
 800ac6c:	20001a24 	.word	0x20001a24

0800ac70 <ERROR_Dealy>:
		Delay_req++;
	}
}

void ERROR_Dealy(void)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	af00      	add	r7, sp, #0
	if(error_req<2)
 800ac74:	4b07      	ldr	r3, [pc, #28]	; (800ac94 <ERROR_Dealy+0x24>)
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d809      	bhi.n	800ac90 <ERROR_Dealy+0x20>
	{
		HAL_Delay(500);
 800ac7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ac80:	f7f6 fcee 	bl	8001660 <HAL_Delay>
		error_req++;
 800ac84:	4b03      	ldr	r3, [pc, #12]	; (800ac94 <ERROR_Dealy+0x24>)
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	b2da      	uxtb	r2, r3
 800ac8c:	4b01      	ldr	r3, [pc, #4]	; (800ac94 <ERROR_Dealy+0x24>)
 800ac8e:	701a      	strb	r2, [r3, #0]
	}
}
 800ac90:	bf00      	nop
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	20001bc9 	.word	0x20001bc9

0800ac98 <CONT_Open>:

void CONT_Open(GPIO_PINs cont_name)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	4603      	mov	r3, r0
 800aca0:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(cont_name, 0);
 800aca2:	79fb      	ldrb	r3, [r7, #7]
 800aca4:	2100      	movs	r1, #0
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fe fb8a 	bl	80093c0 <GPIO_WritePin>
}
 800acac:	bf00      	nop
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <CONT_Close>:

void CONT_Close(GPIO_PINs cont_name)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	4603      	mov	r3, r0
 800acbc:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(cont_name, 1);
 800acbe:	79fb      	ldrb	r3, [r7, #7]
 800acc0:	2101      	movs	r1, #1
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7fe fb7c 	bl	80093c0 <GPIO_WritePin>
}
 800acc8:	bf00      	nop
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <CRC16_Calc>:
 * @arguments
 * @retvar
 */

uint16_t CRC16_Calc(uint8_t *Buffer, uint8_t length)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	460b      	mov	r3, r1
 800acda:	70fb      	strb	r3, [r7, #3]
	uint16_t wCRC = 0;
 800acdc:	2300      	movs	r3, #0
 800acde:	81fb      	strh	r3, [r7, #14]

	for(uint8_t i=0; i<length; i++)
 800ace0:	2300      	movs	r3, #0
 800ace2:	737b      	strb	r3, [r7, #13]
 800ace4:	e016      	b.n	800ad14 <CRC16_Calc+0x44>
	{
		wCRC ^= (*Buffer++) & 0X00FF;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	1c5a      	adds	r2, r3, #1
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	b21a      	sxth	r2, r3
 800acf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800acf4:	4053      	eors	r3, r2
 800acf6:	b21b      	sxth	r3, r3
 800acf8:	81fb      	strh	r3, [r7, #14]
		wCRC = crc16_table[wCRC & 0X00FF] ^ (wCRC >> 8);
 800acfa:	89fb      	ldrh	r3, [r7, #14]
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	4a0b      	ldr	r2, [pc, #44]	; (800ad2c <CRC16_Calc+0x5c>)
 800ad00:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800ad04:	89fb      	ldrh	r3, [r7, #14]
 800ad06:	0a1b      	lsrs	r3, r3, #8
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	4053      	eors	r3, r2
 800ad0c:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i=0; i<length; i++)
 800ad0e:	7b7b      	ldrb	r3, [r7, #13]
 800ad10:	3301      	adds	r3, #1
 800ad12:	737b      	strb	r3, [r7, #13]
 800ad14:	7b7a      	ldrb	r2, [r7, #13]
 800ad16:	78fb      	ldrb	r3, [r7, #3]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d3e4      	bcc.n	800ace6 <CRC16_Calc+0x16>
	}

	return wCRC;
 800ad1c:	89fb      	ldrh	r3, [r7, #14]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3714      	adds	r7, #20
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	20000abc 	.word	0x20000abc

0800ad30 <bytestowrite>:

#define eeprom_database_size  92

// function to determine the remaining bytes
uint16_t bytestowrite (uint16_t size, uint16_t offset)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	4603      	mov	r3, r0
 800ad38:	460a      	mov	r2, r1
 800ad3a:	80fb      	strh	r3, [r7, #6]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	80bb      	strh	r3, [r7, #4]
	if ((size+offset)<PAGE_SIZE) return size;
 800ad40:	88fa      	ldrh	r2, [r7, #6]
 800ad42:	88bb      	ldrh	r3, [r7, #4]
 800ad44:	4413      	add	r3, r2
 800ad46:	2bff      	cmp	r3, #255	; 0xff
 800ad48:	dc01      	bgt.n	800ad4e <bytestowrite+0x1e>
 800ad4a:	88fb      	ldrh	r3, [r7, #6]
 800ad4c:	e003      	b.n	800ad56 <bytestowrite+0x26>
	else return PAGE_SIZE-offset;
 800ad4e:	88bb      	ldrh	r3, [r7, #4]
 800ad50:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800ad54:	b29b      	uxth	r3, r3
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	370c      	adds	r7, #12
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <array2struct>:
        array[i] = thing.eeprom_data[i];
    }
}

void array2struct(uint8_t *array, DATABASE_EEPROM_s *database_eeprom)
{
 800ad62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad66:	b091      	sub	sp, #68	; 0x44
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ad6c:	62b9      	str	r1, [r7, #40]	; 0x28
 800ad6e:	466b      	mov	r3, sp
 800ad70:	461e      	mov	r6, r3
	uint32_t database_length = DATABASE_Length(DATABASE_EEPROM);
 800ad72:	200d      	movs	r0, #13
 800ad74:	f7fe fe0a 	bl	800998c <DATABASE_Length>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	63fb      	str	r3, [r7, #60]	; 0x3c

	union
 800ad7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad7e:	2300      	movs	r3, #0
 800ad80:	460c      	mov	r4, r1
 800ad82:	461d      	mov	r5, r3
 800ad84:	f04f 0200 	mov.w	r2, #0
 800ad88:	f04f 0300 	mov.w	r3, #0
 800ad8c:	00eb      	lsls	r3, r5, #3
 800ad8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ad92:	00e2      	lsls	r2, r4, #3
	{
		uint8_t eeprom_data[database_length];
 800ad94:	460b      	mov	r3, r1
 800ad96:	3b01      	subs	r3, #1
	union
 800ad98:	637b      	str	r3, [r7, #52]	; 0x34
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	4688      	mov	r8, r1
 800ad9e:	4699      	mov	r9, r3
 800ada0:	f04f 0200 	mov.w	r2, #0
 800ada4:	f04f 0300 	mov.w	r3, #0
 800ada8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800adac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800adb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800adb4:	460b      	mov	r3, r1
 800adb6:	f5b3 7fcc 	cmp.w	r3, #408	; 0x198
 800adba:	bf38      	it	cc
 800adbc:	f44f 73cc 	movcc.w	r3, #408	; 0x198
 800adc0:	2200      	movs	r2, #0
 800adc2:	469a      	mov	sl, r3
 800adc4:	4693      	mov	fp, r2
 800adc6:	f04f 0200 	mov.w	r2, #0
 800adca:	f04f 0300 	mov.w	r3, #0
 800adce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800add2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800add6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800adda:	f112 001f 	adds.w	r0, r2, #31
 800adde:	6238      	str	r0, [r7, #32]
 800ade0:	f143 0300 	adc.w	r3, r3, #0
 800ade4:	627b      	str	r3, [r7, #36]	; 0x24
 800ade6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800adea:	4623      	mov	r3, r4
 800adec:	f023 031f 	bic.w	r3, r3, #31
 800adf0:	60bb      	str	r3, [r7, #8]
 800adf2:	462b      	mov	r3, r5
 800adf4:	60fb      	str	r3, [r7, #12]
		DATABASE_EEPROM_s database;
	}thing;
 800adf6:	460b      	mov	r3, r1
 800adf8:	f5b3 7fcc 	cmp.w	r3, #408	; 0x198
 800adfc:	bf38      	it	cc
 800adfe:	f44f 73cc 	movcc.w	r3, #408	; 0x198
 800ae02:	2200      	movs	r2, #0
 800ae04:	61bb      	str	r3, [r7, #24]
 800ae06:	61fa      	str	r2, [r7, #28]
 800ae08:	f04f 0200 	mov.w	r2, #0
 800ae0c:	f04f 0300 	mov.w	r3, #0
 800ae10:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800ae14:	4628      	mov	r0, r5
 800ae16:	00c3      	lsls	r3, r0, #3
 800ae18:	4620      	mov	r0, r4
 800ae1a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800ae1e:	4620      	mov	r0, r4
 800ae20:	00c2      	lsls	r2, r0, #3
 800ae22:	f112 001f 	adds.w	r0, r2, #31
 800ae26:	6138      	str	r0, [r7, #16]
 800ae28:	f143 0300 	adc.w	r3, r3, #0
 800ae2c:	617b      	str	r3, [r7, #20]
 800ae2e:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800ae32:	4623      	mov	r3, r4
 800ae34:	f023 031f 	bic.w	r3, r3, #31
 800ae38:	603b      	str	r3, [r7, #0]
 800ae3a:	462b      	mov	r3, r5
 800ae3c:	607b      	str	r3, [r7, #4]
 800ae3e:	460b      	mov	r3, r1
 800ae40:	f5b3 7fcc 	cmp.w	r3, #408	; 0x198
 800ae44:	bf38      	it	cc
 800ae46:	f44f 73cc 	movcc.w	r3, #408	; 0x198
 800ae4a:	3303      	adds	r3, #3
 800ae4c:	f023 0303 	bic.w	r3, r3, #3
 800ae50:	3307      	adds	r3, #7
 800ae52:	08db      	lsrs	r3, r3, #3
 800ae54:	00db      	lsls	r3, r3, #3
 800ae56:	ebad 0d03 	sub.w	sp, sp, r3
 800ae5a:	466b      	mov	r3, sp
 800ae5c:	3303      	adds	r3, #3
 800ae5e:	089b      	lsrs	r3, r3, #2
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	633b      	str	r3, [r7, #48]	; 0x30

    for(uint32_t i =0; i<database_length; i++)
 800ae64:	2300      	movs	r3, #0
 800ae66:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae68:	e00b      	b.n	800ae82 <array2struct+0x120>
    {
       thing.eeprom_data[i] = array[i];
 800ae6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6e:	4413      	add	r3, r2
 800ae70:	7819      	ldrb	r1, [r3, #0]
 800ae72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae76:	4413      	add	r3, r2
 800ae78:	460a      	mov	r2, r1
 800ae7a:	701a      	strb	r2, [r3, #0]
    for(uint32_t i =0; i<database_length; i++)
 800ae7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7e:	3301      	adds	r3, #1
 800ae80:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d3ef      	bcc.n	800ae6a <array2struct+0x108>
    }

    *database_eeprom = thing.database;
 800ae8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8e:	4610      	mov	r0, r2
 800ae90:	4619      	mov	r1, r3
 800ae92:	f44f 73cc 	mov.w	r3, #408	; 0x198
 800ae96:	461a      	mov	r2, r3
 800ae98:	f000 f98a 	bl	800b1b0 <memcpy>
 800ae9c:	46b5      	mov	sp, r6
}
 800ae9e:	bf00      	nop
 800aea0:	3744      	adds	r7, #68	; 0x44
 800aea2:	46bd      	mov	sp, r7
 800aea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aea8 <EEPROM_ReadAll>:
		pos += bytesremaining;
	}
}

DATABASE_EEPROM_s EEPROM_ReadAll (void)
{
 800aea8:	b590      	push	{r4, r7, lr}
 800aeaa:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800aeae:	af04      	add	r7, sp, #16
 800aeb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800aeb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800aeb8:	6018      	str	r0, [r3, #0]
	DATABASE_EEPROM_s readEEPROM_database = {0};
 800aeba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800aebe:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800aec2:	4618      	mov	r0, r3
 800aec4:	f44f 73cc 	mov.w	r3, #408	; 0x198
 800aec8:	461a      	mov	r2, r3
 800aeca:	2100      	movs	r1, #0
 800aecc:	f000 f97e 	bl	800b1cc <memset>
	int paddrposition = log(PAGE_SIZE)/log(2);
 800aed0:	2308      	movs	r3, #8
 800aed2:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	static uint16_t Read_startPage = 1;
	static uint16_t endPage;
	static uint16_t size = eeprom_database_size;
	static uint16_t Read_offset = 0;
	static uint16_t numofpages;
	uint8_t data[eeprom_database_size] = {0};
 800aed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800aeda:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800aede:	2200      	movs	r2, #0
 800aee0:	601a      	str	r2, [r3, #0]
 800aee2:	3304      	adds	r3, #4
 800aee4:	2258      	movs	r2, #88	; 0x58
 800aee6:	2100      	movs	r1, #0
 800aee8:	4618      	mov	r0, r3
 800aeea:	f000 f96f 	bl	800b1cc <memset>

//	GPIO_TogglePin(GPIO_PIN_LED3);

//	while(startPage < PAGE_NUM)
//	{
		uint8_t pos = 0;
 800aeee:	2300      	movs	r3, #0
 800aef0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
		endPage = Read_startPage + ((size+Read_offset)/PAGE_SIZE);
 800aef4:	4b90      	ldr	r3, [pc, #576]	; (800b138 <EEPROM_ReadAll+0x290>)
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	461a      	mov	r2, r3
 800aefa:	4b90      	ldr	r3, [pc, #576]	; (800b13c <EEPROM_ReadAll+0x294>)
 800aefc:	881b      	ldrh	r3, [r3, #0]
 800aefe:	4413      	add	r3, r2
 800af00:	2b00      	cmp	r3, #0
 800af02:	da00      	bge.n	800af06 <EEPROM_ReadAll+0x5e>
 800af04:	33ff      	adds	r3, #255	; 0xff
 800af06:	121b      	asrs	r3, r3, #8
 800af08:	b29a      	uxth	r2, r3
 800af0a:	4b8d      	ldr	r3, [pc, #564]	; (800b140 <EEPROM_ReadAll+0x298>)
 800af0c:	881b      	ldrh	r3, [r3, #0]
 800af0e:	4413      	add	r3, r2
 800af10:	b29a      	uxth	r2, r3
 800af12:	4b8c      	ldr	r3, [pc, #560]	; (800b144 <EEPROM_ReadAll+0x29c>)
 800af14:	801a      	strh	r2, [r3, #0]
		EEPROM_ADDR = EEPROM_ADDR | ((endPage >> 8) << 1);
 800af16:	4b8b      	ldr	r3, [pc, #556]	; (800b144 <EEPROM_ReadAll+0x29c>)
 800af18:	881b      	ldrh	r3, [r3, #0]
 800af1a:	0a1b      	lsrs	r3, r3, #8
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	005b      	lsls	r3, r3, #1
 800af20:	b25a      	sxtb	r2, r3
 800af22:	4b89      	ldr	r3, [pc, #548]	; (800b148 <EEPROM_ReadAll+0x2a0>)
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	b25b      	sxtb	r3, r3
 800af28:	4313      	orrs	r3, r2
 800af2a:	b25b      	sxtb	r3, r3
 800af2c:	b2da      	uxtb	r2, r3
 800af2e:	4b86      	ldr	r3, [pc, #536]	; (800b148 <EEPROM_ReadAll+0x2a0>)
 800af30:	701a      	strb	r2, [r3, #0]
		numofpages = (endPage-Read_startPage) + 1;
 800af32:	4b84      	ldr	r3, [pc, #528]	; (800b144 <EEPROM_ReadAll+0x29c>)
 800af34:	881a      	ldrh	r2, [r3, #0]
 800af36:	4b82      	ldr	r3, [pc, #520]	; (800b140 <EEPROM_ReadAll+0x298>)
 800af38:	881b      	ldrh	r3, [r3, #0]
 800af3a:	1ad3      	subs	r3, r2, r3
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	3301      	adds	r3, #1
 800af40:	b29a      	uxth	r2, r3
 800af42:	4b82      	ldr	r3, [pc, #520]	; (800b14c <EEPROM_ReadAll+0x2a4>)
 800af44:	801a      	strh	r2, [r3, #0]

		if(numofpages > 1)
 800af46:	4b81      	ldr	r3, [pc, #516]	; (800b14c <EEPROM_ReadAll+0x2a4>)
 800af48:	881b      	ldrh	r3, [r3, #0]
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	f240 8099 	bls.w	800b082 <EEPROM_ReadAll+0x1da>
		{
			uint8_t nextPage = 1;
 800af50:	2301      	movs	r3, #1
 800af52:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206

			for (uint8_t j=0; j<numofpages; j++)
 800af56:	2300      	movs	r3, #0
 800af58:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205
 800af5c:	e060      	b.n	800b020 <EEPROM_ReadAll+0x178>
			{
				PageAddress = Read_startPage<<paddrposition | Read_offset;
 800af5e:	4b78      	ldr	r3, [pc, #480]	; (800b140 <EEPROM_ReadAll+0x298>)
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	461a      	mov	r2, r3
 800af64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800af68:	fa02 f303 	lsl.w	r3, r2, r3
 800af6c:	b21a      	sxth	r2, r3
 800af6e:	4b73      	ldr	r3, [pc, #460]	; (800b13c <EEPROM_ReadAll+0x294>)
 800af70:	881b      	ldrh	r3, [r3, #0]
 800af72:	b21b      	sxth	r3, r3
 800af74:	4313      	orrs	r3, r2
 800af76:	b21b      	sxth	r3, r3
 800af78:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
				bytesremaining = bytestowrite(size, Read_offset);
 800af7c:	4b6e      	ldr	r3, [pc, #440]	; (800b138 <EEPROM_ReadAll+0x290>)
 800af7e:	881b      	ldrh	r3, [r3, #0]
 800af80:	4a6e      	ldr	r2, [pc, #440]	; (800b13c <EEPROM_ReadAll+0x294>)
 800af82:	8812      	ldrh	r2, [r2, #0]
 800af84:	4611      	mov	r1, r2
 800af86:	4618      	mov	r0, r3
 800af88:	f7ff fed2 	bl	800ad30 <bytestowrite>
 800af8c:	4603      	mov	r3, r0
 800af8e:	461a      	mov	r2, r3
 800af90:	4b6f      	ldr	r3, [pc, #444]	; (800b150 <EEPROM_ReadAll+0x2a8>)
 800af92:	801a      	strh	r2, [r3, #0]
				HAL_I2C_Mem_Read(&i2c_cfg[0], EEPROM_ADDR, PageAddress, 2, &data[pos], bytesremaining, 10);
 800af94:	4b6c      	ldr	r3, [pc, #432]	; (800b148 <EEPROM_ReadAll+0x2a0>)
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	b299      	uxth	r1, r3
 800af9a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800af9e:	f107 0208 	add.w	r2, r7, #8
 800afa2:	4413      	add	r3, r2
 800afa4:	4a6a      	ldr	r2, [pc, #424]	; (800b150 <EEPROM_ReadAll+0x2a8>)
 800afa6:	8812      	ldrh	r2, [r2, #0]
 800afa8:	f8b7 01fe 	ldrh.w	r0, [r7, #510]	; 0x1fe
 800afac:	240a      	movs	r4, #10
 800afae:	9402      	str	r4, [sp, #8]
 800afb0:	9201      	str	r2, [sp, #4]
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	2302      	movs	r3, #2
 800afb6:	4602      	mov	r2, r0
 800afb8:	4866      	ldr	r0, [pc, #408]	; (800b154 <EEPROM_ReadAll+0x2ac>)
 800afba:	f7f8 fd81 	bl	8003ac0 <HAL_I2C_Mem_Read>
				if(nextPage == 1)
 800afbe:	f897 3206 	ldrb.w	r3, [r7, #518]	; 0x206
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d11c      	bne.n	800b000 <EEPROM_ReadAll+0x158>
				{
					Read_startPage += 1;
 800afc6:	4b5e      	ldr	r3, [pc, #376]	; (800b140 <EEPROM_ReadAll+0x298>)
 800afc8:	881b      	ldrh	r3, [r3, #0]
 800afca:	3301      	adds	r3, #1
 800afcc:	b29a      	uxth	r2, r3
 800afce:	4b5c      	ldr	r3, [pc, #368]	; (800b140 <EEPROM_ReadAll+0x298>)
 800afd0:	801a      	strh	r2, [r3, #0]
					Read_offset=0;
 800afd2:	4b5a      	ldr	r3, [pc, #360]	; (800b13c <EEPROM_ReadAll+0x294>)
 800afd4:	2200      	movs	r2, #0
 800afd6:	801a      	strh	r2, [r3, #0]
					size = size-bytesremaining;
 800afd8:	4b57      	ldr	r3, [pc, #348]	; (800b138 <EEPROM_ReadAll+0x290>)
 800afda:	881a      	ldrh	r2, [r3, #0]
 800afdc:	4b5c      	ldr	r3, [pc, #368]	; (800b150 <EEPROM_ReadAll+0x2a8>)
 800afde:	881b      	ldrh	r3, [r3, #0]
 800afe0:	1ad3      	subs	r3, r2, r3
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	4b54      	ldr	r3, [pc, #336]	; (800b138 <EEPROM_ReadAll+0x290>)
 800afe6:	801a      	strh	r2, [r3, #0]
					pos += bytesremaining;
 800afe8:	4b59      	ldr	r3, [pc, #356]	; (800b150 <EEPROM_ReadAll+0x2a8>)
 800afea:	881b      	ldrh	r3, [r3, #0]
 800afec:	b2da      	uxtb	r2, r3
 800afee:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800aff2:	4413      	add	r3, r2
 800aff4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
					nextPage = 0;
 800aff8:	2300      	movs	r3, #0
 800affa:	f887 3206 	strb.w	r3, [r7, #518]	; 0x206
 800affe:	e00a      	b.n	800b016 <EEPROM_ReadAll+0x16e>
				}
				else
				{
					Read_offset += size;
 800b000:	4b4e      	ldr	r3, [pc, #312]	; (800b13c <EEPROM_ReadAll+0x294>)
 800b002:	881a      	ldrh	r2, [r3, #0]
 800b004:	4b4c      	ldr	r3, [pc, #304]	; (800b138 <EEPROM_ReadAll+0x290>)
 800b006:	881b      	ldrh	r3, [r3, #0]
 800b008:	4413      	add	r3, r2
 800b00a:	b29a      	uxth	r2, r3
 800b00c:	4b4b      	ldr	r3, [pc, #300]	; (800b13c <EEPROM_ReadAll+0x294>)
 800b00e:	801a      	strh	r2, [r3, #0]
					size = eeprom_database_size;
 800b010:	4b49      	ldr	r3, [pc, #292]	; (800b138 <EEPROM_ReadAll+0x290>)
 800b012:	225c      	movs	r2, #92	; 0x5c
 800b014:	801a      	strh	r2, [r3, #0]
			for (uint8_t j=0; j<numofpages; j++)
 800b016:	f897 3205 	ldrb.w	r3, [r7, #517]	; 0x205
 800b01a:	3301      	adds	r3, #1
 800b01c:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205
 800b020:	f897 3205 	ldrb.w	r3, [r7, #517]	; 0x205
 800b024:	b29a      	uxth	r2, r3
 800b026:	4b49      	ldr	r3, [pc, #292]	; (800b14c <EEPROM_ReadAll+0x2a4>)
 800b028:	881b      	ldrh	r3, [r3, #0]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d397      	bcc.n	800af5e <EEPROM_ReadAll+0xb6>
				}

			}

			if(data[0] == 255)
 800b02e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800b032:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	2bff      	cmp	r3, #255	; 0xff
 800b03a:	d109      	bne.n	800b050 <EEPROM_ReadAll+0x1a8>
			{
//				break;
//				GPIO_WritePin(GPIO_PIN_LED3, 0);
				EEPROM_ReadFlag = 0;
 800b03c:	4b46      	ldr	r3, [pc, #280]	; (800b158 <EEPROM_ReadAll+0x2b0>)
 800b03e:	2200      	movs	r2, #0
 800b040:	701a      	strb	r2, [r3, #0]
				Read_startPage = 1;
 800b042:	4b3f      	ldr	r3, [pc, #252]	; (800b140 <EEPROM_ReadAll+0x298>)
 800b044:	2201      	movs	r2, #1
 800b046:	801a      	strh	r2, [r3, #0]
				Read_offset = 0;
 800b048:	4b3c      	ldr	r3, [pc, #240]	; (800b13c <EEPROM_ReadAll+0x294>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	801a      	strh	r2, [r3, #0]
				return readEEPROM_database;
			}
//			TIMER_Delay_ms(1);
		}
//	}
}
 800b04e:	e069      	b.n	800b124 <EEPROM_ReadAll+0x27c>
				array2struct(data, &readEEPROM_database);
 800b050:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800b054:	f107 0308 	add.w	r3, r7, #8
 800b058:	4611      	mov	r1, r2
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7ff fe81 	bl	800ad62 <array2struct>
				return readEEPROM_database;
 800b060:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800b064:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800b06e:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800b072:	4610      	mov	r0, r2
 800b074:	4619      	mov	r1, r3
 800b076:	f44f 73cc 	mov.w	r3, #408	; 0x198
 800b07a:	461a      	mov	r2, r3
 800b07c:	f000 f898 	bl	800b1b0 <memcpy>
 800b080:	e050      	b.n	800b124 <EEPROM_ReadAll+0x27c>
			PageAddress = Read_startPage<<paddrposition | Read_offset;
 800b082:	4b2f      	ldr	r3, [pc, #188]	; (800b140 <EEPROM_ReadAll+0x298>)
 800b084:	881b      	ldrh	r3, [r3, #0]
 800b086:	461a      	mov	r2, r3
 800b088:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800b08c:	fa02 f303 	lsl.w	r3, r2, r3
 800b090:	b21a      	sxth	r2, r3
 800b092:	4b2a      	ldr	r3, [pc, #168]	; (800b13c <EEPROM_ReadAll+0x294>)
 800b094:	881b      	ldrh	r3, [r3, #0]
 800b096:	b21b      	sxth	r3, r3
 800b098:	4313      	orrs	r3, r2
 800b09a:	b21b      	sxth	r3, r3
 800b09c:	f8a7 31fe 	strh.w	r3, [r7, #510]	; 0x1fe
			HAL_I2C_Mem_Read(&i2c_cfg[0], EEPROM_ADDR, PageAddress, 2, data, size, 10);
 800b0a0:	4b29      	ldr	r3, [pc, #164]	; (800b148 <EEPROM_ReadAll+0x2a0>)
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	b299      	uxth	r1, r3
 800b0a6:	4b24      	ldr	r3, [pc, #144]	; (800b138 <EEPROM_ReadAll+0x290>)
 800b0a8:	881b      	ldrh	r3, [r3, #0]
 800b0aa:	f8b7 21fe 	ldrh.w	r2, [r7, #510]	; 0x1fe
 800b0ae:	200a      	movs	r0, #10
 800b0b0:	9002      	str	r0, [sp, #8]
 800b0b2:	9301      	str	r3, [sp, #4]
 800b0b4:	f107 0308 	add.w	r3, r7, #8
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	2302      	movs	r3, #2
 800b0bc:	4825      	ldr	r0, [pc, #148]	; (800b154 <EEPROM_ReadAll+0x2ac>)
 800b0be:	f7f8 fcff 	bl	8003ac0 <HAL_I2C_Mem_Read>
			Read_offset += size;
 800b0c2:	4b1e      	ldr	r3, [pc, #120]	; (800b13c <EEPROM_ReadAll+0x294>)
 800b0c4:	881a      	ldrh	r2, [r3, #0]
 800b0c6:	4b1c      	ldr	r3, [pc, #112]	; (800b138 <EEPROM_ReadAll+0x290>)
 800b0c8:	881b      	ldrh	r3, [r3, #0]
 800b0ca:	4413      	add	r3, r2
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	4b1b      	ldr	r3, [pc, #108]	; (800b13c <EEPROM_ReadAll+0x294>)
 800b0d0:	801a      	strh	r2, [r3, #0]
			if(data[0] == 255)
 800b0d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800b0d6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	2bff      	cmp	r3, #255	; 0xff
 800b0de:	d109      	bne.n	800b0f4 <EEPROM_ReadAll+0x24c>
				EEPROM_ReadFlag = 0;
 800b0e0:	4b1d      	ldr	r3, [pc, #116]	; (800b158 <EEPROM_ReadAll+0x2b0>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	701a      	strb	r2, [r3, #0]
				Read_startPage = 1;
 800b0e6:	4b16      	ldr	r3, [pc, #88]	; (800b140 <EEPROM_ReadAll+0x298>)
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	801a      	strh	r2, [r3, #0]
				Read_offset = 0;
 800b0ec:	4b13      	ldr	r3, [pc, #76]	; (800b13c <EEPROM_ReadAll+0x294>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	801a      	strh	r2, [r3, #0]
}
 800b0f2:	e017      	b.n	800b124 <EEPROM_ReadAll+0x27c>
				array2struct(data, &readEEPROM_database);
 800b0f4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800b0f8:	f107 0308 	add.w	r3, r7, #8
 800b0fc:	4611      	mov	r1, r2
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7ff fe2f 	bl	800ad62 <array2struct>
				return readEEPROM_database;
 800b104:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800b108:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800b112:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800b116:	4610      	mov	r0, r2
 800b118:	4619      	mov	r1, r3
 800b11a:	f44f 73cc 	mov.w	r3, #408	; 0x198
 800b11e:	461a      	mov	r2, r3
 800b120:	f000 f846 	bl	800b1b0 <memcpy>
}
 800b124:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800b128:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800b12c:	6818      	ldr	r0, [r3, #0]
 800b12e:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 800b132:	46bd      	mov	sp, r7
 800b134:	bd90      	pop	{r4, r7, pc}
 800b136:	bf00      	nop
 800b138:	20000cbe 	.word	0x20000cbe
 800b13c:	20001bd4 	.word	0x20001bd4
 800b140:	20000cc0 	.word	0x20000cc0
 800b144:	20001bd6 	.word	0x20001bd6
 800b148:	20000cbc 	.word	0x20000cbc
 800b14c:	20001bd8 	.word	0x20001bd8
 800b150:	20001bda 	.word	0x20001bda
 800b154:	20000598 	.word	0x20000598
 800b158:	20001bd2 	.word	0x20001bd2

0800b15c <__errno>:
 800b15c:	4b01      	ldr	r3, [pc, #4]	; (800b164 <__errno+0x8>)
 800b15e:	6818      	ldr	r0, [r3, #0]
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	20000cc4 	.word	0x20000cc4

0800b168 <__libc_init_array>:
 800b168:	b570      	push	{r4, r5, r6, lr}
 800b16a:	4d0d      	ldr	r5, [pc, #52]	; (800b1a0 <__libc_init_array+0x38>)
 800b16c:	4c0d      	ldr	r4, [pc, #52]	; (800b1a4 <__libc_init_array+0x3c>)
 800b16e:	1b64      	subs	r4, r4, r5
 800b170:	10a4      	asrs	r4, r4, #2
 800b172:	2600      	movs	r6, #0
 800b174:	42a6      	cmp	r6, r4
 800b176:	d109      	bne.n	800b18c <__libc_init_array+0x24>
 800b178:	4d0b      	ldr	r5, [pc, #44]	; (800b1a8 <__libc_init_array+0x40>)
 800b17a:	4c0c      	ldr	r4, [pc, #48]	; (800b1ac <__libc_init_array+0x44>)
 800b17c:	f000 fa34 	bl	800b5e8 <_init>
 800b180:	1b64      	subs	r4, r4, r5
 800b182:	10a4      	asrs	r4, r4, #2
 800b184:	2600      	movs	r6, #0
 800b186:	42a6      	cmp	r6, r4
 800b188:	d105      	bne.n	800b196 <__libc_init_array+0x2e>
 800b18a:	bd70      	pop	{r4, r5, r6, pc}
 800b18c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b190:	4798      	blx	r3
 800b192:	3601      	adds	r6, #1
 800b194:	e7ee      	b.n	800b174 <__libc_init_array+0xc>
 800b196:	f855 3b04 	ldr.w	r3, [r5], #4
 800b19a:	4798      	blx	r3
 800b19c:	3601      	adds	r6, #1
 800b19e:	e7f2      	b.n	800b186 <__libc_init_array+0x1e>
 800b1a0:	0800b65c 	.word	0x0800b65c
 800b1a4:	0800b65c 	.word	0x0800b65c
 800b1a8:	0800b65c 	.word	0x0800b65c
 800b1ac:	0800b660 	.word	0x0800b660

0800b1b0 <memcpy>:
 800b1b0:	440a      	add	r2, r1
 800b1b2:	4291      	cmp	r1, r2
 800b1b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1b8:	d100      	bne.n	800b1bc <memcpy+0xc>
 800b1ba:	4770      	bx	lr
 800b1bc:	b510      	push	{r4, lr}
 800b1be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1c6:	4291      	cmp	r1, r2
 800b1c8:	d1f9      	bne.n	800b1be <memcpy+0xe>
 800b1ca:	bd10      	pop	{r4, pc}

0800b1cc <memset>:
 800b1cc:	4402      	add	r2, r0
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d100      	bne.n	800b1d6 <memset+0xa>
 800b1d4:	4770      	bx	lr
 800b1d6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1da:	e7f9      	b.n	800b1d0 <memset+0x4>
 800b1dc:	0000      	movs	r0, r0
	...

0800b1e0 <log>:
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	ed2d 8b02 	vpush	{d8}
 800b1e6:	ec55 4b10 	vmov	r4, r5, d0
 800b1ea:	f000 f839 	bl	800b260 <__ieee754_log>
 800b1ee:	4622      	mov	r2, r4
 800b1f0:	462b      	mov	r3, r5
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	eeb0 8a40 	vmov.f32	s16, s0
 800b1fa:	eef0 8a60 	vmov.f32	s17, s1
 800b1fe:	f7f5 fc3d 	bl	8000a7c <__aeabi_dcmpun>
 800b202:	b998      	cbnz	r0, 800b22c <log+0x4c>
 800b204:	2200      	movs	r2, #0
 800b206:	2300      	movs	r3, #0
 800b208:	4620      	mov	r0, r4
 800b20a:	4629      	mov	r1, r5
 800b20c:	f7f5 fc2c 	bl	8000a68 <__aeabi_dcmpgt>
 800b210:	b960      	cbnz	r0, 800b22c <log+0x4c>
 800b212:	2200      	movs	r2, #0
 800b214:	2300      	movs	r3, #0
 800b216:	4620      	mov	r0, r4
 800b218:	4629      	mov	r1, r5
 800b21a:	f7f5 fbfd 	bl	8000a18 <__aeabi_dcmpeq>
 800b21e:	b160      	cbz	r0, 800b23a <log+0x5a>
 800b220:	f7ff ff9c 	bl	800b15c <__errno>
 800b224:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800b250 <log+0x70>
 800b228:	2322      	movs	r3, #34	; 0x22
 800b22a:	6003      	str	r3, [r0, #0]
 800b22c:	eeb0 0a48 	vmov.f32	s0, s16
 800b230:	eef0 0a68 	vmov.f32	s1, s17
 800b234:	ecbd 8b02 	vpop	{d8}
 800b238:	bd38      	pop	{r3, r4, r5, pc}
 800b23a:	f7ff ff8f 	bl	800b15c <__errno>
 800b23e:	ecbd 8b02 	vpop	{d8}
 800b242:	2321      	movs	r3, #33	; 0x21
 800b244:	6003      	str	r3, [r0, #0]
 800b246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b24a:	4803      	ldr	r0, [pc, #12]	; (800b258 <log+0x78>)
 800b24c:	f000 b9c4 	b.w	800b5d8 <nan>
 800b250:	00000000 	.word	0x00000000
 800b254:	fff00000 	.word	0xfff00000
 800b258:	0800b650 	.word	0x0800b650
 800b25c:	00000000 	.word	0x00000000

0800b260 <__ieee754_log>:
 800b260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b264:	ec51 0b10 	vmov	r0, r1, d0
 800b268:	ed2d 8b04 	vpush	{d8-d9}
 800b26c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b270:	b083      	sub	sp, #12
 800b272:	460d      	mov	r5, r1
 800b274:	da29      	bge.n	800b2ca <__ieee754_log+0x6a>
 800b276:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b27a:	4303      	orrs	r3, r0
 800b27c:	ee10 2a10 	vmov	r2, s0
 800b280:	d10c      	bne.n	800b29c <__ieee754_log+0x3c>
 800b282:	49cf      	ldr	r1, [pc, #828]	; (800b5c0 <__ieee754_log+0x360>)
 800b284:	2200      	movs	r2, #0
 800b286:	2300      	movs	r3, #0
 800b288:	2000      	movs	r0, #0
 800b28a:	f7f5 fa87 	bl	800079c <__aeabi_ddiv>
 800b28e:	ec41 0b10 	vmov	d0, r0, r1
 800b292:	b003      	add	sp, #12
 800b294:	ecbd 8b04 	vpop	{d8-d9}
 800b298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b29c:	2900      	cmp	r1, #0
 800b29e:	da05      	bge.n	800b2ac <__ieee754_log+0x4c>
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	f7f4 ff99 	bl	80001d8 <__aeabi_dsub>
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	e7ee      	b.n	800b28a <__ieee754_log+0x2a>
 800b2ac:	4bc5      	ldr	r3, [pc, #788]	; (800b5c4 <__ieee754_log+0x364>)
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f7f5 f94a 	bl	8000548 <__aeabi_dmul>
 800b2b4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800b2b8:	460d      	mov	r5, r1
 800b2ba:	4ac3      	ldr	r2, [pc, #780]	; (800b5c8 <__ieee754_log+0x368>)
 800b2bc:	4295      	cmp	r5, r2
 800b2be:	dd06      	ble.n	800b2ce <__ieee754_log+0x6e>
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	f7f4 ff8a 	bl	80001dc <__adddf3>
 800b2c8:	e7e1      	b.n	800b28e <__ieee754_log+0x2e>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	e7f5      	b.n	800b2ba <__ieee754_log+0x5a>
 800b2ce:	152c      	asrs	r4, r5, #20
 800b2d0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b2d4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b2d8:	441c      	add	r4, r3
 800b2da:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800b2de:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800b2e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2e6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800b2ea:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800b2ee:	ea42 0105 	orr.w	r1, r2, r5
 800b2f2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	4bb4      	ldr	r3, [pc, #720]	; (800b5cc <__ieee754_log+0x36c>)
 800b2fa:	f7f4 ff6d 	bl	80001d8 <__aeabi_dsub>
 800b2fe:	1cab      	adds	r3, r5, #2
 800b300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b304:	2b02      	cmp	r3, #2
 800b306:	4682      	mov	sl, r0
 800b308:	468b      	mov	fp, r1
 800b30a:	f04f 0200 	mov.w	r2, #0
 800b30e:	dc53      	bgt.n	800b3b8 <__ieee754_log+0x158>
 800b310:	2300      	movs	r3, #0
 800b312:	f7f5 fb81 	bl	8000a18 <__aeabi_dcmpeq>
 800b316:	b1d0      	cbz	r0, 800b34e <__ieee754_log+0xee>
 800b318:	2c00      	cmp	r4, #0
 800b31a:	f000 8122 	beq.w	800b562 <__ieee754_log+0x302>
 800b31e:	4620      	mov	r0, r4
 800b320:	f7f5 f8a8 	bl	8000474 <__aeabi_i2d>
 800b324:	a390      	add	r3, pc, #576	; (adr r3, 800b568 <__ieee754_log+0x308>)
 800b326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32a:	4606      	mov	r6, r0
 800b32c:	460f      	mov	r7, r1
 800b32e:	f7f5 f90b 	bl	8000548 <__aeabi_dmul>
 800b332:	a38f      	add	r3, pc, #572	; (adr r3, 800b570 <__ieee754_log+0x310>)
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	4604      	mov	r4, r0
 800b33a:	460d      	mov	r5, r1
 800b33c:	4630      	mov	r0, r6
 800b33e:	4639      	mov	r1, r7
 800b340:	f7f5 f902 	bl	8000548 <__aeabi_dmul>
 800b344:	4602      	mov	r2, r0
 800b346:	460b      	mov	r3, r1
 800b348:	4620      	mov	r0, r4
 800b34a:	4629      	mov	r1, r5
 800b34c:	e7ba      	b.n	800b2c4 <__ieee754_log+0x64>
 800b34e:	a38a      	add	r3, pc, #552	; (adr r3, 800b578 <__ieee754_log+0x318>)
 800b350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b354:	4650      	mov	r0, sl
 800b356:	4659      	mov	r1, fp
 800b358:	f7f5 f8f6 	bl	8000548 <__aeabi_dmul>
 800b35c:	4602      	mov	r2, r0
 800b35e:	460b      	mov	r3, r1
 800b360:	2000      	movs	r0, #0
 800b362:	499b      	ldr	r1, [pc, #620]	; (800b5d0 <__ieee754_log+0x370>)
 800b364:	f7f4 ff38 	bl	80001d8 <__aeabi_dsub>
 800b368:	4652      	mov	r2, sl
 800b36a:	4606      	mov	r6, r0
 800b36c:	460f      	mov	r7, r1
 800b36e:	465b      	mov	r3, fp
 800b370:	4650      	mov	r0, sl
 800b372:	4659      	mov	r1, fp
 800b374:	f7f5 f8e8 	bl	8000548 <__aeabi_dmul>
 800b378:	4602      	mov	r2, r0
 800b37a:	460b      	mov	r3, r1
 800b37c:	4630      	mov	r0, r6
 800b37e:	4639      	mov	r1, r7
 800b380:	f7f5 f8e2 	bl	8000548 <__aeabi_dmul>
 800b384:	4606      	mov	r6, r0
 800b386:	460f      	mov	r7, r1
 800b388:	b914      	cbnz	r4, 800b390 <__ieee754_log+0x130>
 800b38a:	4632      	mov	r2, r6
 800b38c:	463b      	mov	r3, r7
 800b38e:	e0a2      	b.n	800b4d6 <__ieee754_log+0x276>
 800b390:	4620      	mov	r0, r4
 800b392:	f7f5 f86f 	bl	8000474 <__aeabi_i2d>
 800b396:	a374      	add	r3, pc, #464	; (adr r3, 800b568 <__ieee754_log+0x308>)
 800b398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b39c:	4680      	mov	r8, r0
 800b39e:	4689      	mov	r9, r1
 800b3a0:	f7f5 f8d2 	bl	8000548 <__aeabi_dmul>
 800b3a4:	a372      	add	r3, pc, #456	; (adr r3, 800b570 <__ieee754_log+0x310>)
 800b3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3aa:	4604      	mov	r4, r0
 800b3ac:	460d      	mov	r5, r1
 800b3ae:	4640      	mov	r0, r8
 800b3b0:	4649      	mov	r1, r9
 800b3b2:	f7f5 f8c9 	bl	8000548 <__aeabi_dmul>
 800b3b6:	e0a7      	b.n	800b508 <__ieee754_log+0x2a8>
 800b3b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b3bc:	f7f4 ff0e 	bl	80001dc <__adddf3>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	4650      	mov	r0, sl
 800b3c6:	4659      	mov	r1, fp
 800b3c8:	f7f5 f9e8 	bl	800079c <__aeabi_ddiv>
 800b3cc:	ec41 0b18 	vmov	d8, r0, r1
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f7f5 f84f 	bl	8000474 <__aeabi_i2d>
 800b3d6:	ec53 2b18 	vmov	r2, r3, d8
 800b3da:	ec41 0b19 	vmov	d9, r0, r1
 800b3de:	ec51 0b18 	vmov	r0, r1, d8
 800b3e2:	f7f5 f8b1 	bl	8000548 <__aeabi_dmul>
 800b3e6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800b3ea:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800b3ee:	9301      	str	r3, [sp, #4]
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	4680      	mov	r8, r0
 800b3f6:	4689      	mov	r9, r1
 800b3f8:	f7f5 f8a6 	bl	8000548 <__aeabi_dmul>
 800b3fc:	a360      	add	r3, pc, #384	; (adr r3, 800b580 <__ieee754_log+0x320>)
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	4606      	mov	r6, r0
 800b404:	460f      	mov	r7, r1
 800b406:	f7f5 f89f 	bl	8000548 <__aeabi_dmul>
 800b40a:	a35f      	add	r3, pc, #380	; (adr r3, 800b588 <__ieee754_log+0x328>)
 800b40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b410:	f7f4 fee4 	bl	80001dc <__adddf3>
 800b414:	4632      	mov	r2, r6
 800b416:	463b      	mov	r3, r7
 800b418:	f7f5 f896 	bl	8000548 <__aeabi_dmul>
 800b41c:	a35c      	add	r3, pc, #368	; (adr r3, 800b590 <__ieee754_log+0x330>)
 800b41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b422:	f7f4 fedb 	bl	80001dc <__adddf3>
 800b426:	4632      	mov	r2, r6
 800b428:	463b      	mov	r3, r7
 800b42a:	f7f5 f88d 	bl	8000548 <__aeabi_dmul>
 800b42e:	a35a      	add	r3, pc, #360	; (adr r3, 800b598 <__ieee754_log+0x338>)
 800b430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b434:	f7f4 fed2 	bl	80001dc <__adddf3>
 800b438:	4642      	mov	r2, r8
 800b43a:	464b      	mov	r3, r9
 800b43c:	f7f5 f884 	bl	8000548 <__aeabi_dmul>
 800b440:	a357      	add	r3, pc, #348	; (adr r3, 800b5a0 <__ieee754_log+0x340>)
 800b442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b446:	4680      	mov	r8, r0
 800b448:	4689      	mov	r9, r1
 800b44a:	4630      	mov	r0, r6
 800b44c:	4639      	mov	r1, r7
 800b44e:	f7f5 f87b 	bl	8000548 <__aeabi_dmul>
 800b452:	a355      	add	r3, pc, #340	; (adr r3, 800b5a8 <__ieee754_log+0x348>)
 800b454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b458:	f7f4 fec0 	bl	80001dc <__adddf3>
 800b45c:	4632      	mov	r2, r6
 800b45e:	463b      	mov	r3, r7
 800b460:	f7f5 f872 	bl	8000548 <__aeabi_dmul>
 800b464:	a352      	add	r3, pc, #328	; (adr r3, 800b5b0 <__ieee754_log+0x350>)
 800b466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46a:	f7f4 feb7 	bl	80001dc <__adddf3>
 800b46e:	4632      	mov	r2, r6
 800b470:	463b      	mov	r3, r7
 800b472:	f7f5 f869 	bl	8000548 <__aeabi_dmul>
 800b476:	460b      	mov	r3, r1
 800b478:	4602      	mov	r2, r0
 800b47a:	4649      	mov	r1, r9
 800b47c:	4640      	mov	r0, r8
 800b47e:	f7f4 fead 	bl	80001dc <__adddf3>
 800b482:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b486:	9b01      	ldr	r3, [sp, #4]
 800b488:	3551      	adds	r5, #81	; 0x51
 800b48a:	431d      	orrs	r5, r3
 800b48c:	2d00      	cmp	r5, #0
 800b48e:	4680      	mov	r8, r0
 800b490:	4689      	mov	r9, r1
 800b492:	dd48      	ble.n	800b526 <__ieee754_log+0x2c6>
 800b494:	4b4e      	ldr	r3, [pc, #312]	; (800b5d0 <__ieee754_log+0x370>)
 800b496:	2200      	movs	r2, #0
 800b498:	4650      	mov	r0, sl
 800b49a:	4659      	mov	r1, fp
 800b49c:	f7f5 f854 	bl	8000548 <__aeabi_dmul>
 800b4a0:	4652      	mov	r2, sl
 800b4a2:	465b      	mov	r3, fp
 800b4a4:	f7f5 f850 	bl	8000548 <__aeabi_dmul>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4606      	mov	r6, r0
 800b4ae:	460f      	mov	r7, r1
 800b4b0:	4640      	mov	r0, r8
 800b4b2:	4649      	mov	r1, r9
 800b4b4:	f7f4 fe92 	bl	80001dc <__adddf3>
 800b4b8:	ec53 2b18 	vmov	r2, r3, d8
 800b4bc:	f7f5 f844 	bl	8000548 <__aeabi_dmul>
 800b4c0:	4680      	mov	r8, r0
 800b4c2:	4689      	mov	r9, r1
 800b4c4:	b964      	cbnz	r4, 800b4e0 <__ieee754_log+0x280>
 800b4c6:	4602      	mov	r2, r0
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4630      	mov	r0, r6
 800b4cc:	4639      	mov	r1, r7
 800b4ce:	f7f4 fe83 	bl	80001d8 <__aeabi_dsub>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	460b      	mov	r3, r1
 800b4d6:	4650      	mov	r0, sl
 800b4d8:	4659      	mov	r1, fp
 800b4da:	f7f4 fe7d 	bl	80001d8 <__aeabi_dsub>
 800b4de:	e6d6      	b.n	800b28e <__ieee754_log+0x2e>
 800b4e0:	a321      	add	r3, pc, #132	; (adr r3, 800b568 <__ieee754_log+0x308>)
 800b4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e6:	ec51 0b19 	vmov	r0, r1, d9
 800b4ea:	f7f5 f82d 	bl	8000548 <__aeabi_dmul>
 800b4ee:	a320      	add	r3, pc, #128	; (adr r3, 800b570 <__ieee754_log+0x310>)
 800b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f4:	4604      	mov	r4, r0
 800b4f6:	460d      	mov	r5, r1
 800b4f8:	ec51 0b19 	vmov	r0, r1, d9
 800b4fc:	f7f5 f824 	bl	8000548 <__aeabi_dmul>
 800b500:	4642      	mov	r2, r8
 800b502:	464b      	mov	r3, r9
 800b504:	f7f4 fe6a 	bl	80001dc <__adddf3>
 800b508:	4602      	mov	r2, r0
 800b50a:	460b      	mov	r3, r1
 800b50c:	4630      	mov	r0, r6
 800b50e:	4639      	mov	r1, r7
 800b510:	f7f4 fe62 	bl	80001d8 <__aeabi_dsub>
 800b514:	4652      	mov	r2, sl
 800b516:	465b      	mov	r3, fp
 800b518:	f7f4 fe5e 	bl	80001d8 <__aeabi_dsub>
 800b51c:	4602      	mov	r2, r0
 800b51e:	460b      	mov	r3, r1
 800b520:	4620      	mov	r0, r4
 800b522:	4629      	mov	r1, r5
 800b524:	e7d9      	b.n	800b4da <__ieee754_log+0x27a>
 800b526:	4602      	mov	r2, r0
 800b528:	460b      	mov	r3, r1
 800b52a:	4650      	mov	r0, sl
 800b52c:	4659      	mov	r1, fp
 800b52e:	f7f4 fe53 	bl	80001d8 <__aeabi_dsub>
 800b532:	ec53 2b18 	vmov	r2, r3, d8
 800b536:	f7f5 f807 	bl	8000548 <__aeabi_dmul>
 800b53a:	4606      	mov	r6, r0
 800b53c:	460f      	mov	r7, r1
 800b53e:	2c00      	cmp	r4, #0
 800b540:	f43f af23 	beq.w	800b38a <__ieee754_log+0x12a>
 800b544:	a308      	add	r3, pc, #32	; (adr r3, 800b568 <__ieee754_log+0x308>)
 800b546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b54a:	ec51 0b19 	vmov	r0, r1, d9
 800b54e:	f7f4 fffb 	bl	8000548 <__aeabi_dmul>
 800b552:	a307      	add	r3, pc, #28	; (adr r3, 800b570 <__ieee754_log+0x310>)
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	4604      	mov	r4, r0
 800b55a:	460d      	mov	r5, r1
 800b55c:	ec51 0b19 	vmov	r0, r1, d9
 800b560:	e727      	b.n	800b3b2 <__ieee754_log+0x152>
 800b562:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800b5b8 <__ieee754_log+0x358>
 800b566:	e694      	b.n	800b292 <__ieee754_log+0x32>
 800b568:	fee00000 	.word	0xfee00000
 800b56c:	3fe62e42 	.word	0x3fe62e42
 800b570:	35793c76 	.word	0x35793c76
 800b574:	3dea39ef 	.word	0x3dea39ef
 800b578:	55555555 	.word	0x55555555
 800b57c:	3fd55555 	.word	0x3fd55555
 800b580:	df3e5244 	.word	0xdf3e5244
 800b584:	3fc2f112 	.word	0x3fc2f112
 800b588:	96cb03de 	.word	0x96cb03de
 800b58c:	3fc74664 	.word	0x3fc74664
 800b590:	94229359 	.word	0x94229359
 800b594:	3fd24924 	.word	0x3fd24924
 800b598:	55555593 	.word	0x55555593
 800b59c:	3fe55555 	.word	0x3fe55555
 800b5a0:	d078c69f 	.word	0xd078c69f
 800b5a4:	3fc39a09 	.word	0x3fc39a09
 800b5a8:	1d8e78af 	.word	0x1d8e78af
 800b5ac:	3fcc71c5 	.word	0x3fcc71c5
 800b5b0:	9997fa04 	.word	0x9997fa04
 800b5b4:	3fd99999 	.word	0x3fd99999
	...
 800b5c0:	c3500000 	.word	0xc3500000
 800b5c4:	43500000 	.word	0x43500000
 800b5c8:	7fefffff 	.word	0x7fefffff
 800b5cc:	3ff00000 	.word	0x3ff00000
 800b5d0:	3fe00000 	.word	0x3fe00000
 800b5d4:	00000000 	.word	0x00000000

0800b5d8 <nan>:
 800b5d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b5e0 <nan+0x8>
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	00000000 	.word	0x00000000
 800b5e4:	7ff80000 	.word	0x7ff80000

0800b5e8 <_init>:
 800b5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ea:	bf00      	nop
 800b5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ee:	bc08      	pop	{r3}
 800b5f0:	469e      	mov	lr, r3
 800b5f2:	4770      	bx	lr

0800b5f4 <_fini>:
 800b5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5f6:	bf00      	nop
 800b5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5fa:	bc08      	pop	{r3}
 800b5fc:	469e      	mov	lr, r3
 800b5fe:	4770      	bx	lr
